SOUND_EFFECT_PLAY_UNK: ; 13:0000, 0x026000
    LDA #$05
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Request cursor movement sound.
RTN_0x3: ; 13:0005, 0x026005
    LDA CURRENT_SAVE_MANIPULATION_PAGE+542 ; Load ??
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Store ??
    LDY #$F0 ; Seed index ??
VAL_LT_0xF8: ; 13:000C, 0x02600C
    LDA #$A5 ; Val ??
    LSR LIB_BCD/EXTRA_FILE_BCD_A ; >> 1
    BCC SHIFT_CC ; CC, goto.
    LDA #$96 ; Seed val ??
SHIFT_CC: ; 13:0014, 0x026014
    STA SCRIPT_PARTY_ATTRIBUTES[32],Y ; Val ??
    INY ; Index++
    CPY #$F8 ; If _ #$F8
    BCC VAL_LT_0xF8 ; <, goto.
    LDA #$00
    STA SCRIPT_PARTY_ATTRIBUTES[32],Y ; Clear ??
VAL_GTE_0x4: ; 13:0021, 0x026021
    LDX #$00 ; Val ??
VAL_LT_0x4: ; 13:0023, 0x026023
    JSR LIB_FIND_SLOT_OCCUPIED_AND_BETWEEN_0x1-0x5 ; Do ??
    BCS TO_NEXT_X_OBJ_FAST ; Ret CS, goto.
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Do ptr.
    TXA ; X to A.
    PHA ; Save it.
    LDY #$3F ; Stream index reset.
Y_POSITIVE: ; 13:002F, 0x02602F
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from stream.
    STA SCRIPT_PARTY_ATTRIBUTES[32],Y ; Store to page at index.
    DEY ; Y--
    BPL Y_POSITIVE ; Positive, goto.
    LDX #$80 ; Val ??
    LDY #$28 ; Index ??
VAL_LT_0x2C: ; 13:003B, 0x02603B
    LDA SCRIPT_PARTY_ATTRIBUTES[32],Y ; Load ??
    STA PTR_CREATE_SEED_UNK ; Store to.
    JSR SUB_PAGE_AND_FILE_MOVE_UNK ; Do ??
    INY ; Stream++
    CPY #$2C ; If _ #$2C
    BCC VAL_LT_0x2C ; <, goto.
    JSR PTR_SEEDED_UNK_I ; Do ??
    LDA #$F5
    LDX #$A0 ; Seed ptr.
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER ; Do.
    LDA #$C0
    STA PTR_CREATE_SEED_UNK ; Set ??
    JSR PACKETER_UPDATE_IDFK ; Do ??
    LDA #$19
    LDX #$A1 ; Seed FPTR.
    STA FPTR_MENU_PRIMARY[2]
    STX FPTR_MENU_PRIMARY+1
    JSR ENGINE_MENU_INIT_MASTER_FULL ; Do.
LOOPER: ; 13:0064, 0x026064
    BIT SCRIPT_MENU_STATUS ; Test.
    BVS BIT_0x40_SET ; 0x40 set, goto.
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    BEQ TO_NEXT_X_OBJ_STACK ; == 0, goto.
    JSR PACKETER_UPDATE_IDFK ; Packeter.
    BCS COORDS_SET ; CS, goto.
    JSR PACKETER_UPDATE_IDFK ; Run again.
COORDS_SET: ; 13:0074, 0x026074
    LDX #$0A ; Set coords.
    LDY #$03
    STX GFX_COORD_HORIZONTAL_OFFSET
    STY GFX_COORD_VERTICAL_OFFSET
    JSR SETTLE_AND_MENU_COORD_SPRITE_HELPER? ; Do.
    JMP LOOPER ; Goto.
TO_NEXT_X_OBJ_STACK: ; 13:0082, 0x026082
    PLA ; Restore X.
    TAX
TO_NEXT_X_OBJ_FAST: ; 13:0084, 0x026084
    INX ; X += 0x1
    CPX #$04 ; If _ #$04
    BCC VAL_LT_0x4 ; <, goto.
    BCS VAL_GTE_0x4 ; >=, goto, always taken.
BIT_0x40_SET: ; 13:008B, 0x02608B
    PLA ; Pull A.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Do.
SUB_PAGE_AND_FILE_MOVE_UNK: ; 13:008F, 0x02608F
    TYA ; Save Y and X.
    PHA
    TXA
    PHA
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Do.
    LDY #$00 ; Stream reset.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Store PTR L.
    INY ; Stream++
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Store PTR H.
    PLA ; '
    TAX ; Restore X, page index.
    LDY #$00 ; Stream reset.
LT_0x10: ; 13:00A5, 0x0260A5
    LDA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; Load from file.
    STA SCRIPT_PARTY_ATTRIBUTES[32],X ; Store to page.
    INX ; Index++
    INY ; Index++
    CPY #$10 ; If _ #$10
    BCC LT_0x10 ; <, goto.
    PLA
    TAY ; Restore Y.
    RTS
PACKETER_UPDATE_IDFK: ; 13:00B3, 0x0260B3
    LDX #$40
X_LT_0x80: ; 13:00B5, 0x0260B5
    STX RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8] ; Set ??
    JSR SUB_PTR_SEED_TO_STREAM_INDEX_AND_BIT_TO_TEST ; Do ?? <<<<<<<<<<<<<<<<<<
    LDX RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8] ; Load ??
    AND SCRIPT_PARTY_ATTRIBUTES[32],Y ; Test with.
    BEQ VAL_EQ_0x00 ; == 0, goto.
    JSR SUB_PAGE_AND_FILE_MOVE_UNK ; Do ??
VAL_EQ_0x00: ; 13:00C4, 0x0260C4
    INC PTR_CREATE_SEED_UNK ; +
    BNE VAL_NONZERO ; != 0, goto.
    LDA #$C0
    STA PTR_CREATE_SEED_UNK ; Set ??
    CPX #$41 ; If _ #$41
    BCS VAL_GT_0x41 ; >=, goto.
    RTS ; Leave.
X_LT_0x80: ; 13:00D1, 0x0260D1
    LDA #$00
    STA SCRIPT_PARTY_ATTRIBUTES[32],X ; Clear page.
    CLC ; Prep add.
    TXA ; Index to A.
    ADC #$10 ; += 0x10
    TAX ; To X index.
VAL_GT_0x41: ; 13:00DB, 0x0260DB
    CPX #$80 ; If _ #$80
    BCC X_LT_0x80 ; <, goto.
    BCS PACKETER_DATA_SEEDED ; >=, goto.
VAL_NONZERO: ; 13:00E1, 0x0260E1
    CPX #$80 ; If _ #$80
    BCC X_LT_0x80 ; <, goto.
PACKETER_DATA_SEEDED: ; 13:00E5, 0x0260E5
    LDA #$FE
    LDX #$A0 ; Seed ptr.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    STX FPTR_PACKET_CREATION/PTR_H_FILE_IDK+1
CREATE_PACKETER: ; 13:00ED, 0x0260ED
    JSR ENGINE_CREATE_UPDATE_BUF_INIT_DEC? ; Create.
    CMP #$00 ; If _ #$00
    BNE CREATE_PACKETER ; != 0, goto.
    RTS ; Leave.
    .db 20 ; File start, update, packet.
    .db 0B
    .db 03
    .db 23
    .db 38
    .db 06
    .db 00
    .db 07
    .db 00
    .db 20
    .db 13
    .db 05
    .db 23
    .db 40
    .db 06
    .db 00
    .db 0B
    .db 01
    .db 23
    .db 50
    .db 06
    .db 00
    .db 0B
    .db 01
    .db 23
    .db 60
    .db 06
    .db 00
    .db 0B
    .db 01
    .db 23
    .db 70
    .db 06
    .db 00
    .db 0B
    .db 00
    .db 02
    .db 01
    .db 09
    .db 00
    .db C5
    .db 3A
    .db 0A
    .db 03
    .db D1
    .db F0
SCRIPT_PHONE_RELATED?_TODO: ; 13:0123, 0x026123
    LDA #$80 ; Val for setting, too. Nice trick.
    BIT SCRIPT_SPECIAL_EVENT_MASK? ; Test ??
    BNE RTS ; Was set, leave.
    LDX INP_COUNT_UNK_C ; Load ??
    LDY INP_COUNT_UNK_B
    CPX #$06 ; If _ #$06
    BCC RTS ; <, goto.
    CPY #$90 ; If _ #$90
    BCC RTS ; << leave.
    ORA SCRIPT_SPECIAL_EVENT_MASK? ; Set bit tested.
    STA SCRIPT_SPECIAL_EVENT_MASK? ; Store back.
    LDA #$2F ; Val ??
    JSR ENGINE_MAIN_SONG_REPLACE_AND_THEN_RESTORE_MAIN_SONG? ; Song replace, phone sound.
    LDX #$7C
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ?? <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    LDX #$7E
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDX #$80
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDA #$37
    STA ROUTINE_CONTINUE_FLAG? ; Set ??
    JSR STREAMS_MULTIMENUS_UNK ; Do menus.
    BIT SCRIPT_MENU_STATUS ; Test.
    BVS MENU_STATUS_0x40_SET ; 0x40 set, goto.
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    BEQ MENU_STATUS_0x40_SET ; == 0, goto.
    JSR SCRIPT_HELP_SAVE_GAME_FILE ; Save the game.
    LDX #$86 ; Val ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    JMP ENGINE_RESET_GAME ; Goto.
RTS: ; 13:0167, 0x026167
    RTS ; Leave.
MENU_STATUS_0x40_SET: ; 13:0168, 0x026168
    LDX #$82
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Display ptrs?
    LDX #$84
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    JSR WAIT_PRESSES_CLEAR? ; Wait.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto.
ENGINE_UNK_OBJECTS_REELATED?: ; 13:0178, 0x026178
    LDA #$05
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Set ??
    JSR PACKETS_IDK ; Do ??
    LDA #$B0 ; Set FPTR, 13:01B0
    LDX #$A1
    STA FPTR_MENU_PRIMARY[2]
    STX FPTR_MENU_PRIMARY+1
    JSR ENGINE_MENU_INIT_MASTER_FULL ; Do, menu?
    BIT SCRIPT_MENU_STATUS ; Test.
    BMI VAL_NEGATIVE ; Negative, goto.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto ??
VAL_NEGATIVE: ; 13:0192, 0x026192
    LDA #$FF ; Load ??
    JSR ENGINE_CURSOR_TO_BG_UPDATE_INTO_MENU? ; Do ??
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    ASL A ; << 1, *2.
    TAX ; To index.
    LDA RTN_TABLE_H,X ; Move routine.
    PHA
    LDA RTN_TABLE_L,X
    PHA
    RTS ; Execute it.
RTN_TABLE_L: ; 13:01A4, 0x0261A4
    LOW(RTN_0x0) ; 0x00
RTN_TABLE_H: ; 13:01A5, 0x0261A5
    HIGH(RTN_0x0) ; Many routines.
    LOW(RTN_0x1) ; 0x00
    HIGH(RTN_0x1)
    LOW(RTN_0x2) ; 0x01
    HIGH(RTN_0x2)
    LOW(RTN_0x3) ; 0x02
    HIGH(RTN_0x3)
    LOW(RTN_0x4) ; 0x03
    HIGH(RTN_0x4)
    LOW(RTN_0x5) ; 0x04
    HIGH(RTN_0x5)
    .db 02 ; Menu master file.
    .db 03
    .db 06
    .db 02
    .db C0
    .db 3A
    .db 02
    .db 03
    .db D1
    .db F0
RTN_0x5: ; 13:01BA, 0x0261BA
    LDA #$19 ; Seed 19:036E
    LDX #$6D
    LDY #$A3
    JSR ENGINE_SCRIPT_LAUNCH_R7_A_PTR_XY_WITH_RESTORE ; Script launch ??
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Do ??
STREAMY_LIBY_UNK: ; 13:01C6, 0x0261C6
    JSR LIB_RTN_PTR_CREATION/SHIFT+CLEAR_UNK_MOVE_PTR_DOWN_UNK ; Do ??
    BCS RET_CS ; Ret CS, goto.
    JSR SUB_STREAM_AND_CMP_UNK ; Do ??
    BEQ RTS ; ==, goto.
    ASL A ; << 2, *4.
    ASL A
    BCC RTS ; CC, goto.
    AND #$3C ; Keep 0011.1100
    BEQ RTS ; == 0, goto.
    LDA #$35
    STA SCRIPT_COMPARE_ENDING_INDEX? ; Set ??
    JSR STREAM_PROCESS_UNK_INIT ; Do ??
    BCS RTS ; Ret CS, goto.
EXIT_LIB_UNK: ; 13:01E1, 0x0261E1
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto otherwise.
RET_CS: ; 13:01E4, 0x0261E4
    JSR STREAM_MOVE_BANK_STREAM_READ_UNK ; Do ??
    BCC EXIT_LIB_UNK ; Ret CC, goto.
RTS: ; 13:01E9, 0x0261E9
    RTS ; Leave.
RTN_0x0: ; 13:01EA, 0x0261EA
    JSR LIB_SCRIPT_DIRECT_UNK_A ; Do ??
    ASL A ; << 1, *2.
    BPL SEED_X_0x2_UNK ; Positive, goto.
    AND #$1E ; Keep lower.
    BEQ LOWER_EQ_0x00 ; == 0, ,goto.
    JSR LIB_SCRIPT_DIRECT_UNK_B ; Do ??
    LDA #$0A
    STA SCRIPT_COMPARE_ENDING_INDEX? ; Set ??
    JSR STREAM_PROCESS_UNK_INIT ; Do ??
    BCC RET_CC ; CC, goto. TODO always taken?
SEED_X_0x2_UNK: ; 13:0200, 0x026200
    LDX #$02 ; Seed ??
    BNE VAL_SEEDED ; != 0, goto.
LOWER_EQ_0x00: ; 13:0204, 0x026204
    LDX #$04 ; Seed ??
VAL_SEEDED: ; 13:0206, 0x026206
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ptr create.
    JSR WAIT_PRESSES_CLEAR? ; Do wait.
RET_CC: ; 13:020C, 0x02620C
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto.
RTN_0x1: ; 13:020F, 0x02620F
    JSR LIB_SCRIPT_DIRECT_UNK_A ; Do script.
    JSR SUB_STREAM_AND_CMP_UNK ; Do ??
    BNE RETURN_NONZERO ; != 0, goto.
    JSR SUB_UNK_TODO_SAVE_AFFECTED_POSSIBLY? ; Do ??
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto settle.
RETURN_NONZERO: ; 13:021D, 0x02621D
    ASL A ; << 1, *2.
    BPL VAL_STILL_POSITIVE ; Positive, goto.
    AND #$1E ; Keep lower.
    BEQ VAL_STILL_POSITIVE ; Not set, leave.
    LDA #$0B
    STA SCRIPT_COMPARE_ENDING_INDEX? ; Set ??
    JSR STREAM_PROCESS_UNK_INIT ; Do streams.
    BCC RET_CC ; CC, goto.
VAL_STILL_POSITIVE: ; 13:022D, 0x02622D
    LDX #$06 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ??
    JSR WAIT_PRESSES_CLEAR? ; Wait.
RET_CC: ; 13:0235, 0x026235
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto.
RTN_0x4: ; 13:0238, 0x026238
    JSR SUB_UNK_GROUPS_MANY_CHARS? ; Do ??
    BCC SUB_RET_CC ; CC, goto.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto otherwise.
SUB_RET_CC: ; 13:0240, 0x026240
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do.
    LDY #$07 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    STA GFX_BANKS_EXTENSION+3 ; Store to ??
    SEC ; Prep sub.
    LDY #$16 ; Stream index.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    SBC GFX_BANKS_EXTENSION+3 ; Sub with previous.
    INY ; Stream++
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Store result to file next.
    SBC #$00 ; Carry sub ??
    BCC SUB_UNDERFLOW ; Underflow, goto.
    JSR LARGE_ROUTINE_SWITCH ; Do sub. TODO sub.
    JMP WAIT_PRESSES_SYNC_EXIT ; Goto ??
SUB_UNDERFLOW: ; 13:025D, 0x02625D
    LDX #$10 ; Load ??
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT ; Goto.
RTN_0x2: ; 13:0262, 0x026262
    JSR SUB_TODO_MENU_SUBY? ; Do ??
    BCC SCRIPT_EXIT_MENU_UNK ; CC, goto.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Settle and flags.
SCRIPT_EXIT_MENU_UNK: ; 13:026A, 0x02626A
    JSR PTR_SEEDED_UNK_D ; Do ??
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do ??
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do ??
    BEQ UPPER_EQ_0x00 ; == 0, goto.
    LDA PTR_CREATE_SEED_UNK ; Create seed ??
    CMP #$03 ; If _ #$03
    BEQ UPPER_EQ_0x00 ; ==, goto.
    LDA #$A2
    LDX #$A2 ; Seed 13:02A2
    BNE SUBMENU_SEEDED ; Seeded.
UPPER_EQ_0x00: ; 13:0281, 0x026281
    LDA #$D1 ; Seed 1F:10D1
    LDX #$F0
SUBMENU_SEEDED: ; 13:0285, 0x026285
    STA FPTR_MENU_SECONDARY/SUBMENU[2] ; Setup submenu.
    STX FPTR_MENU_SECONDARY/SUBMENU+1
    LDA #$9A ; Seed master.
    LDX #$A2
    STA FPTR_MENU_PRIMARY[2]
    STX FPTR_MENU_PRIMARY+1
    JSR ENGINE_MENU_INIT_MASTER_PARTIAL ; Init master with seeded submenu.
    BIT SCRIPT_MENU_STATUS ; Check status.
    BMI STATUS_MENU_SELECTED ; Selected, goto.
    BPL RTN_0x2 ; Always taken, loop.
    .db 01
    .db 05
    .db 00
    .db 02
    .db C0
    .db 3A
    .db 18
    .db 07
    .db 00 ; Fptr submenu.
    .db 00
    .db 03
    .db 04
    .db 00
STATUS_MENU_SELECTED: ; 13:02A7, 0x0262A7
    LDA #$FF ; Tile for cursor.
    JSR ENGINE_CURSOR_TO_BG_UPDATE_INTO_MENU? ; To BG.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do.
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Do.
    ASL A ; << 1, *2.
    TAX ; To index.
    LDA RTN_TABLE_H,X ; Routine stack execute.
    PHA
    LDA RTN_TABLE_L,X
    PHA
    RTS
RTN_TABLE_L: ; 13:02BC, 0x0262BC
    LOW(RTN_A) ; Do rtn.
RTN_TABLE_H: ; 13:02BD, 0x0262BD
    HIGH(RTN_A) ; About a billion file exits this can do.
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_C)
    HIGH(RTN_C)
    LOW(RTN_D)
    HIGH(RTN_D)
    LOW(RTN_E)
    HIGH(RTN_E)
RTN_A: ; 13:02C6, 0x0262C6
    LDY #$03 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load ??
    BNE VAL_NONZERO ; != 0, goto.
    LDY #$02 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load ??
    AND #$3F ; Keep lower.
    BEQ FILE_ALT ; == 0
    LDX PARTY/BATTLE_ID?_TODO ; Load ??
    AND MASK_DATA_UNK,X ; Keep ??
    BEQ MASK_EQ_0x00 ; == 0, goto.
    JSR LARGE_ROUTINE_SWITCH ; Do switch.
    JMP WAIT_PRESSES_SYNC_EXIT ; Wait presses.
FILE_ALT: ; 13:02E1, 0x0262E1
    LDX #$16 ; Do file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ??
    JSR RTN_A_FILE_SEED_UNK ; File ??
    JMP WAIT_PRESSES_SYNC_EXIT ; Goto exit.
MASK_EQ_0x00: ; 13:02EC, 0x0262EC
    LDX #$18 ; Seed ??
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT ; Goto.
VAL_NONZERO: ; 13:02F1, 0x0262F1
    STA LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Store nonzero.
    LDY #$02 ; Seed stream.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load ??
    LDX PARTY/BATTLE_ID?_TODO ; Seed ??
    AND MASK_DATA_UNK,X ; Mask ??
    BEQ MASK_EQ_0x00 ; == 0, goto.
    JSR SUB_TODO ; Do ??
    BCS MASK_EQ_0x00 ; Ret CS, goto.
    LDX #$1C ; File.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do.
    LDA #$04
    STA SOUND_EFFECT_REQUEST_ARRAY+3 ; Set ??
    JMP WAIT_PRESSES_SYNC_EXIT ; Goto.
MASK_EQ_0x00: ; 13:0310, 0x026310
    LDX #$1E ; File do.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
RTN_C: ; 13:0315, 0x026315
    LDX COUNT_LOOPS?_UNK ; Load ??
    DEX ; --
    BEQ EXIT_FILE_0C ; == 0, goto.
    LDA PTR_CREATE_SEED_UNK ; Load.
    CMP #$03 ; If _ #$03
    BEQ VAL_EQ_0x3 ; ==, goto.
    JSR SUB_DEEPER/RESTORE_HELPER ; Do.
    BCS EXIT_MENU_UNK ; Goto.
    JSR BANKED_DERP ; Do ??
    BCS RET_CS ; CS, goto.
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do ??
    CMP GFX_BANKS_EXTENSION+2 ; If _ var
    BEQ UPPER_NIBBLE_FILE_SELECT_PORTION ; ==, goto.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do sub.
    BNE EXTENDED_A ; != 0, goto.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do sub.
    BNE EXIT_FILE_0x4C ; != 0, goto.
    LDX #$24 ; Seed file.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_FILE_0x4C: ; 13:0344, 0x026344
    LDX #$4C
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXTENDED_A: ; 13:0349, 0x026349
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do upper.
    BNE EXIT_FILE_0x52 ; !=, goto.
    LDX #$4E ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
UPPER_NIBBLE_FILE_SELECT_PORTION: ; 13:0356, 0x026356
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Get upper.
    BNE EXIT_FILE_0x52 ; != 0, goto.
    LDX #$50 ; Get upper.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_FILE_0x52: ; 13:0360, 0x026360
    LDX #$52 ; Seed file.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
VAL_EQ_0x3: ; 13:0365, 0x026365
    LDX #$26 ; Seed file.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
RET_CS: ; 13:036A, 0x02636A
    LDA PARTY/BATTLE_ID?_TODO ; Load.
    CMP GFX_BANKS_EXTENSION+2 ; If _ #$02
    BEQ UPPER_NIBBLE_FILE_SELECT_PORTION ; ==, goto.
    LDX #$28 ; File ??
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_FILE_0C: ; 13:0375, 0x026375
    LDX #$0C ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_MENU_UNK: ; 13:037A, 0x02637A
    JMP SCRIPT_EXIT_MENU_UNK ; Goto.
RTN_B: ; 13:037D, 0x02637D
    LDY #$02 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load stream.
    AND #$40 ; Keep ??
    BEQ EXIT_FILE_1A ; == 0, goto.
    JSR LARGE_ROUTINE_SWITCH ; Do switch.
    JMP WAIT_PRESSES_SYNC_EXIT ; Goto.
EXIT_FILE_1A: ; 13:038B, 0x02638B
    LDX #$1A ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT ; Goto.
RTN_D: ; 13:0390, 0x026390
    JSR SUB_TODO_WRAM/STATUS_UNK ; Do ??
    BCS EXIT_FILE_0x22 ; CS, file.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Get nibble.
    BNE EXIT_FILE_0x54 ; != 0, goto.
    LDX #$20 ; Exit file.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_FILE_0x54: ; 13:039F, 0x02639F
    LDX #$54 ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_FILE_0x22: ; 13:03A4, 0x0263A4
    LDX #$22 ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
RTN_E: ; 13:03A9, 0x0263A9
    CLC ; Prep add.
    LDA PTR_CREATE_SEED_UNK ; Load ??
    ADC #$E8 ; += 0xE8
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Store to,, PTR H.
    LDA #$00 ; Prep carry.
    ADC #$03 ; Make 3 or 4.
    STA ARG/PTR_L ; Store addr L.
    JSR SCRIPT_USE_ENTRY_TODO_UNK ; Do ??
    JMP WAIT_PRESSES_SYNC_EXIT ; Exit sync.
LARGE_ROUTINE_SWITCH: ; 13:03BC, 0x0263BC
    LDY #$04 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    ASL A ; << 1, *2.
    TAX ; To X index.
    LDA RTN_TABLE_H,X ; Move RTN to stack.
    PHA
    LDA RTN_TABLE_L,X
    PHA
    RTS ; Execute it.
RTN_TABLE_L: ; 13:03CB, 0x0263CB
    LOW(RTN_A_FILE_SEED_UNK) ; Todo these.
RTN_TABLE_H: ; 13:03CC, 0x0263CC
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_B) ; Movement?
    HIGH(RTN_B)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_C)
    HIGH(RTN_C)
    LOW(RTN_D)
    HIGH(RTN_D)
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_E)
    HIGH(RTN_E)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_F)
    HIGH(RTN_F)
    LOW(RTN_G)
    HIGH(RTN_G)
    LOW(RTN_H)
    HIGH(RTN_H)
    LOW(RTN_I)
    HIGH(RTN_I)
    LOW(RTN_J)
    HIGH(RTN_J)
    LOW(RTN_K)
    HIGH(RTN_K)
    LOW(RTN_L)
    HIGH(RTN_L)
    LOW(RTN_M)
    HIGH(RTN_M)
    LOW(RTN_N)
    HIGH(RTN_N)
    LOW(RTN_O)
    HIGH(RTN_O)
    LOW(RTN_P)
    HIGH(RTN_P)
    LOW(RTN_Q)
    HIGH(RTN_Q)
    LOW(RTN_R) ; Seed todo.
    HIGH(RTN_R)
    LOW(RTN_S)
    HIGH(RTN_S)
    LOW(RTN_T)
    HIGH(RTN_T)
    LOW(RTN_U)
    HIGH(RTN_U)
    LOW(RTN_V)
    HIGH(RTN_V)
    LOW(RTN_W_FILE_SET_0x74) ; File.
    HIGH(RTN_W_FILE_SET_0x74)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_X)
    HIGH(RTN_X)
    LOW(RTN_Y)
    HIGH(RTN_Y)
    LOW(RTN_Z_FILE_SET_0x62)
    HIGH(RTN_Z_FILE_SET_0x62)
    LOW(RTN_AA_FILE_SET_0x64)
    HIGH(RTN_AA_FILE_SET_0x64)
    LOW(RTN_AB)
    HIGH(RTN_AB)
    LOW(RTN_AC_FILE_SET_0x70_AND_XTRA)
    HIGH(RTN_AC_FILE_SET_0x70_AND_XTRA)
    LOW(RTN_AD_COMMON_0xE)
    HIGH(RTN_AD_COMMON_0xE)
    LOW(RTN_AE)
    HIGH(RTN_AE)
    LOW(RTN_AF)
    HIGH(RTN_AF)
    LOW(RTN_AG)
    HIGH(RTN_AG)
    LOW(RTN_AH)
    HIGH(RTN_AH)
    LOW(RTN_AI)
    HIGH(RTN_AI)
    LOW(RTN_AJ)
    HIGH(RTN_AJ)
    LOW(RTN_AD_COMMON_0xE)
    HIGH(RTN_AD_COMMON_0xE)
    LOW(RTN_AK)
    HIGH(RTN_AK)
    LOW(RTN_AL)
    HIGH(RTN_AL)
RTN_AE: ; 13:0427, 0x026427
    JSR GFX_FILE_SUB_UNK_PTR_MOD? ; Do ??
    JSR LIB_SCRIPT_DIRECT_UNK_A ; Do ??
    ASL A ; << 1, *2.
    BPL RTN_AD_COMMON_0xE ; Positive, goto.
    AND #$1E ; Keep 0001.1110
    BEQ RTN_AD_COMMON_0xE ; == 0, goto.
    LDA #$0C ; Seed ??
    STA SCRIPT_COMPARE_ENDING_INDEX?
    JSR STREAM_PROCESS_UNK_INIT ; Do ??
    BCS RTN_AD_COMMON_0xE ; Ret CS, goto.
    RTS ; Leave CC.
RTN_AD_COMMON_0xE: ; 13:043E, 0x02643E
    LDX #$0E ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ??
RTN_A_FILE_SEED_UNK: ; 13:0443, 0x026443
    LDX #$2A ; Seed file ??
SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X: ; 13:0445, 0x026445
    JSR SEED_FILE_PTR_ID_X_TODO ; Do.
    JMP SCRIPT_USE_ENTRY_TODO_UNK ; Goto.
SCRIPT+HELPER_COMMON_TODO_SHORT: ; 13:044B, 0x02644B
    JSR SEED_FILE_PTR_ID_X_TODO ; Do.
    JMP EXIT_UNK ; Goto.
RTN_B: ; 13:0451, 0x026451
    JSR LIB_SCRIPT_DIRECT_UNK_A ; Do lib.
    ASL A ; << 1, *2.
    BPL RTN_A_FILE_SEED_UNK ; Positive, goto file seed.
    AND #$1E ; Keep 0001.1110
    BEQ RTN_A_FILE_SEED_UNK ; == 0, seed file.
    LDA #$0D
    STA SCRIPT_COMPARE_ENDING_INDEX? ; Clear ??
    JSR STREAM_PROCESS_UNK_INIT ; Do streams.
    BCS RTN_A_FILE_SEED_UNK ; CS, goto.
    RTS ; Leave.
RTN_E: ; 13:0465, 0x026465
    JSR SUB_WRAM_UNK_TO_SOLVE ; Do sub.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Wram writable.
    LDA #$0A
    STA CURRENT_SAVE_MANIPULATION_PAGE+25 ; Set ??
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Not writable.
    LDX #$16 ; Seed file.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Goto common.
RTN_Y: ; 13:0478, 0x026478
    JSR SUB_WRAM_UNK_TO_SOLVE ; Do sub.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do writable.
    LDY #$2C ; Seed file index.
VAL_LT_0x30: ; 13:0480, 0x026480
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    STA WRAM_ARR_UNK[48],Y ; Store same to WRAM.
    INY ; ++
    CPY #$30 ; If _ #$30
    BCC VAL_LT_0x30 ; <, goto.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Do disabled.
    LDA #$40
    STA FIRST_LAUNCHER_HOLD_FLAG? ; Set flag ??
    LDA #$01
    STA SWITCH_INIT_PORTION? ; Set switch ??
    LDX #$48 ; Seed file ??
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Goto, run file.
RTN_C: ; 13:049A, 0x02649A
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    BNE VAL_NONZERO ; != 0, goto.
    LDA #$03 ; Load ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do sub.
    BCC RET_CC ; CC, do other file.
    LDA PTR_CREATE_SEED_UNK ; Load ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do test.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM writable.
    LDA #$03 ; Seed ??
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Store to file.
    LDY #$2C ; Arr index seed.
VAL_LT_0x30: ; 13:04B3, 0x0264B3
    LDA WRAM_ARR_UNK[48],Y ; Load WRAM.
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store to GFX file.
    INY ; Index/stream++
    CPY #$30 ; If _ #$30
    BCC VAL_LT_0x30 ; <, goto.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable WRAM.
    LDX #$44 ; Seed ??
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Goto.
RET_CC: ; 13:04C5, 0x0264C5
    LDX #$46 ; Seed alt.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Goto.
VAL_NONZERO: ; 13:04CA, 0x0264CA
    LDA #$14 ; Seed ??
    JMP ENTRY_A_SEEDED_UNK
RTN_D: ; 13:04CF, 0x0264CF
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    BNE VAL_NONZERO ; != 0, goto.
    JMP RTN_B ; Goto.
VAL_NONZERO: ; 13:04D6, 0x0264D6
    LDA #$0F ; Seed val.
    JMP ENTRY_A_SEEDED_UNK ; Goto.
RTN_AG: ; 13:04DB, 0x0264DB
    LDA #$1E ; Seed val.
    JMP ENTRY_UNK ; Goto ??
RTN_AH: ; 13:04E0, 0x0264E0
    LDA #$50 ; Seed val.
    JMP ENTRY_UNK
RTN_AI: ; 13:04E5, 0x0264E5
    JSR SCRIPT_HELPER_SEED_0x3E8_UNK ; Do seed.
    JMP RTN_RESTORE_UNK ; Goto.
RTN_F: ; 13:04EB, 0x0264EB
    LDA #$0A ; Seed ??
    JMP RTN_UNK_B
RTN_G: ; 13:04F0, 0x0264F0
    LDA #$14 ; Seed ??
    JMP ENTRY_A_SEEDED_UNK
RTN_H: ; 13:04F5, 0x0264F5
    LDA #$1E ; Seed ??
    JMP ENTRY_A_SEEDED_UNK
RTN_I: ; 13:04FA, 0x0264FA
    LDA #$3C ; Seed ??
    JMP ENTRY_A_SEEDED_UNK
RTN_J: ; 13:04FF, 0x0264FF
    LDA #$64 ; Seed ??
    JMP RTN_UNK_B
RTN_K: ; 13:0504, 0x026504
    JSR SCRIPT_HELPER_SEED_0x3E8_UNK ; Do ??
    LDX #$16 ; Seed ??
    JMP VAL_SEEDED_UNK ; Goto. TODO: Mistake not BNE? Odd.
RTN_L: ; 13:050C, 0x02650C
    LDA #$1E
    JSR SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE ; Seed ??
    JSR SUB_DEEPER/RESTORE_HELPER ; Do ??
    BCS EXIT_PULL_EXTRA_UNK ; CS, goto.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do ??
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do ??
    BMI RET_NEGATIVE ; Negative, goto.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do ??
    LDX #$42 ; Seed file ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM writable.
    DEC CURRENT_SAVE_MANIPULATION_PAGE+31 ; --
    PHP ; Save status.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; No more writes.
    PLP ; Pull result.
    BNE RESULT_NONZERO ; != 0, goto.
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do sub.
    LDX #$56 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do file.
RESULT_NONZERO: ; 13:053B, 0x02653B
    JMP EXIT_SYNC_UNK ; Goto.
RTN_UNK_B: ; 13:053E, 0x02653E
    LDX #$2E ; Seed ??
    BNE FILE_SEEDED ; != 0, ,goto.
ENTRY_A_SEEDED_UNK: ; 13:0542, 0x026542
    LDX #$2C ; Move ??
FILE_SEEDED: ; 13:0544, 0x026544
    STX FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Store file.
    JSR SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE ; Do ??
    LDX FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Load file.
VAL_SEEDED_UNK: ; 13:054B, 0x02654B
    JSR SEED_FILE_PTR_ID_X_TODO ; Do it.
    JSR SUB_DEEPER/RESTORE_HELPER ; Restore.
    BCS EXIT_PULL_EXTRA_UNK ; CS, goto.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do sub.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do ??
    BMI RET_NEGATIVE ; Negative, goto.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do ??
    JSR SCRIPT_USE_ENTRY_TODO_UNK ; Do ??
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do ??
EXIT_SYNC_UNK: ; 13:0564, 0x026564
    JSR SUB_TODO_B ; Do ??
    JMP SYNC_WAIT_ANY_PRESS ; Goto.
EXIT_PULL_EXTRA_UNK: ; 13:056A, 0x02656A
    PLA ; Pull addr.
    PLA
    JMP SCRIPT_EXIT_MENU_UNK ; Goto.
RET_NEGATIVE: ; 13:056F, 0x02656F
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do ??
    LDX #$58 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do.
EXIT_JUMP_SEEDED: ; 13:0577, 0x026577
    JMP RTN_A_FILE_SEED_UNK
ROUTINE_TODO_SEEDED: ; 13:057A, 0x02657A
    STA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Save file ??
    STY PAIR_UNK_LEVEL_UP_RELATED?+1
    JSR SEED_FILE_PTR_ID_X_TODO ; Seed file.
    JSR SUB_DEEPER/RESTORE_HELPER ; Do sub.
    BCS EXIT_PULL_EXTRA_UNK ; CS, goto.
    LDA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Load ??
    BMI VAL_NEGATIVE ; Negative, goto.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do ??
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do ??
    BMI RET_NEGATIVE ; Negative, goto.
VAL_NEGATIVE: ; 13:0592, 0x026592
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do ??
    JSR SCRIPT_USE_ENTRY_TODO_UNK ; Do ??
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do ??
RTN_FILE_UNK: ; 13:059B, 0x02659B
    LDY #$01 ; Stream index.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    AND PAIR_UNK_LEVEL_UP_RELATED?[2] ; Mask with.
    BEQ EXIT_JUMP_SEEDED ; == 0, goto.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM.
    LDA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Load ??
    PHP ; Save status.
    EOR #$FF ; Invert.
    AND [GFX_BANKS_EXTENSION[4]],Y ; Mask with.
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store back.
    PLP ; Pull status.
    BPL VALUE_POSITIVE ; Positive, goto.
    JSR NEGATIVE_RTN ; Do negative.
VALUE_POSITIVE: ; 13:05B5, 0x0265B5
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; No WRAM.
    LDA #$07
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Set SFX, very good thingy ??
    LDX PAIR_UNK_LEVEL_UP_RELATED?+1 ; Load ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ??
    JMP SYNC_WAIT_ANY_PRESS ; Goto.
SEEDED_VALS_X_FILE_Y_TO_TODO: ; 13:05C5, 0x0265C5
    STY PAIR_UNK_LEVEL_UP_RELATED?[2] ; Y to ??
    JSR SEED_FILE_PTR_ID_X_TODO ; Do ??
    JSR SUB_DEEPER/RESTORE_HELPER ; Do deeper.
    BCS EXIT_PULL_EXTRA_UNK ; Ret CS, leave one more up.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do ??
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Upper nibble.
    BMI RET_NEGATIVE ; Negative, goto.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do ??
    JSR SCRIPT_USE_ENTRY_TODO_UNK ; Do ??
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do ??
    LDY PAIR_UNK_LEVEL_UP_RELATED?[2] ; Load ??
SEEDED_STREAM: ; 13:05E2, 0x0265E2
    LDA #$05 ; Seed to go to.
    JSR SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE ; Goto.
    CLC ; Prep add.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load file.
    ADC PAIR_UNK_LEVEL_UP_RELATED?[2] ; Mod with.
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Store to.
    BCC ADD_NO_OVERFLOW ; No overflow, goto.
    CLC ; Prep add.
    LDA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Load ??
    SBC SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Sub with.
    STA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Store to.
ADD_NO_OVERFLOW: ; 13:05F7, 0x0265F7
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM Mod.
    CLC ; Prep add.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load file.
    ADC PAIR_UNK_LEVEL_UP_RELATED?[2] ; Add with.
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store to.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Do sub.
    CLC ; Prep add.
    TYA ; Stream index.
    ADC #$11 ; += 11
    ASL A ; *2.
    TAX ; To X index, file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do file.
    LDX #$32 ; Seed file.
    JMP SCRIPT+HELPER_COMMON_TODO_SHORT ; Goto.
RTN_AF: ; 13:0612, 0x026612
    JSR WRAM_TEST_543_MENU_UNK ; Test.
    JSR SUB_MENU_TO_SOLVE ; Do submenu.
    BCS RET_CS ; Ret CS, goto.
    JSR GFX_FILE_SUB_UNK_PTR_MOD? ; Do sub.
    LDX #$0E ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    PLA ; Pull 2 levels.
    PLA
    PLA
    PLA
    JSR WAIT_PRESSES_CLEAR? ; Wait.
    JMP MENU_DOUBLE_EXIT_SAVE_SONG_AND_ASSIGN_NEW_AND_SFX ; Goto.
WRAM_TEST_543_MENU_UNK: ; 13:062C, 0x02662C
    LDA CURRENT_SAVE_MANIPULATION_PAGE+543 ; Load ??
    AND #$02 ; Keep ??
    BEQ RTS ; Clear, leave.
    PLA ; Pull rtn?
    PLA
    LDX #$12 ; Seed file.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Go do it.
RTS: ; 13:063A, 0x02663A
    RTS ; Leave.
ENTRY_UNK: ; 13:063B, 0x02663B
    JSR SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE ; Do ??
RTN_RESTORE_UNK: ; 13:063E, 0x02663E
    JSR SUB_DEEPER/RESTORE_HELPER ; Do ??
EXIT_PULL_EXTRA: ; 13:0641, 0x026641
    BCS RET_CS ; Ret CS, goto.
    JSR GFX_FILE_SUB_UNK_PTR_MOD? ; Do ??
    LDX #$0E ; Seed file ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do scrip.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do ??
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do ??
    BMI EXIT_KNOWN ; Negative, goto.
    JSR SUB_TODO_B ; Do sub.
    JMP SYNC_WAIT_ANY_PRESS ; Goto.
RET_CS: ; 13:0659, 0x026659
    PLA ; Pull script off?
    PLA
    JMP RTN_0x4 ; Goto ??
EXIT_KNOWN: ; 13:065E, 0x02665E
    JMP RTN_A_FILE_SEED_UNK ; Goto.
SYNC_PTR_TODO: ; 13:0661, 0x026661
    STA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Store ??
    STY PAIR_UNK_LEVEL_UP_RELATED?+1
    JSR SUB_DEEPER/RESTORE_HELPER ; Do ??
    BCS RET_CS ; Ret CS, goto.
    JSR GFX_FILE_SUB_UNK_PTR_MOD? ; Do sub.
    LDX #$0E ; Seed ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do sub.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do sub.
    LDA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Load ??
    BMI VAL_NEGATIVE ; Negative, goto.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do sub.
    BMI EXIT_KNOWN ; Negative, goto.
VAL_NEGATIVE: ; 13:067E, 0x02667E
    JMP RTN_FILE_UNK ; Do ??
SUB_TODO_B: ; 13:0681, 0x026681
    LDY #$14 ; Seed stream index.
    JSR SCRIPT_CREATE_SAVE_PTR_TODO ; Mod save ptr.
    LDY #$03 ; Seed ??
    JSR FILE_PROCESS_UNK_TODO ; Do ??
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Wram writable.
    LDY #$14 ; Seed file adding to.
    JSR FILE_ADD_UNK_STORED_BACK_UNK ; Add.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; No WRAM.
    LDA #$07
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Sound effect use special or idk.
    LDX #$34
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; File.
    LDX #$30
    JMP SCRIPT+HELPER_COMMON_TODO_SHORT ; Goto.
SCRIPT_CREATE_SAVE_PTR_TODO: ; 13:06A5, 0x0266A5
    CLC ; Prep add.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    ADC PAIR_UNK_LEVEL_UP_RELATED?[2] ; Add with ??
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Store to save ptr.
    INY ; Stream++
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load ??
    ADC PAIR_UNK_LEVEL_UP_RELATED?+1 ; Add with ??
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Store to mod ptr.
    RTS ; Leave.
FILE_PROCESS_UNK_TODO: ; 13:06B4, 0x0266B4
    SEC ; Prep sub.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    SBC SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Sub with.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8] ; Store to.
    INY ; Stream++
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    SBC SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Sub with.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1 ; Store to.
    BCS RTS ; No underflow, goto.
    LDA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Load ??
    ADC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8] ; Add with.
    STA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Store to.
    LDA PAIR_UNK_LEVEL_UP_RELATED?+1 ; Load ??
    ADC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1 ; Add with.
    STA PAIR_UNK_LEVEL_UP_RELATED?+1 ; Store to.
RTS: ; 13:06D0, 0x0266D0
    RTS ; Leave.
FILE_ADD_UNK_STORED_BACK_UNK: ; 13:06D1, 0x0266D1
    CLC ; Prep add.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    ADC PAIR_UNK_LEVEL_UP_RELATED?[2] ; Add with.
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store back to file.
    INY ; Stream++
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    ADC PAIR_UNK_LEVEL_UP_RELATED?+1 ; Add with.
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store back to file.
    RTS ; Leave.
NEGATIVE_RTN: ; 13:06E0, 0x0266E0
    LDY #$03 ; Stream index.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Move stream to other. Pair.
    LDY #$14
    STA [GFX_BANKS_EXTENSION[4]],Y
    LDY #$04
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Move stream to other.
    LDY #$15
    STA [GFX_BANKS_EXTENSION[4]],Y
SCRIPT_SUB_EXTRA: ; 13:06F0, 0x0266F0
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??[2] ; Save ??
    PHA
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PHA
    JSR LIB_SPECIAL_CHECKS_UNK ; Do checks.
    JSR FIND_ID_IN_BATTLE? ; Find ID.
    BCS PARTY_ID_NOT_FOUND ; CS, goto. Failed.
    TXA ; Party index ID to A.
    JSR ENGINE_CRAFT_MAP_OBJ_RESERVATION_PTR ; Do sub.
    LDA ENGINE_MAPPER_BANK_VALS_COMMITTING+6 ; Save R6 committing.
    PHA
    LDY #$15 ; Stream index.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load from file. ID for map?
    ASL A ; << 3, *8.
    ASL A
    ASL A
    TAX ; To X index.
    JSR DATA_MAP_RESERVATION_HELPER?_TODO ; Do ??
    PLA ; Pull R6 back.
    LDX #$06
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A ; Restore it.
    LDA #$1D ; Seed battle level up sound.
    JSR ENGINE_MAIN_SONG_REPLACE_AND_THEN_RESTORE_MAIN_SONG? ; Replace.
    JSR FOCUS/ID_RELATED_TODO ; Do ??
PARTY_ID_NOT_FOUND: ; 13:071E, 0x02671E
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM writes.
    PLA ; Stack to ??
    STA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    RTS ; Leave.
FIND_ID_IN_BATTLE?: ; 13:0728, 0x026728
    LDA PARTY/BATTLE_ID?_TODO ; Load finding.
    LDX #$00 ; Seed ??
INDEX_LT_0x4: ; 13:072C, 0x02672C
    CMP WRAM_ARR_PARTY_CHARACTER_IDS?[6],X ; If _ index
    CLC ; Prep add.
    BEQ COMPARE_MATCH ; ==, leave, found.
    INX ; ++
    CPX #$04 ; If _ #$04
    BCC INDEX_LT_0x4 ; <, goto.
COMPARE_MATCH: ; 13:0737, 0x026737
    RTS ; Leave.
RTN_AK: ; 13:0738, 0x026738
    LDA #$02 ; Seed ??
    LDY #$5A
    JMP SYNC_PTR_TODO
RTN_AJ: ; 13:073F, 0x02673F
    LDA #$40 ; Seed ??
    LDY #$6C
    JMP SYNC_PTR_TODO
RTN_AL: ; 13:0746, 0x026746
    LDA #$80 ; Seed ??
    LDY #$14
    JMP SYNC_PTR_TODO
RTN_M: ; 13:074D, 0x02674D
    LDA #$02 ; Seed ??
    LDX #$2E ; File.
    LDY #$5A ; Seed ??
    JMP ROUTINE_TODO_SEEDED ; Goto.
RTN_N: ; 13:0756, 0x026756
    LDA #$01 ; Seed ??
    LDX #$16 ; File.
    LDY #$5C ; Seed ??
    JMP ROUTINE_TODO_SEEDED
RTN_O: ; 13:075F, 0x02675F
    LDA #$14 ; Seed ??
    JSR SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE ; Do ??
    LDX #$5E ; File ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do it.
    LDY #$16 ; Seed ??
    JSR SCRIPT_CREATE_SAVE_PTR_TODO ; Do ??
    LDY #$05 ; Seed ??
    JSR FILE_PROCESS_UNK_TODO ; Do battle ??
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM writable.
    LDY #$16 ; File index.
    JSR FILE_ADD_UNK_STORED_BACK_UNK ; Do ??
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Disabled.
    LDX #$36 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do it.
    LDX #$30 ; Seed ??
    JSR SCRIPT+HELPER_COMMON_TODO_SHORT ; Do ??
    JSR RANDOMIZE_GROUP_A ; Random.
    CMP #$19 ; If _ #$19
    BCS EXIT_SYNC_WAIT_PRESS ; >=, goto.
    JSR SUB_WRAM_UNK_TO_SOLVE ; Do ??
    LDX #$60 ; File ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do it.
EXIT_SYNC_WAIT_PRESS: ; 13:0797, 0x026797
    JMP SYNC_WAIT_ANY_PRESS ; Goto.
RTN_P: ; 13:079A, 0x02679A
    LDX #$4A ; File.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do.
    JSR SUB_WRAM_UNK_TO_SOLVE ; Do ??
    LDY #$0F ; Seed ??
    JMP SEEDED_STREAM ; Goto.
RTN_Q: ; 13:07A7, 0x0267A7
    LDX #$2C ; File.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ??
    JSR SUB_WRAM_UNK_TO_SOLVE ; Do WRAM.
    LDY #$0B ; Seed ??
    JMP SEEDED_STREAM ; Goto.
RTN_R: ; 13:07B4, 0x0267B4
    LDX #$2E ; Seed ??
    LDY #$0C
    JMP SEEDED_VALS_X_FILE_Y_TO_TODO
RTN_S: ; 13:07BB, 0x0267BB
    LDX #$2E
    LDY #$0D
    JMP SEEDED_VALS_X_FILE_Y_TO_TODO
RTN_T: ; 13:07C2, 0x0267C2
    LDX #$2E
    LDY #$0E
    JMP SEEDED_VALS_X_FILE_Y_TO_TODO
RTN_U: ; 13:07C9, 0x0267C9
    LDX #$2E
    LDY #$0F
    JMP SEEDED_VALS_X_FILE_Y_TO_TODO
RTN_V: ; 13:07D0, 0x0267D0
    LDX #$2E
    LDY #$0B
    JMP SEEDED_VALS_X_FILE_Y_TO_TODO
RTN_X: ; 13:07D7, 0x0267D7
    JSR WRAM_TEST_543_MENU_UNK ; Test ??
    LDA CURRENT_SAVE_MANIPULATION_PAGE+540 ; Load ??
    BPL VAL_POSITIVE ; Positive, goto.
    JMP RTN_A_FILE_SEED_UNK ; Do otherwise.
VAL_POSITIVE: ; 13:07E2, 0x0267E2
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Enable WRAM.
    LDX #$03 ; Seed index.
VAL_POSITIVE: ; 13:07E7, 0x0267E7
    LDA DATA_SAVE_UNK,X ; Load data.
    STA CURRENT_SAVE_MANIPULATION_PAGE+4,X ; Store to WRAM/save.
    DEX ; Index--
    BPL VAL_POSITIVE ; Positive, goto.
    JSR SLOTS_AND_FPTRS_TODO_LARGER_FILES ; Do ??
    JSR LIB_FIND_PARTY_ID_0x6 ; Do ??
    LDA #$02
    STA SWITCH_INIT_PORTION? ; Set switch ??
    LDA #$40
    STA FIRST_LAUNCHER_HOLD_FLAG? ; Set ??
    LDX #$16 ; File.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do it.
DATA_SAVE_UNK: ; 13:0803, 0x026803
    .db 49 ; TODO: R6, PTRS? TODO.
    .db 9E
    .db 44
    .db A8
RTN_Z_FILE_SET_0x62: ; 13:0807, 0x026807
    LDX #$62 ; Seed file.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
RTN_AA_FILE_SET_0x64: ; 13:080C, 0x02680C
    LDX #$64 ; File.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
RTN_W_FILE_SET_0x74: ; 13:0811, 0x026811
    LDX #$74 ; File.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
RTN_AC_FILE_SET_0x70_AND_XTRA: ; 13:0816, 0x026816
    LDX #$70 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDA #$01 ; Seed song, beeps TODO why. Melody related.
    JSR ENGINE_MAIN_SONG_REPLACE_AND_THEN_RESTORE_MAIN_SONG?
    LDX #$72 ; Seed file.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
RTN_AB: ; 13:0825, 0x026825
    PLA ; Pull layer?
    PLA
    LDX #$78 ; File ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do.
    JMP SCRIPT_UNK ; Exit ??
ENGINE_MAIN_RTN_MANY_FADES: ; 13:082F, 0x02682F
    LDA #$05
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Set ??
SCRIPT_UNK: ; 13:0834, 0x026834
    LDA R_**:$0014 ; Load ??
    CMP #$01 ; If _ #$01
    BEQ VAL_EQ_0x01 ; ==, goto.
    CMP #$02 ; If _ #$02
    BEQ VAL_EQ_0x01 ; ==, goto.
    LDX #$7A ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT ; Goto ??
VAL_EQ_0x01: ; 13:0843, 0x026843
    JSR WAIT_PRESSES_CLEAR? ; Wait presses.
    JSR ENGINE_PALETTE_FADE_OUT ; Fade.
    JSR SETTLE_SPRITES_OFFSCREEN/CLEAR_OBJ_EXTRA_MEMORY ; No sprites.
    LDX #$00
    LDY #$08 ; Seed scroll.
    JSR ENGINE_HELPER_SETTLE_CLEAR_LATCH_SET_SCROLL_TODO_MORE ; Do.
    LDA #$06 ; Add sprites and BG in the leftmost column.
    ORA ENGINE_PPU_MASK_COPY ; Set with copy.
    STA ENGINE_PPU_MASK_COPY ; Store it.
    LDA #$5B
    LDX #$02 ; GFX swap.
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    JSR PPU_READ_INTO_$0110_HELPER_LOOP_UNK ; Read into RAM.
    LDA #$E3
    LDX #$A8
    JSR ENGINE_SET_GFX_BANKS_FPTR_AX ; Set GFX banks PTRS.
    LDA #$DF
    STA SPRITE_PAGE+1 ; Set tile.
    LDA #$00
    STA SPRITE_PAGE+2 ; Clear ATTRS.
    LDX #$40 ; Attr, sprite HFlip.
    LDA WRAM_6785_UNK ; Load ??
    JSR HELPER_SPRITE_0_ATTR ; Do ??
    SBC #$08 ; -= 0x8
    STA SPRITE_PAGE+3 ; As XPos of SPR 0.
    LDX #$80 ; Attr VFlip.
    LDA WRAM_SPECIAL_B? ; Load ??
    JSR HELPER_SPRITE_0_ATTR ; Do ??
    SBC #$21 ; -= 0x21
    STA SPRITE_PAGE[256] ; Store as VPos for SPR0.
    LDA #$E9
    LDX #$A8
    JSR ENGINE_SETTLE_AND_PALETTE_FROM_PTR ; Palette.
    LDA #$00
    STA CONTROL_ACCUMULATED?[2] ; No buttons.
BUTTON_B_NOT_PRESSED: ; 13:0899, 0x026899
    LDX #$08
    JSR ENGINE_DELAY_X_FRAMES ; Delay frames.
    LDA #$DF ; Val ?? 1101.1111
    EOR SPRITE_PAGE+1 ; Invert tile.
    STA SPRITE_PAGE+1 ; Store back.
    BIT CONTROL_ACCUMULATED?[2] ; Test P1 CTRL.
    BVC BUTTON_B_NOT_PRESSED ; Not pressed, goto.
    LDA #$00
    STA CONTROL_ACCUMULATED?[2] ; No buttons pressed now.
    LDA #$F0
    STA SPRITE_PAGE[256] ; Set Ypos way down.
    JSR ENGINE_SETTLE_ALL_UPDATES? ; Settle.
    JSR ENGINE_PALETTE_FADE_OUT_NO_UPLOAD_CURRENT ; Fade out.
    JSR ENGINE_PALETTE_SCRIPT_TO_UPLOADED ; Do palette.
    LDA #$F9 ; Keep all except left column.
    AND ENGINE_PPU_MASK_COPY ; Set from current.
    STA ENGINE_PPU_MASK_COPY ; Store disabled.
    LDA #$7E
    LDX #$04 ; GFX.
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    LDA #$00
    STA SOUND_SAMPLE_FLAG_DONT_RESET_LEVEL ; Clear ??
    JSR SETTLE_SPRITES_OFFSCREEN/CLEAR_OBJ_EXTRA_MEMORY ; Settle clean.
    JMP ENGINE_SETTLE_UPDATES_TODO ; Do.
HELPER_SPRITE_0_ATTR: ; 13:08D4, 0x0268D4
    SEC ; Prep sub.
    BPL RTS ; Positive, goto.
    TAY ; A to Y.
    TXA ; Attr to A.
    ORA SPRITE_PAGE+2 ; Combine attrs.
    STA SPRITE_PAGE+2 ; Update attrs.
    TYA ; A val back.
    SBC #$07 ; -= 0x7
RTS: ; 13:08E2, 0x0268E2
    RTS ; Leave.
    .db 00 ; GFX Banks set.
    .db 78
    .db 58
    .db 59
    .db 5A
    .db 00
    .db 0F ; Palette.
    .db 36
    .db 30
    .db 2A
    .db 0F
    .db 36
    .db 30
    .db 2A
    .db 0F
    .db 36
    .db 30
    .db 16
    .db 0F
    .db 36
    .db 30
    .db 16
    .db 0F
    .db 21
    .db 02
    .db 0A
    .db 0F
    .db 21
    .db 21
    .db 21
    .db 0F
    .db 21
    .db 21
    .db 21
    .db 0F
    .db 21
    .db 21
    .db 21
COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT: ; 13:0909, 0x026909
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do file.
WAIT_PRESSES_SYNC_EXIT: ; 13:090C, 0x02690C
    JSR WAIT_PRESSES_CLEAR? ; Wait clear.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto settle and exit.
SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE: ; 13:0912, 0x026912
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Store ??
    LDA #$00
    STA LIB_BCD/EXTRA_FILE_BCD_B ; Clear upper.
    JSR SCRIPT_HARD_SWITCH_HUGE_FILES_TODO ; Do sub, hard swap unk. TODO.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Move ??
    STA PAIR_UNK_LEVEL_UP_RELATED?[2]
    LDA LIB_BCD/EXTRA_FILE_BCD_B
    STA PAIR_UNK_LEVEL_UP_RELATED?+1
    RTS ; Leave.
SCRIPT_HELPER_SEED_0x3E8_UNK: ; 13:0924, 0x026924
    LDA #$E8
    LDX #$03 ; Seed 0x03E8?
    STA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Seed store.
    STX PAIR_UNK_LEVEL_UP_RELATED?+1
    RTS ; Leave.
SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM: ; 13:092D, 0x02692D
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM writable.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; GFX bank fucked up here.
    LDA #$04
    STA WRAM_6D20_FOR_EFFECT_LOL_RENAME_ME ; Set ??
    CLC ; Prep add.
    LDA GFX_BANKS_EXTENSION[4] ; Load ptr L.
    ADC #$38 ; += 0x38
    STA WRAM_PTR_UNK[2] ; Store to.
    LDA GFX_BANKS_EXTENSION+1 ; Load ptr H.
    ADC #$00 ; Carry add.
    STA WRAM_PTR_UNK+1 ; Store to WRAM.
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Set up.
    LDY #$00 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Store to.
    INY ; Stream++
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Store to.
    LDY #$00 ; Stream reset.
DATA_NE_0x00: ; 13:0957, 0x026957
    LDA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; Load from moved fptr.
    STA WRAM_ARR_GFX_FILE_DATA_ARR_TODO[2],Y ; Store to WRAM. TODO size.
    INY ; Stream++
    CMP #$00 ; If _ #$00
    BNE DATA_NE_0x00 ; !=, do more.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable.
VAR_TO_FPTR_IN_GFX_BANKS_AREA?: ; 13:0964, 0x026964
    LDA PARTY/BATTLE_ID?_TODO ; Load ??
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Ptr from.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Ptr to vars. GFX reused.
    STA GFX_BANKS_EXTENSION[4]
    LDA LIB_BCD/EXTRA_FILE_BCD_B
    STA GFX_BANKS_EXTENSION+1
    RTS ; Leave.
LOAD_FILE[1]_UPPER_NIBBLE_ONLY: ; 13:0972, 0x026972
    LDY #$01 ; Stream index.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    AND #$F0 ; Keep upper.
    RTS ; Leave.
BANKED_DERP: ; 13:0979, 0x026979
    LDA #$00 ; Val ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do ??
    BCS EXIT_RET_CS ; CS, goto.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM writable.
    LDA PTR_CREATE_SEED_UNK ; Load ??
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Store to ptr.
    CLC ; Ret CC.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit disabling wram.
SUB_TODO_WRAM/STATUS_UNK: ; 13:098B, 0x02698B
    JSR SUB_GET_UNK_NEGATIVE_BIT_ONLY ; Do ??
    BNE EXIT_RET_CS ; Set, goto.
SUB_WRAM_UNK_TO_SOLVE: ; 13:0990, 0x026990
    LDA PTR_CREATE_SEED_UNK ; Load ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do ??
    BCS EXIT_RET_CS ; CS, goto.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM write.
    JSR WRAM_HELPER_TOSOLVE ; Do WRAM.
    CLC ; Seed ??
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Do disable exit.
EXIT_RET_CS: ; 13:09A1, 0x0269A1
    SEC ; Seed CS.
    RTS ; Leave.
SUB_SAVE_ID_AND_GFX_AND_RESTORE: ; 13:09A3, 0x0269A3
    LDA PARTY/BATTLE_ID?_TODO ; Save ??
    PHA
    LDA GFX_BANKS_EXTENSION+2 ; Move ??
    STA PARTY/BATTLE_ID?_TODO
    JSR SUB_WRAM_UNK_TO_SOLVE ; Do ??
    PLA ; Restore ??
    STA PARTY/BATTLE_ID?_TODO
    RTS ; Leave.
GFX_FILE_SUB_UNK_PTR_MOD?: ; 13:09B1, 0x0269B1
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM writable.
    SEC ; Prep sub.
    LDY #$16 ; Stream index.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    SBC GFX_BANKS_EXTENSION+3 ; Sub with ??
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store to file.
    INY ; Stream++
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    SBC #$00 ; Carry sub.
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store to file.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Leave.
SUB_STREAM_AND_CMP_UNK: ; 13:09C7, 0x0269C7
    TAY ; A to Y.
    BEQ Y_EQ_0x00 ; == 0, goto.
    TAX ; Val to X.
    LDY #$00 ; Stream reset.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load from stream.
    AND #$3F ; Keep lower.
    TAY ; Val to index.
    TXA ; X to A.
Y_EQ_0x00: ; 13:09D3, 0x0269D3
    CPY #$20 ; If _ #$20
    RTS ; Return compare.
SUB_UNK_TODO_SAVE_AFFECTED_POSSIBLY?: ; 13:09D6, 0x0269D6
    JSR STREAM_MOVE_AND_BANKED_PROPER_TODO ; Get data?
    JSR LIB_GET_FILE_DATA_BIT_TO_SET_UNK ; Do fptr ??
    AND LIB_LUT_BIT_TEST_0x80-0x01,X ; Test bit for index.
    BNE TEST_SET ; Set, goto.
    LDA #$04 ; Seed ??
    JSR LIB_FILE_MOD_TODO ; Do sub.
    LDX #$66 ; Seed ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Create ??
    LDA #$0A
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Play sound smol beep
    LDY #$06 ; Seed file index.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    AND #$7F ; Keep lower.
    STA PTR_CREATE_SEED_UNK ; Store to.
    BNE VAL_NONZERO ; != 0, goto.
    JSR SCRIPT_WRAM_SET_BIT_FILE_DEFINED ; Do set if 0x00.
TEST_SET: ; 13:09FD, 0x0269FD
    LDX #$76 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Sub for setup.
    JMP WAIT_PRESSES_CLEAR? ; Goto wait for exit?
VAL_NONZERO: ; 13:0A05, 0x026A05
    JSR PTR_MOVE_TO_UNK_ARR_WRAM ; Do ??
    LDX #$68 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do it.
    LDX #$00 ; Seed index ??
INDEX_LT_0x4: ; 13:0A0F, 0x026A0F
    JSR LIB_FIND_SLOT_OCCUPIED_AND_BETWEEN_0x1-0x5 ; Find occupied and criteria.
    BCS FAILURE_NOT_FOUND ; CS, goto.
    STA PARTY/BATTLE_ID?_TODO ; Store val to.
    TXA ; Save X index to stack.
    PHA
    JSR BANKED_DERP ; Do.
    PLA ; Rest X.
    TAX
    BCC RET_CC ; Always taken?
FAILURE_NOT_FOUND: ; 13:0A1F, 0x026A1F
    INX ; Index++
    CPX #$04 ; If _ #$04
    BCC INDEX_LT_0x4 ; <, goto.
    LDX #$6E ; File.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do.
    JMP WAIT_PRESSES_CLEAR? ; Goto wait clear.
RET_CC: ; 13:0A2C, 0x026A2C
    JSR SCRIPT_WRAM_SET_BIT_FILE_DEFINED ; Set script.
    JSR SCRIPT_TODO_UNK ; Do ??
    LDX #$6A ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do it.
    LDA #$06 ; Seed sound, good beeps idk, get?
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Play SFX.
    JMP WAIT_PRESSES_CLEAR? ; Goto wait clear.
SCRIPT_WRAM_SET_BIT_FILE_DEFINED: ; 13:0A3F, 0x026A3F
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Writable.
    JSR LIB_GET_FILE_DATA_BIT_TO_SET_UNK ; Get to set.
    ORA LIB_LUT_BIT_TEST_0x80-0x01,X ; Set bit with info from.
    STA CURRENT_SAVE_MANIPULATION_PAGE+544,Y ; Store back to save page.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable and exit.
SUB_DEEPER/RESTORE_HELPER: ; 13:0A4E, 0x026A4E
    LDA PARTY/BATTLE_ID?_TODO ; Move ??
    STA GFX_BANKS_EXTENSION+2
    LDA COUNT_LOOPS?_UNK ; Load.
    CMP #$02 ; If _ #$02
    BCC EXIT_SCRIPT_RET_CC ; <, goto.
    LDA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Save file.
    PHA
    LDA ARG/PTR_L
    PHA
    JSR SUB_COORDS_INIT_AND_LOOP_POSSIBLY_MENU ; Do ??Do sub.
    PLA
    STA ARG/PTR_L ; Restore fptr.
    PLA
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    BCS EXIT_CS_RESTORE_ID? ; CS, goto.
EXIT_SCRIPT_RET_CC: ; 13:0A6A, 0x026A6A
    JSR SCRIPT_TODO_UNK ; Do ??
    CLC ; Ret CC.
    RTS ; Do sub.
EXIT_CS_RESTORE_ID?: ; 13:0A6F, 0x026A6F
    LDA GFX_BANKS_EXTENSION+2 ; Restore.
    STA PARTY/BATTLE_ID?_TODO
    RTS ; Leave.
MASK_DATA_UNK: ; 13:0A74, 0x026A74
    .db 00 ; 0x00 - 0x08 here.
    .db 01
    .db 02
    .db 04
    .db 08
    .db 10
    .db 20
    .db 20
SEED_FILE_PTR_ID_X_TODO: ; 13:0A7C, 0x026A7C
    LDA FILE_PTR_H,X ; Move ptr.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    LDA FILE_PTR_L,X
    STA ARG/PTR_L
    RTS
FILE_PTR_H: ; 13:0A87, 0x026A87
    HIGH(**:$0001) ; NULL
FILE_PTR_L: ; 13:0A88, 0x026A88
    LOW(**:$0001)
    HIGH((null)) ; R6 TODO.
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH(**:$0001) ; NULL.
    LOW(**:$0001)
    HIGH(ALT_REENTRY)
    LOW(ALT_REENTRY)
    HIGH(1E:1B04)
    LOW(1E:1B04)
    HIGH(RTN_SETTLE_UPDATE_TODO)
    LOW(RTN_SETTLE_UPDATE_TODO)
    HIGH(1E:0807)
    LOW(1E:0807)
    HIGH(1E:1007)
    LOW(1E:1007)
    HIGH(1E:0907)
    LOW(1E:0907)
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH(13:0F07)
    LOW(13:0F07)
    HIGH(13:1007)
    LOW(13:1007)
    HIGH(13:1107)
    LOW(13:1107)
    HIGH(13:1207)
    LOW(13:1207)
    HIGH(13:1307)
    LOW(13:1307)
    HIGH(13:1407)
    LOW(13:1407)
    HIGH(13:1507)
    LOW(13:1507)
    HIGH(13:1607)
    LOW(13:1607)
    HIGH(13:1707)
    LOW(13:1707)
    HIGH(13:1807)
    LOW(13:1807)
    HIGH(13:1907)
    LOW(13:1907)
    HIGH(WRITE_ARRAYS_WITH_QUESTION_MARKS)
    LOW(WRITE_ARRAYS_WITH_QUESTION_MARKS)
    HIGH(13:1B07)
    LOW(13:1B07)
    HIGH(13:1C07)
    LOW(13:1C07)
    HIGH(13:1D07)
    LOW(13:1D07)
    HIGH(13:1E07)
    LOW(13:1E07)
    HIGH(13:0707)
    LOW(13:0707)
    HIGH(RTN_Z_FILE_SET_0x62)
    LOW(RTN_Z_FILE_SET_0x62)
    HIGH(13:0507)
    LOW(13:0507)
    HIGH(13:0A07)
    LOW(13:0A07)
    HIGH(13:0907)
    LOW(13:0907)
    HIGH(1E:0107)
    LOW(1E:0107)
    HIGH(13:0607)
    LOW(13:0607)
    HIGH(1E:0307)
    LOW(1E:0307)
    HIGH(1E:0407)
    LOW(1E:0407)
    HIGH(1E:0507)
    LOW(1E:0507)
    HIGH(1E:0607)
    LOW(1E:0607)
    HIGH(13:1F07)
    LOW(13:1F07)
    HIGH(1E:0007)
    LOW(1E:0007)
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH(1E:0B07)
    LOW(1E:0B07)
    HIGH((null))
    LOW((null))
    HIGH(1E:0C07)
    LOW(1E:0C07)
    HIGH(1E:0D07)
    LOW(1E:0D07)
    HIGH(1E:0A07)
    LOW(1E:0A07)
    HIGH(13:0104)
    LOW(13:0104)
    HIGH(1E:0F07)
    LOW(1E:0F07)
    HIGH(1E:0E07)
    LOW(1E:0E07)
    .db 14 ; Phone file. 0x7C
    .db 00
    .db 16 ; 0x7D
    .db 00
    .db 38 ; 0x7E
    .db 03
    .db 18 ; 0x7F
    .db 00
    .db 21 ; 0x80
    .db 00
    .db 1B ; 0x81
    .db 00
STREAM_PROCESS_UNK_INIT: ; 13:0B0F, 0x026B0F
    JSR STREAM_MOVE_AND_BANKED_PROPER_TODO ; Move data?
    LDY #$14 ; Stream index.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load ??
    AND #$0F ; Keep lower.
    TAY ; To Y index.
PROCESS_STREAM_LOOP: ; 13:0B19, 0x026B19
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from ptr.
    BEQ PTR_EQ_0x00 ; == 0, goto.
    JSR SCRIPT_COMMAND_LAUNCHER ; Do command launch.
    JMP PROCESS_STREAM_LOOP ; Loop more.
PTR_EQ_0x00: ; 13:0B23, 0x026B23
    LDA MAIN_FLAG_UNK ; Load ??
    BEQ WAIT_PRESSES_CLEAR? ; == 0, goto.
    JSR LIB_RTN_PTR_CREATION/SHIFT+CLEAR_UNK_MOVE_PTR_DOWN_UNK ; Do.
    LDA #$40
    STA SCRIPT_COMPARE_ENDING_INDEX? ; Set ??
    BNE STREAM_PROCESS_UNK_INIT ; Always taken, loop.
WAIT_PRESSES_CLEAR?: ; 13:0B30, 0x026B30
    LDA ROUTINE_CONTINUE_FLAG? ; Load ??
    BEQ EXIT_FINISHED_RET_CS ; == 0, goto.
    LDA #$00
    STA ROUTINE_CONTINUE_FLAG? ; Clear flag.
    CLC ; Ret CC, continue.
    JMP WAIT_ANY_BUTTONS_PRESSED_RET_PRESSED ; Goto.
EXIT_FINISHED_RET_CS: ; 13:0B3C, 0x026B3C
    SEC ; Ret CS, finished.
    RTS ; Leave.
STREAM_MOVE_AND_BANKED_PROPER_TODO: ; 13:0B3E, 0x026B3E
    JSR SCRIPT_STREAM_MAIN_FPTR_REPLACE ; Do.
EXIT_STREAM_HEADER_AS_R6_DATA?: ; 13:0B41, 0x026B41
    LDY #$01 ; Stream index for value.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load data from file.
    JMP BANK_HANDLER_R6_AND_BASE_FILE? ; Set R6 for routine called, base the bank index.
STREAM_MOVE_BANK_STREAM_READ_UNK: ; 13:0B48, 0x026B48
    JSR STREAM_MOVE_AND_BANKED_PROPER_TODO ; Do.
    LDY #$1C ; Stream index.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load from stream.
    TAY ; To Y index.
    JMP PROCESS_STREAM_LOOP ; Goto.
LIB_STREAM_COMMANDS_PROCESS_UNK: ; 13:0B53, 0x026B53
    JSR LIB_RTN_PTR_CREATION/SHIFT+CLEAR_UNK_MOVE_PTR_DOWN_UNK ; Do ??
    JSR STREAM_MOVE_AND_BANKED_PROPER_TODO ; Do ??
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Y from ??
    JMP PROCESS_STREAM_LOOP ; Goto.
SCRIPT_COMMAND_LAUNCHER: ; 13:0B5E, 0x026B5E
    ASL A ; << 1, *2.
    TAX ; To X index.
    LDA RTN_TBL_H,X ; PTR to stack for RTS Launch.
    PHA
    LDA RTN_TBL_L,X
    PHA
    RTS ; Launch it.
RTN_TBL_L: ; 13:0B69, 0x026B69
    LOW(WAIT_PRESSES_CLEAR?) ; 0x00
RTN_TBL_H: ; 13:0B6A, 0x026B6A
    HIGH(WAIT_PRESSES_CLEAR?) ; Wait for CTRL press, any button. CC continue, CS completed.
    LOW(MAIN_SCRIPT_RESTREAM_SELF) ; 0x01 goto?
    HIGH(MAIN_SCRIPT_RESTREAM_SELF)
    LOW(MAIN_FPTR_GOSUB) ; 0x02
    HIGH(MAIN_FPTR_GOSUB)
    LOW(RETURN_EXTRA_LAYER?) ; 0x03
    HIGH(RETURN_EXTRA_LAYER?) ; Pulls stack 2x, returns.
    LOW(SCRIPT_UNK_A)
    HIGH(SCRIPT_UNK_A)
    LOW(SCRIPT_EXIT_ADVANCE_0x2)
    HIGH(SCRIPT_EXIT_ADVANCE_0x2)
    LOW(SCRIPT_EXIT_ADVANCE_0x2)
    HIGH(SCRIPT_EXIT_ADVANCE_0x2)
    LOW(SELF_LOCKUP_JMP)
    HIGH(SELF_LOCKUP_JMP)
    LOW(SCRIPT_MOVE_FILE_PTR_TODO)
    HIGH(SCRIPT_MOVE_FILE_PTR_TODO)
    LOW(SCRIPT_SEED_UNK)
    HIGH(SCRIPT_SEED_UNK)
    LOW(SCRIPT_WORD_INDEX_COMPARE_TODO)
    HIGH(SCRIPT_WORD_INDEX_COMPARE_TODO)
    LOW(SCRIPT_WORD_INDEX_COMPARE_TODO)
    HIGH(SCRIPT_WORD_INDEX_COMPARE_TODO)
    LOW(STREAM_ADD_AND_SYNC_UNK)
    HIGH(STREAM_ADD_AND_SYNC_UNK)
    LOW(SCRIPT_VALUE_COMPARE_FOR_RESTREAM)
    HIGH(SCRIPT_VALUE_COMPARE_FOR_RESTREAM)
    LOW(SELF_LOCKUP_JMP)
    HIGH(SELF_LOCKUP_JMP)
    LOW(ENGINE_RESET_GAME)
    HIGH(ENGINE_RESET_GAME)
    LOW(WRAM_BIT_SET)
    HIGH(WRAM_BIT_SET)
    LOW(WRAM_BIT_CLEAR)
    HIGH(WRAM_BIT_CLEAR)
    LOW(WRAM_BIT_INVERT)
    HIGH(WRAM_BIT_INVERT)
    LOW(SCRIPT_SAVE_AREA_MOD_WITH_DEC)
    HIGH(SCRIPT_SAVE_AREA_MOD_WITH_DEC)
    LOW(SCRIPT_SAVE_AREA_MOD_WITH_INC)
    HIGH(SCRIPT_SAVE_AREA_MOD_WITH_INC)
    LOW(SCRIPT_SAVE_AREA_MOD_WITH_CLEAR)
    HIGH(SCRIPT_SAVE_AREA_MOD_WITH_CLEAR)
    LOW(SCRIPT_SAVE_AREA_MOD_AFTER_COMPARE_TO_FILE)
    HIGH(SCRIPT_SAVE_AREA_MOD_AFTER_COMPARE_TO_FILE)
    LOW(STREAM_DATA_WORD_TO_WRAM_TOP_0x3F)
    HIGH(STREAM_DATA_WORD_TO_WRAM_TOP_0x3F)
    LOW(SCRIPT_CONTINUE_SAVE_COORDS_AND_OTHER_MENU?)
    HIGH(SCRIPT_CONTINUE_SAVE_COORDS_AND_OTHER_MENU?)
    LOW(SCRIPT_FILE_MAIN_UNK)
    HIGH(SCRIPT_FILE_MAIN_UNK)
    LOW(STREAM_ID_COMPARE_TO_FILE_AND_RESTREAM_MAYBED)
    HIGH(STREAM_ID_COMPARE_TO_FILE_AND_RESTREAM_MAYBED)
    LOW(COMBINE_VALS_AND_RESTREAM_IF_ANY_SET)
    HIGH(COMBINE_VALS_AND_RESTREAM_IF_ANY_SET)
    LOW(STREAM_COORD_AND_MENUS_UNK)
    HIGH(STREAM_COORD_AND_MENUS_UNK)
    LOW(STREAM_TO_LEVEL_UP_MAYBE?)
    HIGH(STREAM_TO_LEVEL_UP_MAYBE?)
    LOW(STREAM_SUB_FROM_FILE_AND_RESTREAM_RESULT)
    HIGH(STREAM_SUB_FROM_FILE_AND_RESTREAM_RESULT)
    LOW(STREAM_COORD_AND_RESTORE)
    HIGH(STREAM_COORD_AND_RESTORE)
    LOW(STREAM_FLAG_SAVE_COORDS_AND_MENU_THINGY)
    HIGH(STREAM_FLAG_SAVE_COORDS_AND_MENU_THINGY)
    LOW(STREAM_FLAG_SAVE_COORDS_AND_DEEPER)
    HIGH(STREAM_FLAG_SAVE_COORDS_AND_DEEPER)
    LOW(STREAM_FLAG_AND_COORDS_AND_MENU_UNK)
    HIGH(STREAM_FLAG_AND_COORDS_AND_MENU_UNK)
    LOW(SCRIPT_STREAMS_AND_LOTS_TODO)
    HIGH(SCRIPT_STREAMS_AND_LOTS_TODO)
    LOW(SCRIPT_STREAMS_AND_END_PTR_UNK)
    HIGH(SCRIPT_STREAMS_AND_END_PTR_UNK)
    LOW(SCRIPT_UNK_AND_TO_NEXT)
    HIGH(SCRIPT_UNK_AND_TO_NEXT)
    LOW(STREAM_TO_NEXT_COMPARE_FILE_RESTREAM)
    HIGH(STREAM_TO_NEXT_COMPARE_FILE_RESTREAM)
    LOW(STREAM_EXTRA_FILE_TODO_SLOTS_AND_WHATNOT)
    HIGH(STREAM_EXTRA_FILE_TODO_SLOTS_AND_WHATNOT)
    LOW(ADD_AND_RESTREAM_ON_OVERFLOW)
    HIGH(ADD_AND_RESTREAM_ON_OVERFLOW)
    LOW(SCRIPT_MOD_RESTREAM_ON_UNDERFLOW)
    HIGH(SCRIPT_MOD_RESTREAM_ON_UNDERFLOW)
    LOW(SCRIPT_EXTRA_MODS_NO_RESTREAM)
    HIGH(SCRIPT_EXTRA_MODS_NO_RESTREAM)
    LOW(SCRIPT_SUB_RESTREAM_OR_SAVE_IT)
    HIGH(SCRIPT_SUB_RESTREAM_OR_SAVE_IT)
    LOW(SCRIPT_GET_FLAG_AND_RESTREAM/DATA_MISC)
    HIGH(SCRIPT_GET_FLAG_AND_RESTREAM/DATA_MISC)
    LOW(SCRIPT_TEST_RESTREAM/SAVE_UNK)
    HIGH(SCRIPT_TEST_RESTREAM/SAVE_UNK)
    LOW(STREAM_RESTREAM/ALT_C)
    HIGH(STREAM_RESTREAM/ALT_C)
    LOW(SCRIPT_SPECIAL_AREA_TODO)
    HIGH(SCRIPT_SPECIAL_AREA_TODO)
    LOW(STREAM_UNK_SPECIAL_RESTREAM/STUFFS)
    HIGH(STREAM_UNK_SPECIAL_RESTREAM/STUFFS)
    LOW(STREAM_MAIN_EXTRA_INDEX_AND_MORE_UNK)
    HIGH(STREAM_MAIN_EXTRA_INDEX_AND_MORE_UNK)
    LOW(STREAM_MODULO_PER_BIT_FROM_FILE_AND_MORE)
    HIGH(STREAM_MODULO_PER_BIT_FROM_FILE_AND_MORE)
    LOW(SCRIPT_UNK_SIMPLER_RESTREAM/CONTINUE)
    HIGH(SCRIPT_UNK_SIMPLER_RESTREAM/CONTINUE)
    LOW(SCRIPT_WORD_INDEX_COMPARE_TODO)
    HIGH(SCRIPT_WORD_INDEX_COMPARE_TODO)
    LOW(SCRIPT_WORD_INDEX_COMPARE_TODO)
    HIGH(SCRIPT_WORD_INDEX_COMPARE_TODO)
    LOW(SCRIPT_HEADER_LOWER_COMPARE_RESTREAM_NE)
    HIGH(SCRIPT_HEADER_LOWER_COMPARE_RESTREAM_NE)
    LOW(SCRIPT_DISPLAY_AND_WAIT_INPUT)
    HIGH(SCRIPT_DISPLAY_AND_WAIT_INPUT)
    LOW(SCRIPT_SLOT_TODO)
    HIGH(SCRIPT_SLOT_TODO)
    LOW(SCRIPT_SMOL_AND_RESTREAM)
    HIGH(SCRIPT_SMOL_AND_RESTREAM)
    LOW(SCRIPT_SLOTS_UNK_TODO)
    HIGH(SCRIPT_SLOTS_UNK_TODO)
    LOW(SCRIPT_UNK_RESERVATION_THINGY?)
    HIGH(SCRIPT_UNK_RESERVATION_THINGY?)
    LOW(SCRIPT_TO_SWITCH_INIT_PORTION)
    HIGH(SCRIPT_TO_SWITCH_INIT_PORTION)
    LOW(SCRIPT_WRAM_FILE_MANIP_AND_DISABLED)
    HIGH(SCRIPT_WRAM_FILE_MANIP_AND_DISABLED)
    LOW(SCRIPT_WRAM_AND_STREAM_MOVES/PTR_UNK)
    HIGH(SCRIPT_WRAM_AND_STREAM_MOVES/PTR_UNK)
    LOW(SCRIPT_MAIN_TO_MAIN_FLAG_UNK)
    HIGH(SCRIPT_MAIN_TO_MAIN_FLAG_UNK)
    LOW(SCRIPT_WORD_INDEX_COMPARE_TODO)
    HIGH(SCRIPT_WORD_INDEX_COMPARE_TODO)
    LOW(SCRIPT_WRAM_AND_SAVES_MOVE_AND_FLAGS_TODO)
    HIGH(SCRIPT_WRAM_AND_SAVES_MOVE_AND_FLAGS_TODO)
    LOW(SCRIPT_MAIN_CONSUME_AND_SAVE_MAP_POS?)
    HIGH(SCRIPT_MAIN_CONSUME_AND_SAVE_MAP_POS?)
    LOW(SCRIPT_FIGURE_ABOVE_THIS_IN_TABLE_SORTA_THE_SAME)
    HIGH(SCRIPT_FIGURE_ABOVE_THIS_IN_TABLE_SORTA_THE_SAME)
    LOW(SCRIPT_MAIN_TO_ENCOUNTER_ID)
    HIGH(SCRIPT_MAIN_TO_ENCOUNTER_ID)
    LOW(SCRIPT_FIND_OCCUPIED_HELPER_XP_TO_ALL_MEMBERS?)
    HIGH(SCRIPT_FIND_OCCUPIED_HELPER_XP_TO_ALL_MEMBERS?)
    LOW(SCRIPT_R1_FILE_THINGY)
    HIGH(SCRIPT_R1_FILE_THINGY)
    LOW(SCRIPT_SEEDY_A)
    HIGH(SCRIPT_SEEDY_A)
    LOW(SCRIPT_SEEDY_B)
    HIGH(SCRIPT_SEEDY_B)
    LOW(SCRIPT_SEEDY_C)
    HIGH(SCRIPT_SEEDY_C)
    LOW(SCRIPT_FLAG_R6_WRAM_FILE_UNK)
    HIGH(SCRIPT_FLAG_R6_WRAM_FILE_UNK)
    LOW(SCRIPT_23_MOD_AND_ATTR_THINGY)
    HIGH(SCRIPT_23_MOD_AND_ATTR_THINGY)
    LOW(SCRIPT_INTO_AND_RESTORE_UNK)
    HIGH(SCRIPT_INTO_AND_RESTORE_UNK)
    LOW(SCRIPT_WRAM_SET_UNK)
    HIGH(SCRIPT_WRAM_SET_UNK)
    LOW(SCRIPT_WRAM_AND_LARGE_FILES_UNK)
    HIGH(SCRIPT_WRAM_AND_LARGE_FILES_UNK)
    LOW(SCRIPT_MAIN_HEADER_CHECKS_UNK)
    HIGH(SCRIPT_MAIN_HEADER_CHECKS_UNK)
    LOW(SCRIPT_FILE_SUB_RESTREAM/CONTINUE_ON_FILE)
    HIGH(SCRIPT_FILE_SUB_RESTREAM/CONTINUE_ON_FILE)
    LOW(SCRIPT_FILES_AND_SEED_UNK_A)
    HIGH(SCRIPT_FILES_AND_SEED_UNK_A)
    LOW(SCRIPT_UNK_HEADER_MASK_WITH_MAIN_RESTREAM)
    HIGH(SCRIPT_UNK_HEADER_MASK_WITH_MAIN_RESTREAM)
    LOW(SCRIPT_WRAM_STREAM_MAIN_AND_EXTRA_MASK_MOVE_AND_ETC)
    HIGH(SCRIPT_WRAM_STREAM_MAIN_AND_EXTRA_MASK_MOVE_AND_ETC)
    LOW(SCRIPT_EXTRA_HEADER_COMPARE_MAIN_RESTREAM)
    HIGH(SCRIPT_EXTRA_HEADER_COMPARE_MAIN_RESTREAM)
    LOW(SCRIPT_DELAY_AND_FADE_OUT_FIGHT_OVER?)
    HIGH(SCRIPT_DELAY_AND_FADE_OUT_FIGHT_OVER?)
    LOW(SCRIPT_SAVE_GAME_FILE)
    HIGH(SCRIPT_SAVE_GAME_FILE)
    LOW(SCRIPT_EXTRA_HEADER_DECIMAL_SHIFT_SAVE_EARLY)
    HIGH(SCRIPT_EXTRA_HEADER_DECIMAL_SHIFT_SAVE_EARLY)
    LOW(SCRIPT_WRAM_MOVE_UNK)
    HIGH(SCRIPT_WRAM_MOVE_UNK)
    LOW(SCRIPT_MAIN_SET_VALS_UNK)
    HIGH(SCRIPT_MAIN_SET_VALS_UNK)
    LOW(SCRIPT_MAIN_NEW_SONG_AND_SET_UNK)
    HIGH(SCRIPT_MAIN_NEW_SONG_AND_SET_UNK)
    LOW(SCRIPT_VAL_TO_SFX_A)
    HIGH(SCRIPT_VAL_TO_SFX_A)
    LOW(SCRIPT_VAL_TO_SFX_B)
    HIGH(SCRIPT_VAL_TO_SFX_B)
    LOW(SCRIPT_VAL_TO_SFX_D)
    HIGH(SCRIPT_VAL_TO_SFX_D)
    LOW(SELF_LOCKUP_JMP) ; Lockup game. lol. Script can trigger copy protect. :o
    HIGH(SELF_LOCKUP_JMP)
    LOW(SCRIPT_WRAM_SET_FLAGS_UNK)
    HIGH(SCRIPT_WRAM_SET_FLAGS_UNK)
    LOW(SCRIPT_FILE_HEADER_SUBS_SELF_AND_RESTREAM_NO_UNDERFLOW)
    HIGH(SCRIPT_FILE_HEADER_SUBS_SELF_AND_RESTREAM_NO_UNDERFLOW)
    LOW(SCRIPT_FILES_AND_SEED_UNK_B)
    HIGH(SCRIPT_FILES_AND_SEED_UNK_B)
    LOW(SCRIPT_WRAM_FILE_DEEP_CLEAR_KEEP_OTHERWISE_DO_UNK)
    HIGH(SCRIPT_WRAM_FILE_DEEP_CLEAR_KEEP_OTHERWISE_DO_UNK)
    LOW(SCRIPT_WRAM_CLEAR_RESTREAM_OTHERWISE_EXTRA)
    HIGH(SCRIPT_WRAM_CLEAR_RESTREAM_OTHERWISE_EXTRA)
    LOW(SCRIPT_COPY_PROTECTION_TEST_B)
    HIGH(SCRIPT_COPY_PROTECTION_TEST_B)
    LOW(SCRIPT_RESTREAM_IF_NOT_EQUAL_OTHERWISE_ARR_MOVE_TODO)
    HIGH(SCRIPT_RESTREAM_IF_NOT_EQUAL_OTHERWISE_ARR_MOVE_TODO)
    LOW(SCRIPT_FLAGS_AND_SAVE_COORDS)
    HIGH(SCRIPT_FLAGS_AND_SAVE_COORDS)
    LOW(SCRIPT_SETTLE_AND_FADE_COMMIT_PALETTE)
    HIGH(SCRIPT_SETTLE_AND_FADE_COMMIT_PALETTE)
    LOW(SCRIPT_COLOR_AND_SFX_AND_DISPLAY_UPDATE_CRIT?)
    HIGH(SCRIPT_COLOR_AND_SFX_AND_DISPLAY_UPDATE_CRIT?)
    LOW(SCRIPT_X_SCROLL_SHAKE_16_FRAMES)
    HIGH(SCRIPT_X_SCROLL_SHAKE_16_FRAMES)
    LOW(SCRIPT_COPY_PROTECTION_TEST_C)
    HIGH(SCRIPT_COPY_PROTECTION_TEST_C)
    LOW(SCRIPT_COPY_PROTECT_CUT_FROM_GAME_UNK) ; Does RTS before it.
    HIGH(SCRIPT_COPY_PROTECT_CUT_FROM_GAME_UNK)
SELF_LOCKUP_JMP: ; 13:0C41, 0x026C41
    JMP SELF_LOCKUP_JMP ; JMP Self?
PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER: ; 13:0C44, 0x026C44
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Store FPTR.
    STX FPTR_PACKET_CREATION/PTR_H_FILE_IDK+1
    JMP ENGINE_CREATE_UPDATE_BUF_INIT_INC? ; Create.
ENGINE_RESET_GAME: ; 13:0C4B, 0x026C4B
    JSR WAIT_PRESSES_CLEAR? ; Do.
    JSR ENGINE_PALETTE_FADE_OUT ; Palette.
    JMP VECTOR_RESET ; Reset the game.
SCRIPT_EXIT_ADVANCE_0x2: ; 13:0C54, 0x026C54
    INY ; Stream += 2
    INY
    RTS ; Leave.
SCRIPT_MAIN_TO_MAIN_FLAG_UNK: ; 13:0C57, 0x026C57
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    CLC ; Prep add.
    ADC #$04 ; Add with.
    STA MAIN_FLAG_UNK ; Store to main.
    INY ; Stream++ to next data.
    RTS ; Leave.
STREAM_ADD_AND_SYNC_UNK: ; 13:0C61, 0x026C61
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load stream.
    CLC ; Prep add.
    ADC #$C0 ; Add with.
    JMP SYNC_UNK ; Goto.
SCRIPT_VALUE_COMPARE_FOR_RESTREAM: ; 13:0C6A, 0x026C6A
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Add with.
SYNC_UNK: ; 13:0C6D, 0x026C6D
    CMP PTR_CREATE_SEED_UNK ; If _ var
    BNE MAIN_SCRIPT_RESTREAM_SELF ; !=, restream.
SCRIPT_WORD_INDEX_COMPARE_TODO: ; 13:0C71, 0x026C71
    TXA ; X to A.
    LSR A ; >> 1, /2.
    CMP SCRIPT_COMPARE_ENDING_INDEX? ; If _ var
    BNE MAIN_SCRIPT_RESTREAM_SELF ; !=, goto.
MAIN_SCRIPT_FILE_CONTINUE_DATA: ; 13:0C77, 0x026C77
    INY ; Stream += 2
    INY
    RTS ; Leave.
OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_CS: ; 13:0C7A, 0x026C7A
    BCS MAIN_SCRIPT_FILE_CONTINUE_DATA ; CS, continue.
    BCC MAIN_SCRIPT_RESTREAM_SELF ; Restream.
OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_CC: ; 13:0C7E, 0x026C7E
    BCC MAIN_SCRIPT_FILE_CONTINUE_DATA ; CC, continue.
    BCS MAIN_SCRIPT_RESTREAM_SELF ; CS, restream.
OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_NE: ; 13:0C82, 0x026C82
    BNE MAIN_SCRIPT_FILE_CONTINUE_DATA ; !=, continue.
    BEQ MAIN_SCRIPT_RESTREAM_SELF ; CS, restream.
OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_EQ: ; 13:0C86, 0x026C86
    BEQ MAIN_SCRIPT_FILE_CONTINUE_DATA ; ==, continue. Restream !=
MAIN_SCRIPT_RESTREAM_SELF: ; 13:0C88, 0x026C88
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    TAY ; As new stream index for ourselves.
    RTS
MAIN_FPTR_GOSUB: ; 13:0C8D, 0x026C8D
    LDA SCRIPT_MAIN_FPTR[2] ; Save FPTR to stack.
    PHA
    LDA SCRIPT_MAIN_FPTR+1
    PHA
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load FPTR from file to stack.
    PHA
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    PHA
    INY ; Stream ++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    STA SCRIPT_MAIN_FILE_STREAM_INDEX ; Store as index, replaced file.
    INY
    PLA
    STA SCRIPT_MAIN_FPTR+1 ; Rewrite FPTR from stack.
    PLA
    STA SCRIPT_MAIN_FPTR[2]
    TYA ; Save index of saved to stack.
    PHA
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load index for new file.
    JSR PROCESS_STREAM_LOOP ; Process it.
    PLA ; Restore original file from.
    TAY
    PLA
    STA SCRIPT_MAIN_FPTR+1
    PLA
    STA SCRIPT_MAIN_FPTR[2]
    RTS ; Leave.
RETURN_EXTRA_LAYER?: ; 13:0CB7, 0x026CB7
    PLA ; Pull off stack 2x.
    PLA
    RTS ; Leave.
SCRIPT_UNK_A: ; 13:0CBA, 0x026CBA
    LDA CURRENT_SAVE_MANIPULATION_PAGE+4 ; Load ??
    AND #$3F ; Keep lower.
    CMP #$24 ; If _ #$24
    BCC EXIT_STREAM_DELAY_FRAMES ; <, goto.
    CMP #$2C ; If _ #$2C
    BCS EXIT_STREAM_DELAY_FRAMES ; >=, goto.
    JSR ENGINE_PALETTE_COMMIT_TO_SCRIPT ; Do palette to target.
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    STA NMI_GFX_COUNTER ; Store as GFX counter.
    INY ; Stream++
COUNTER_NONZERO: ; 13:0CD0, 0x026CD0
    LSR A ; >> 3, /8.
    LSR A
    LSR A
    AND #$07 ; Keep lower.
    TAX ; To X index.
    LDA BG_COLOR_CHANGE_ARR,X ; Load from arr.
    STA ENGINE_COMMIT_PALETTE+1 ; To 0x1 color of each BG.
    STA ENGINE_COMMIT_PALETTE+5
    STA ENGINE_COMMIT_PALETTE+9
    STA ENGINE_COMMIT_PALETTE+13
    JSR CREATE_PALETTE_UPLOAD_PACKET_0x1_WAIT ; Do wait.
    LDA NMI_GFX_COUNTER ; Load.
    BNE COUNTER_NONZERO ; != 0, goto.
    LDA SCRIPT_R6_UNK/R2_GFX_BANK_UNK ; Load var
    LDX #$02 ; Seed to R2.
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A ; Bank it in.
    LDA SCRIPT_R7_UNK ; Load var as R3.
    LDX #$03 ; Seed to R3.
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A ; Bank it.
    JMP ENGINE_PALETTE_UPLOAD_WITH_PACKET_HELPER ; Help packet palette update queue.
BG_COLOR_CHANGE_ARR: ; 13:0CFD, 0x026CFD
    .db 21
    .db 22
    .db 23
    .db 24
    .db 25
    .db 24
    .db 23
    .db 22
EXIT_STREAM_DELAY_FRAMES: ; 13:0D05, 0x026D05
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load file.
    TAX ; To X index.
    INY ; Stream++
    JMP ENGINE_DELAY_X_FRAMES ; Delay.
SCRIPT_MOVE_FILE_PTR_TODO: ; 13:0D0D, 0x026D0D
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move ptr.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move L.
    STA ARG/PTR_L
    INY ; Stream++
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Save index.
SCRIPT_USE_ENTRY_TODO_UNK: ; 13:0D1A, 0x026D1A
    LDA ROUTINE_CONTINUE_FLAG? ; Load ??
    BNE VAL_NONZERO ; != 0, goto.
    JSR PACKETY_HELPER_SAVE_AND_RESTORE_CREATION ; Do ??
VAL_NONZERO: ; 13:0D21, 0x026D21
    LDA #$08 ; Val ??
    CMP ROUTINE_CONTINUE_FLAG? ; If _ #$2C
    BEQ VAL_EQ_FLAG_PORTION ; ==, goto.
SCRIPT_HELPER_STORE_CONTINUE_FLAG_UNK_TODO: ; 13:0D27, 0x026D27
    STA ROUTINE_CONTINUE_FLAG? ; Store diff.
EXIT_UNK: ; 13:0D29, 0x026D29
    LDY GFX_COORD_VERTICAL_OFFSET ; Load coord.
    CPY #$1B ; If _ #$1B
    BCC VAL_LT_0x1B ; <, goto.
    JSR GFX_COORD_ADJUSTMENT_TODO ; Do adjust.
    DEC R_**:$002D ; -- TODO.
    BMI VAL_NEGATIVE ; Negative, goto.
VAL_LT_0x1B: ; 13:0D36, 0x026D36
    LDA R_**:$002D ; Load ??
    BNE VAL_NONZERO ; Nonzero, goto.
    LDY GFX_COORD_VERTICAL_OFFSET ; Load ??
    CPY #$19 ; If _ #$19
    BCS VAL_NEGATIVE ; >=, goto.
VAL_NONZERO: ; 13:0D40, 0x026D40
    JSR LIB_READING_PPU_ROM_$0110_HELPER ; Load from PPU.
    LDA #$16 ; Seed ??
    STA R_**:$0070 ; Set ??
    LDA #$00
    STA ENGINE_PACKINATOR_ARG_SEED_BLANK_PRE_COUNT ; Clear count.
    JSR RTN_SETTLE_UPDATE_TODO ; Settle updates.
    JSR LIB_SUB_HELPER_MOVE_CMD_TO_DEEPER ; Mod packets.
    CMP #$00 ; If _ #$00
    BEQ VAL_EQ_0x00 ; == 0, goto.
    LDY #$00 ; Stream index.
    LDA [FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]],Y ; Load from file.
    CMP #$03 ; If _ #$03
    BEQ VAL_EQ_0x3 ; ==, goto.
    CMP #$00 ; If _ #$00
    BNE EXIT_UNK ; !=, goto.
VAL_EQ_0x00: ; 13:0D61, 0x026D61
    JSR EXIT_STREAM_HEADER_AS_R6_DATA? ; Do routine.
    LDA #$00
    STA R_**:$0070 ; Clear ??
    STA ENGINE_PACKINATOR_ARG_SEED_BLANK_PRE_COUNT ; Clear ??
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load index.
SUB_HELPER_UNK_TODO_COORD: ; 13:0D6C, 0x026D6C
    SEC ; Prep sub.
    LDA GFX_COORD_VERTICAL_OFFSET ; Load ??
    SBC #$13 ; Sub with.
    LSR A ; >> 1, /2.
    STA R_**:$002D ; Store to.
    RTS ; Leave.
VAL_EQ_0x3: ; 13:0D75, 0x026D75
    INC FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; ++
    BNE VAL_EQ_FLAG_PORTION ; != 0, goto.
    INC ARG/PTR_L ; ++
VAL_EQ_FLAG_PORTION: ; 13:0D7B, 0x026D7B
    LDY GFX_COORD_VERTICAL_OFFSET ; Load ??
    CPY #$1B ; If _ #$1B
    BCC VAL_NEGATIVE ; <, goto.
    JSR GFX_COORD_ADJUSTMENT_TODO ; Do ??
VAL_NEGATIVE: ; 13:0D84, 0x026D84
    JSR SUB_HELPER_UNK_TODO_COORD ; Do ??
    LDA #$91 ; Seed menu.
    LDX #$AD
    JSR MENU_HELPER_UNK_TODO ; Do menu ??
    JMP VAL_NONZERO ; Goto.
    .db 01
    .db 01
    .db 00
    .db 00
    .db C0
    .db 3B
    .db 12
GFX_COORD_ADJUSTMENT_TODO: ; 13:0D98, 0x026D98
    LDX #$04 ; Seed ??
    JSR SUB_ADDRESSES_UNK_ENTRY_ADD ; Do ??
    DEC GFX_COORD_VERTICAL_OFFSET ; --
    DEC GFX_COORD_VERTICAL_OFFSET
    RTS ; Leave.
SCRIPT_SEED_UNK: ; 13:0DA2, 0x026DA2
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream.
    JSR SEED_TODO_SOLVE ; Do.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load stream.
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load selected?
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_EQ ; Goto.
SEED_TODO_SOLVE: ; 13:0DAE, 0x026DAE
    LDA #$DF ; Seed ??
    LDX #$AD
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Store FPTR.
    STX ARG/PTR_L
    LDA #$09 ; Seed ??
    JSR SCRIPT_HELPER_STORE_CONTINUE_FLAG_UNK_TODO ; Do ??
    LDA #$EC ; Seed menu.
    LDX #$AD
    BNE MENU_HELPER_UNK_TODO ; Inject it.
STREAMS_MULTIMENUS_UNK: ; 13:0DC1, 0x026DC1
    LDA #$F3 ; Seed FPTR 13:0DF3
    LDX #$AD
MENU_HELPER_UNK_TODO: ; 13:0DC5, 0x026DC5
    STA FPTR_MENU_PRIMARY[2] ; Store FPTR for menu.
    STX FPTR_MENU_PRIMARY+1
    LDY #$06 ; Stream index into,
    LDA [FPTR_MENU_PRIMARY[2]],Y ; Load from FPTR for menu.
    STA GFX_COORD_HORIZONTAL_OFFSET ; Store to, HCoord.
    LDA #$D1 ; Seed FPTR submenu 1F:10D1, LUT.
    LDX #$F0
    STA FPTR_MENU_SECONDARY/SUBMENU[2] ; Store submenu.
    STX FPTR_MENU_SECONDARY/SUBMENU+1
    JSR MENU_FILE_MAKE_ROW_OFFSET? ; Menu.
    LDA #$08
    STA GFX_COORD_HORIZONTAL_OFFSET ; Set coord H.
    RTS ; Leave.
    .db A0
    .db A0
    .db A0
    .db A0
    .db D9
    .db E5
    .db F3
    .db A0
    .db A0
    .db CE
    .db EF
    .db A0
    .db 00
    .db 02
    .db 01
    .db 05
    .db 00
    .db 80
    .db 3A
    .db 0B
    .db 02 ; File.
    .db 01
    .db 09
    .db 00
    .db C0
    .db 3A
    .db 09
SCRIPT_DISPLAY_AND_WAIT_INPUT: ; 13:0DFA, 0x026DFA
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move FPTR H.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move FPTR L.
    STA ARG/PTR_L
    INY ; Stream++
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Save index.
    LDA #$37
    JSR SCRIPT_HELPER_STORE_CONTINUE_FLAG_UNK_TODO ; Do ??
    JSR STREAMS_MULTIMENUS_UNK ; Do ??
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load index.
    BIT SCRIPT_MENU_STATUS ; Test status.
    BVS 0x40_SET ; If B set, goto.
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    BNE EXIT_RESTREAM_FROM_STREAM ; != 0, restream.
    INY ; Stream += 2, continue.
    INY
    RTS ; Leave.
EXIT_RESTREAM_FROM_STREAM: ; 13:0E1C, 0x026E1C
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    TAY ; Store as stream pos.
    RTS ; Leave.
0x40_SET: ; 13:0E20, 0x026E20
    JMP MAIN_SCRIPT_RESTREAM_SELF ; Goto.
WRAM_BIT_SET: ; 13:0E23, 0x026E23
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM writes.
    JSR MAIN_STREAM_INC_AND_BYTE_AS_ADD_FOR_WRAM_DATA ; Do ??
    ORA LIB_LUT_BIT_TEST_0x80-0x01,X ; Set bit.
    STA CURRENT_SAVE_MANIPULATION_PAGE+512,Y ; Store to WRAM.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    INY ; ++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit.
WRAM_BIT_CLEAR: ; 13:0E35, 0x026E35
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Enable WRAM.
    JSR MAIN_STREAM_INC_AND_BYTE_AS_ADD_FOR_WRAM_DATA ; Stream WRAM load.
    ORA LIB_LUT_BIT_TEST_0x80-0x01,X ; Set value.
    EOR LIB_LUT_BIT_TEST_0x80-0x01,X ; Invert it to clear.
    STA CURRENT_SAVE_MANIPULATION_PAGE+512,Y ; Store it back.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Goto.
WRAM_BIT_INVERT: ; 13:0E4A, 0x026E4A
    JSR MAIN_STREAM_INC_AND_BYTE_AS_ADD_FOR_WRAM_DATA ; Do inc and get data.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index load.
    AND LIB_LUT_BIT_TEST_0x80-0x01,X ; Keep only bit.
    EOR LIB_LUT_BIT_TEST_0x80-0x01,X ; Literally invert it.
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_EQ ; Goto.
MAIN_STREAM_INC_AND_BYTE_AS_ADD_FOR_WRAM_DATA: ; 13:0E58, 0x026E58
    INY
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream pos.
    JMP SCRIPT_LOWER_TO_INDEX_AND_UPPER_AS_SAVE_INDEX_TO_RET ; Goto.
SCRIPT_SAVE_AREA_MOD_WITH_INC: ; 13:0E5E, 0x026E5E
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load file.
    TAX ; To X index.
    INY ; Stream++
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM enable.
    INC CURRENT_SAVE_MANIPULATION_PAGE+608,X ; Inc the var.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Goto.
SCRIPT_SAVE_AREA_MOD_WITH_DEC: ; 13:0E6C, 0x026E6C
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    TAX ; To X index.
    INY ; Stream++
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM enable.
    DEC CURRENT_SAVE_MANIPULATION_PAGE+608,X ; Dec value.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Goto.
SCRIPT_SAVE_AREA_MOD_WITH_CLEAR: ; 13:0E7A, 0x026E7A
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    TAX ; To X index.
    INY ; Stream++
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM write.
    LDA #$00 ; Clear val.
    STA CURRENT_SAVE_MANIPULATION_PAGE+608,X ; Clear it.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Goto.
SCRIPT_SAVE_AREA_MOD_AFTER_COMPARE_TO_FILE: ; 13:0E8A, 0x026E8A
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    TAX ; To X index.
    INY ; Stream++
    LDA CURRENT_SAVE_MANIPULATION_PAGE+608,X ; Load from save area.
    CMP [SCRIPT_MAIN_FPTR[2]],Y ; Compare to file.
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_CS ; Goto option.
SCRIPT_FILE_MAIN_UNK: ; 13:0E97, 0x026E97
    JSR SCRIPT_MAIN_FILE_TO_ID?_TODO ; Do ?
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load index.
    INY ; Stream++
    RTS ; Leave.
STREAM_TO_LEVEL_UP_MAYBE?: ; 13:0E9E, 0x026E9E
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move ?? EXP needed?
    STA PAIR_UNK_LEVEL_UP_RELATED?[2]
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move ??
    STA PAIR_UNK_LEVEL_UP_RELATED?+1
    INY ; Stream++
    RTS ; Leave.
SCRIPT_WRAM_MOVE_UNK: ; 13:0EAA, 0x026EAA
    LDA CURRENT_SAVE_MANIPULATION_PAGE+16 ; Move WRAM ??
    STA PAIR_UNK_LEVEL_UP_RELATED?[2]
    LDA CURRENT_SAVE_MANIPULATION_PAGE+17
    STA PAIR_UNK_LEVEL_UP_RELATED?+1
    INY ; Stream++
    RTS ; Leave.
SCRIPT_UNK_AND_TO_NEXT: ; 13:0EB6, 0x026EB6
    JSR STREAMS_A_FEW_OPTIONS_TODO ; Do.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load stream.
    INY ; ++
    RTS ; Leave.
STREAM_ID_COMPARE_TO_FILE_AND_RESTREAM_MAYBED: ; 13:0EBD, 0x026EBD
    INY ; Stream++
    LDA PARTY/BATTLE_ID?_TODO ; Load ??
    CMP [SCRIPT_MAIN_FPTR[2]],Y ; If _ file
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_EQ ; Goto. Restream on eq/ne.
STREAM_SUB_FROM_FILE_AND_RESTREAM_RESULT: ; 13:0EC5, 0x026EC5
    SEC ; Prep sub.
    INY ; Stream++
    LDA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Load ??
    SBC [SCRIPT_MAIN_FPTR[2]],Y ; Sub from main.
    INY ; Stream++
    LDA PAIR_UNK_LEVEL_UP_RELATED?+1 ; Load other.
    SBC [SCRIPT_MAIN_FPTR[2]],Y ; Sub with.
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_CS ; Goto. No underflow, no restream.
STREAM_TO_NEXT_COMPARE_FILE_RESTREAM: ; 13:0ED3, 0x026ED3
    INY ; Stream++
    LDA PTR_CREATE_SEED_UNK ; Load ??
    CMP [SCRIPT_MAIN_FPTR[2]],Y ; If _ file
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_EQ ; Goto, exit handle.
ADD_AND_RESTREAM_ON_OVERFLOW: ; 13:0EDB, 0x026EDB
    CLC ; Prep add.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+16 ; Load ??
    ADC PAIR_UNK_LEVEL_UP_RELATED?[2] ; Add with.
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Store to.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+17 ; Load ??
    ADC PAIR_UNK_LEVEL_UP_RELATED?+1 ; Add with.
    STA LIB_BCD/EXTRA_FILE_BCD_B ; Store to.
    BCS EXIT_MAIN_SCRIPT_RESTREAM ; Overflow, goto, restream.
    BCC ADD_GOOD ; No overflow, goto.
SCRIPT_MOD_RESTREAM_ON_UNDERFLOW: ; 13:0EEE, 0x026EEE
    SEC ; Prep sub.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+16 ; Load.
    SBC PAIR_UNK_LEVEL_UP_RELATED?[2] ; Sub with.
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Store to.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+17 ; Load.
    SBC PAIR_UNK_LEVEL_UP_RELATED?+1 ; Sub with.
    STA LIB_BCD/EXTRA_FILE_BCD_B ; Store to.
    BCC EXIT_MAIN_SCRIPT_RESTREAM ; Underflow, goto.
ADD_GOOD: ; 13:0EFF, 0x026EFF
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Move fptr.
    STA CURRENT_SAVE_MANIPULATION_PAGE+16
    LDA LIB_BCD/EXTRA_FILE_BCD_B
    STA CURRENT_SAVE_MANIPULATION_PAGE+17
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; No WRAM.
    INY ; Stream += 2
    INY
    RTS ; Leave.
EXIT_MAIN_SCRIPT_RESTREAM: ; 13:0F12, 0x026F12
    JMP MAIN_SCRIPT_RESTREAM_SELF ; Goto, restream.
SCRIPT_EXTRA_MODS_NO_RESTREAM: ; 13:0F15, 0x026F15
    CLC ; Prep add.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+18 ; Load.
    ADC PAIR_UNK_LEVEL_UP_RELATED?[2] ; Add with.
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Store to.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+19 ; Load.
    ADC PAIR_UNK_LEVEL_UP_RELATED?+1 ; Add with.
    STA LIB_BCD/EXTRA_FILE_BCD_B ; Store to.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+20 ; Load.
    ADC #$00 ; Carry add.
    STA LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Store to.
    BCS EXIT_MAIN_SCRIPT_RESTREAM ; Overflow, goto.
    BCC ADD_NO_OVERFLOW ; No overflow, goto.
SCRIPT_SUB_RESTREAM_OR_SAVE_IT: ; 13:0F2F, 0x026F2F
    SEC ; Prep sub.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+18 ; Load ??
    SBC PAIR_UNK_LEVEL_UP_RELATED?[2] ; Sub with.
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Store to.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+19 ; Load ??
    SBC PAIR_UNK_LEVEL_UP_RELATED?+1 ; Sub with.
    STA LIB_BCD/EXTRA_FILE_BCD_B ; Store to.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+20 ; Load ??
    SBC #$00 ; Carry sub.
    STA LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Store to.
    BCC EXIT_MAIN_SCRIPT_RESTREAM ; Underflow, exit restream.
ADD_NO_OVERFLOW: ; 13:0F47, 0x026F47
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Move result ??
    STA CURRENT_SAVE_MANIPULATION_PAGE+18
    LDA LIB_BCD/EXTRA_FILE_BCD_B
    STA CURRENT_SAVE_MANIPULATION_PAGE+19
    LDA LIB_BCD2/EXTRA_FILE_STREAM_INDEX
    STA CURRENT_SAVE_MANIPULATION_PAGE+20
    INY ; Stream += 2
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit disable.
STREAM_MODULO_PER_BIT_FROM_FILE_AND_MORE: ; 13:0F5E, 0x026F5E
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move ??
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Save index.
    LDA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Move ??
    STA LIB_BCD/EXTRA_FILE_BCD_A
    LDA PAIR_UNK_LEVEL_UP_RELATED?+1
    STA LIB_BCD/EXTRA_FILE_BCD_B
    JSR LIB_MATH_16BIT_MULTIPLY? ; Do lib with file mod per bit.
    LDA #$64
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Set mod PTR.
    JSR ENGINE_MATH_24BIT_DIVIDE? ; Do.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load stream index.
    INY ; Stream++
    LDA LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Load ??
    BNE SEED_UNK_LEVEL_UP_RELATED ; != 0, goto.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Move ??
    STA PAIR_UNK_LEVEL_UP_RELATED?[2]
    LDA LIB_BCD/EXTRA_FILE_BCD_B
    STA PAIR_UNK_LEVEL_UP_RELATED?+1
    RTS ; Leave.
SEED_UNK_LEVEL_UP_RELATED: ; 13:0F87, 0x026F87
    LDA #$FF ; Seed ??
    STA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Set ??
    STA PAIR_UNK_LEVEL_UP_RELATED?+1
    RTS ; Leave.
STREAM_EXTRA_FILE_TODO_SLOTS_AND_WHATNOT: ; 13:0F8E, 0x026F8E
    JSR STREAMS_A_FEW_OPTIONS_TODO ; Do ??
    LDX #$00 ; Seed ID checking?
VAL_LT_0x4: ; 13:0F93, 0x026F93
    JSR LIB_FIND_SLOT_OCCUPIED_AND_BETWEEN_0x1-0x5 ; Get slot.
    BCS SLOT_FAIL ; Fail, goto.
    STA PARTY/BATTLE_ID?_TODO ; Store slot val.
    TXA ; Save X.
    PHA
    LDA PTR_CREATE_SEED_UNK ; Do PTR.
    JSR TEST_FOR_VAL_EQ_PASSED ; Test ??
    PLA ; Restore X.
    TAX
    BCC EXIT_RETURN_MAIN_STREAM_PLUS_TWO ; TODO cc?
SLOT_FAIL: ; 13:0FA5, 0x026FA5
    INX ; Slot++
    CPX #$04 ; If _ #$04
    BCC VAL_LT_0x4 ; <<, loop.
    BCS EXIT_STREAM_RESTREAM_SELF ; Always taken.
SCRIPT_STREAMS_AND_LOTS_TODO: ; 13:0FAC, 0x026FAC
    JSR STREAMS_A_FEW_OPTIONS_TODO ; Do ??
    LDA PTR_CREATE_SEED_UNK ; Load ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Test ??
    BCC EXIT_RETURN_MAIN_STREAM_PLUS_TWO ; CC, goto exit continue.
    BCS EXIT_STREAM_RESTREAM_SELF ; Restream self.
SCRIPT_STREAMS_AND_END_PTR_UNK: ; 13:0FB8, 0x026FB8
    JSR STREAMS_A_FEW_OPTIONS_TODO ; Do options.
    LDA PTR_CREATE_SEED_UNK ; Load ??
    JSR STREAM_SEED_SETUP_76B0 ; Setup ptr.
    BCS EXIT_STREAM_RESTREAM_SELF ; CS, restream self.
    BCC EXIT_RETURN_MAIN_STREAM_PLUS_TWO ; CC, continue.
STREAMS_A_FEW_OPTIONS_TODO: ; 13:0FC4, 0x026FC4
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move file ??
    STA PTR_CREATE_SEED_UNK
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
    JSR PTR_AND_BANK_R6_UNK ; Do for loaded.
    JMP PTR_MOVE_TO_UNK_ARR_WRAM ; Goto.
SCRIPT_TEST_RESTREAM/SAVE_UNK: ; 13:0FD1, 0x026FD1
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream save.
    LDA #$00 ; Load ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do ??
    BCS EXIT_STREAM_RESTREAM_SELF ; CS, goto.
    BCC EXIT_ALT_SEED_ID_SAVED ; Other, always taken.
SCRIPT_GET_FLAG_AND_RESTREAM/DATA_MISC: ; 13:0FDC, 0x026FDC
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    JSR SUB_GET_UNK_NEGATIVE_BIT_ONLY ; Get ??
    PHP ; Save status.
    JSR EXIT_STREAM_HEADER_AS_R6_DATA? ; Do other sub.
    PLP ; Pull status.
    BNE EXIT_STREAM_RESTREAM_SELF ; !=, goto.
    BEQ ALT_EXIT_B ; Other, always taken.
STREAM_RESTREAM/ALT_C: ; 13:0FEA, 0x026FEA
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
ALT_EXIT_B: ; 13:0FEC, 0x026FEC
    LDA PTR_CREATE_SEED_UNK ; Seed.
    JSR TEST_FOR_VAL_EQ_PASSED ; Do.
    BCS EXIT_STREAM_RESTREAM_SELF ; Ret CS, goto.
    BCC EXIT_ALT_C ; CC, goto.
SCRIPT_SPECIAL_AREA_TODO: ; 13:0FF5, 0x026FF5
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
    LDA #$00 ; Seed ??
    JSR STREAM_SEED_SETUP_76B0 ; Goto.
    BCS EXIT_STREAM_RESTREAM_SELF ; CS, restream. Failed.
EXIT_ALT_SEED_ID_SAVED: ; 13:0FFE, 0x026FFE
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM enable.
    LDA PTR_CREATE_SEED_UNK ; Move to file ??
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load index.
    INY ; += 2.
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit disable.
STREAM_UNK_SPECIAL_RESTREAM/STUFFS: ; 13:100C, 0x02700C
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    LDA PTR_CREATE_SEED_UNK ; Load seed.
    JSR STREAM_SEED_SETUP_76B0 ; Setup ptr.
    BCS EXIT_STREAM_RESTREAM_SELF ; CS, goto. Restream self.
EXIT_ALT_C: ; 13:1015, 0x027015
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM enable.
    JSR WRAM_HELPER_TOSOLVE ; Do.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit disable.
EXIT_RETURN_MAIN_STREAM_PLUS_TWO: ; 13:101E, 0x02701E
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load main index.
    INY ; Return += 2
    INY
    RTS ; Leave.
EXIT_STREAM_RESTREAM_SELF: ; 13:1023, 0x027023
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load stream.
    JMP MAIN_SCRIPT_RESTREAM_SELF ; Exit restream.
SCRIPT_UNK_SIMPLER_RESTREAM/CONTINUE: ; 13:1028, 0x027028
    JSR SCRIPT_MAIN_FILE_TO_ID?_TODO ; Seed ??
    JSR FIND_ID_IN_BATTLE? ; Do.
    BCC EXIT_RETURN_MAIN_STREAM_PLUS_TWO ; CC,, goto.
    BCS EXIT_STREAM_RESTREAM_SELF ; CS, goto, always taken. Loop.
SCRIPT_MAIN_FILE_TO_ID?_TODO: ; 13:1032, 0x027032
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move ??
    STA PARTY/BATTLE_ID?_TODO
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
    JMP SCRIPT_TODO_UNK ; Goto.
STREAM_MAIN_EXTRA_INDEX_AND_MORE_UNK: ; 13:103C, 0x02703C
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load ??
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    PHA ; Save load.
    LDA PARTY/BATTLE_ID?_TODO ; Load.
    JSR PTR_AND_ADVANCE_TODO ; Advance ??
    PLA ; Pull script val.
    TAY ; To stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load stream ??
    BEQ EXIT_STREAM_RESTREAM_SELF ; == 0, goto.
    STA PTR_CREATE_SEED_UNK ; Store nonzero.
    JSR PTR_AND_BANK_R6_UNK ; Do ??
    JSR PTR_MOVE_TO_UNK_ARR_WRAM ; Make ptr and ??
    JMP EXIT_RETURN_MAIN_STREAM_PLUS_TWO ; Exit+++
TEST_FOR_VAL_EQ_PASSED: ; 13:1058, 0x027058
    PHA ; Save val. TODO TODO TODO
    LDA PARTY/BATTLE_ID?_TODO ; Load ??
    JSR PTR_AND_ADVANCE_TODO ; Do ??
    PLA ; Pull val passed.
    LDY #$08 ; Seed target.
    BNE SEEDED_ENTRY ; Always taken.
STREAM_SEED_SETUP_76B0: ; 13:1063, 0x027063
    JSR PTR_VERY_MANUAL_HELPER_76B0 ; Set PTR.
    LDY #$50 ; Seed target.
SEEDED_ENTRY: ; 13:1068, 0x027068
    STY SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Y to.
    LDY #$00 ; Reset stream index.
LT_TARGET: ; 13:106C, 0x02706C
    CMP [LIB_BCD/EXTRA_FILE_BCD_A],Y ; If A _ stream
    BEQ EXIT_RET_CC ; ==, goto.
    INY ; Stream++
    CPY SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; If _ target
    BCC LT_TARGET ; <, goto.
    RTS ; Return CS, failed.
EXIT_RET_CC: ; 13:1076, 0x027076
    CLC ; Passed, ret CC.
    RTS ; Leave.
STREAM_MOVE_DOWN_IN_FILE_STREAM_UNK: ; 13:1078, 0x027078
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from stream.
    DEY ; Stream--
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Store to prev.
    INY ; Stream++
WRAM_HELPER_TOSOLVE: ; 13:107E, 0x02707E
    INY ; Stream++
    CPY SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; If _ var
    BCC STREAM_MOVE_DOWN_IN_FILE_STREAM_UNK ; <, goto, move down.
    LDA #$00 ; Seed ??
    DEY ; Stream--
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Clear ??
    RTS ; Leave.
PTR_AND_ADVANCE_TODO: ; 13:1089, 0x027089
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Create ptr.
    CLC ; Prep add.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Load ??
    ADC #$20 ; += 0x20
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Store result.
    LDA LIB_BCD/EXTRA_FILE_BCD_B ; Carry into.
    ADC #$00
    STA LIB_BCD/EXTRA_FILE_BCD_B ; Store result.
    RTS ; Leave.
PTR_VERY_MANUAL_HELPER_76B0: ; 13:109A, 0x02709A
    LDX #$B0
    STX LIB_BCD/EXTRA_FILE_BCD_A
    LDX #$76
    STX LIB_BCD/EXTRA_FILE_BCD_B
    RTS
SUB_GET_UNK_NEGATIVE_BIT_ONLY: ; 13:10A3, 0x0270A3
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Do sub.
    LDY #$02 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load ??
    AND #$80 ; Keep upper only.
    RTS ; Leave.
SCRIPT_CONTINUE_SAVE_COORDS_AND_OTHER_MENU?: ; 13:10AD, 0x0270AD
    LDA #$18
    STA ROUTINE_CONTINUE_FLAG? ; Set ??
    LDA GFX_COORD_HORIZONTAL_OFFSET ; Save coords.
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
    JSR SUB_COORDS_INIT_AND_LOOP_POSSIBLY_MENU ; Do sub.
    PLA
    STA GFX_COORD_VERTICAL_OFFSET ; Restore coords from stack.
    PLA
    STA GFX_COORD_HORIZONTAL_OFFSET
    BCS EXIT_RESTORE_AND_RESTREAM ; CS, goto.
EXIT_SCRIPT_UNK_AND_RESTREAM_CONTINUE/WORD_SKIP: ; 13:10C4, 0x0270C4
    JSR SCRIPT_TODO_UNK ; Do ??
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load index.
    INY ; += 2
    INY
    RTS ; Leave.
EXIT_RESTORE_AND_RESTREAM: ; 13:10CC, 0x0270CC
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load index.
    JMP MAIN_SCRIPT_RESTREAM_SELF ; Restream.
SCRIPT_SLOTS_UNK_TODO: ; 13:10D1, 0x0270D1
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move stream index.
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Save stream index.
    TAX ; Val to X.
    CPX #$04 ; If _ #$04
    BCS EXIT_RESTORE_AND_RESTREAM ; >=, leave restream.
    LDA WRAM_ARR_PARTY_CHARACTER_IDS?[6],X ; Load save page.
    BEQ EXIT_RESTORE_AND_RESTREAM ; == 0, leave restream.
    STA PARTY/BATTLE_ID?_TODO ; Store loaded.
    BNE EXIT_SCRIPT_UNK_AND_RESTREAM_CONTINUE/WORD_SKIP ; != 0, goto.
STREAM_COORD_AND_MENUS_UNK: ; 13:10E4, 0x0270E4
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    JSR SUB_COORD_SAVE_AND_DO_UNK ; Do ??
    LDX #$07 ; Load ??
INDEX_POSITIVE: ; 13:10EB, 0x0270EB
    LDA ARRAY_DATA_TODO_LOOK_AT_ME_BETTER,X ; Move TODO probs good clues here.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8],X ; Store to arr.
    DEX ; Index--
    BPL INDEX_POSITIVE ; Positive, goto.
    LDA #$66 ; Seed 13:1166, todo.
    LDX #$B1
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    STX ARG/PTR_L
    LDA #$1C ; Seed ??
    JSR SCRIPT_HELPER_STORE_CONTINUE_FLAG_UNK_TODO ; Do ??
    LDA #$6C
    LDX #$B1 ; Seed master menu.
    STA FPTR_MENU_PRIMARY[2]
    STX FPTR_MENU_PRIMARY+1
    LDA #$6C ; Seed submenu.
    LDX #$00
    STA FPTR_MENU_SECONDARY/SUBMENU[2]
    STX FPTR_MENU_SECONDARY/SUBMENU+1
    LDA #$00
    STA MENU_COLUMN_INDEX ; Clear menu.
    STA MENU_ROW_INDEX
    STA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL
MENU_LOOP?: ; 13:1118, 0x027118
    LDX #$0C
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set offset.
    JSR SETTLE_AND_MENU_COORD_SPRITE_HELPER? ; Do ??
    LDA SCRIPT_MENU_STATUS ; Load.
    AND #$0C ; Keep 0000.1100
    BEQ VALS_CLEAR ; Clear, goto.
    LDX MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load index.
    LDY RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+4,X ; Load ??
    AND #$08 ; Keep ??
    BEQ VAL_CLEAR ; Clear, goto.
    INY ; Index++
    CPY #$BA ; If _ #$BA
    BNE ALT_UNK ; !=, goto.
    LDY #$B0 ; Seed ??
    BNE ALT_UNK ; Always taken.
VAL_CLEAR: ; 13:1136, 0x027136
    DEY ; --
    CPY #$AF ; If _ #$AF
    BNE ALT_UNK ; !=, goto.
    LDY #$B9 ; Seed ??
ALT_UNK: ; 13:113D, 0x02713D
    TYA ; Y to A.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+4,X ; Store ??
    JSR ENGINE_CURSOR_TO_BG_UPDATE_INTO_MENU? ; As cursor?
    JMP MENU_LOOP? ; Loop.
VALS_CLEAR: ; 13:1146, 0x027146
    JSR CLEAR_MODSTUFF_AND_GOTO ; Clear ??
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Move ??
    STA PAIR_UNK_LEVEL_UP_RELATED?[2]
    LDA LIB_BCD/EXTRA_FILE_BCD_B
    STA PAIR_UNK_LEVEL_UP_RELATED?+1
    LDX #$08
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set coord.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load ??
    LDA #$40 ; To test.
    BIT SCRIPT_MENU_STATUS ; Test it.
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_EQ ; Goto.
ARRAY_DATA_TODO_LOOK_AT_ME_BETTER: ; 13:115E, 0x02715E
    .db A0
    .db A0
    .db A4
    .db A0
    .db B0
    .db B0
    .db B0
    .db B0
    .db 23 ; Ptr to, disp update.
    .db 68
    .db 00
    .db 00
    .db 08
    .db 00
    .db 04
    .db 01
    .db 01
    .db 00
    .db CC
    .db 01
STREAM_FLAG_SAVE_COORDS_AND_DEEPER: ; 13:1172, 0x027172
    LDA #$21
    STA ROUTINE_CONTINUE_FLAG?
    STY SCRIPT_MAIN_FILE_STREAM_INDEX
    LDA GFX_COORD_HORIZONTAL_OFFSET ; Save coords.
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    JSR SCRIPT_TODO ; Do ??
    JMP RESTORE_COORDS_AND_TODO ; Exit restore.
STREAM_FLAG_AND_COORDS_AND_MENU_UNK: ; 13:1184, 0x027184
    LDA #$22
    STA ROUTINE_CONTINUE_FLAG? ; Set continue.
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    LDA GFX_COORD_HORIZONTAL_OFFSET ; Save coords.
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    JSR STREAM_PTR_AND_R6_UNK_TODO ; Do ??
    JMP RESTORE_COORDS_AND_TODO ; Exit coords.
STREAM_FLAG_SAVE_COORDS_AND_MENU_THINGY: ; 13:1196, 0x027196
    LDA #$20
    STA ROUTINE_CONTINUE_FLAG? ; Set flag.
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Save stream index.
    LDA GFX_COORD_HORIZONTAL_OFFSET ; Save coords.
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    JSR SUB_TODO_MENU_SUBY? ; Do menu.
RESTORE_COORDS_AND_TODO: ; 13:11A5, 0x0271A5
    PLA ; Restore coords.
    STA GFX_COORD_VERTICAL_OFFSET
    PLA
    STA GFX_COORD_HORIZONTAL_OFFSET
    BCS EXIT_RESTREAM_MAIN_SELF ; CS, restream.
    JSR PTR_AND_BANK_R6_UNK ; Do.
    JSR PTR_MOVE_TO_UNK_ARR_WRAM ; Do.
EXIT_STREAM_RESTORE_CONTINUE/SKIP_WORD: ; 13:11B3, 0x0271B3
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Script index.
    INY ; Stream += 2
    INY
    RTS ; Leave.
EXIT_RESTREAM_MAIN_SELF: ; 13:11B8, 0x0271B8
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    JMP MAIN_SCRIPT_RESTREAM_SELF ; Restream it.
SCRIPT_SLOT_TODO: ; 13:11BD, 0x0271BD
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store main index.
    LDX #$00 ; Seed slot.
VAL_LT_0x4_LOOP: ; 13:11C1, 0x0271C1
    JSR LIB_FIND_SLOT_OCCUPIED_AND_BETWEEN_0x1-0x5 ; Find.
    BCS SLOT_INVALID ; CS, goto.
    TAY ; A to Y. ID.
    TXA ; Save X.
    PHA
    TYA ; ID Back to Y.
    JSR PTR_ADVANCE_AND_SCRIPT_UNK_TODO ; Do sub.
    PLA ; Restore X.
    TAX
    BCC EXIT_STREAM_RESTORE_CONTINUE/SKIP_WORD ; CC, exit.
SLOT_INVALID: ; 13:11D1, 0x0271D1
    INX ; Slot++
    CPX #$04 ; If _ #$04
    BCC VAL_LT_0x4_LOOP ; <, goto.
    BCS EXIT_RESTREAM_MAIN_SELF ; >=, exit self restream.
SCRIPT_SMOL_AND_RESTREAM: ; 13:11D8, 0x0271D8
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    JSR PTR_SETUP_AND_INDEX_CHECK_UNK ; Do sub.
    BCS EXIT_RESTREAM_MAIN_SELF ; CS, restream self.
    BCC EXIT_STREAM_RESTORE_CONTINUE/SKIP_WORD ; CC, Inc 2.
PTR_ADVANCE_AND_SCRIPT_UNK_TODO: ; 13:11E1, 0x0271E1
    JSR PTR_AND_ADVANCE_TODO ; Advance ??
    LDY #$08 ; PTR L?
    BNE SET_SAVE_PAGE_PTR_L? ; !=, goto.
PTR_SETUP_AND_INDEX_CHECK_UNK: ; 13:11E8, 0x0271E8
    JSR PTR_VERY_MANUAL_HELPER_76B0 ; Setup ptr.
    LDY #$50 ; Stream index.
SET_SAVE_PAGE_PTR_L?: ; 13:11ED, 0x0271ED
    STY SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Store PTR L.
    LDY #$00 ; Stream index.
VAL_LT_TARGET: ; 13:11F1, 0x0271F1
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    BNE EXIT_RET_CC ; != 0, goto.
    INY ; Stream++
    CPY SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; If _ target
    BCC VAL_LT_TARGET ; <, goto.
    RTS ; Leave.
EXIT_RET_CC: ; 13:11FB, 0x0271FB
    CLC ; Ret CC.
    RTS ; Leave.
SCRIPT_WRAM_FILE_DEEP_CLEAR_KEEP_OTHERWISE_DO_UNK: ; 13:11FD, 0x0271FD
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Do ptr.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM.
    LDY #$28 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    BEQ EXIT_STREAM_INDEX_KEEP ; == 0, goto.
    STA CURRENT_SAVE_MANIPULATION_PAGE+640 ; Store ??
    STY LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Store stream index.
    JSR SCRIPT_ENTRY_CLEAR_UNK_AND_MORE ; Do ??
    JSR EXIT_STREAM_HEADER_AS_R6_DATA? ; Do ??
EXIT_STREAM_CONTINUE: ; 13:1216, 0x027216
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream load.
    INY ; += 2
    INY
    RTS ; Leave.
EXIT_STREAM_INDEX_KEEP: ; 13:121B, 0x02721B
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Reload stream.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable.
EXIT_RESTREAM_SELF: ; 13:1220, 0x027220
    JMP MAIN_SCRIPT_RESTREAM_SELF ; Restream self.
SCRIPT_WRAM_CLEAR_RESTREAM_OTHERWISE_EXTRA: ; 13:1223, 0x027223
    LDA CURRENT_SAVE_MANIPULATION_PAGE+640 ; Load ??
    BEQ EXIT_RESTREAM_SELF ; == 0, goto.
    STA PTR_CREATE_SEED_UNK ; Store nonzero.
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    JSR PTR_AND_BANK_R6_UNK ; Do ??
    JSR PTR_MOVE_TO_UNK_ARR_WRAM ; Do ??
    JMP EXIT_STREAM_CONTINUE ; Exit continue.
SCRIPT_UNK_RESERVATION_THINGY?: ; 13:1235, 0x027235
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM.
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load ??
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    JSR STREAM_UNK_RESERVATION_ATTRS_UNK ; Stream attrs.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load index.
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit disable.
SCRIPT_WRAM_AND_STREAM_MOVES/PTR_UNK: ; 13:1246, 0x027246
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Enable WRAM.
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load ?? and stack.
    PHA
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load ??
    INY ; Stream++
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    LDY #$1F ; Stream index.
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Store file val to. Reserve it?!
    DEY ; Stream--
    PLA ; Pull value first loaded.
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Store to ??
    LDY #$00 ; Stream index reset.
    LDA #$07 ; Move ??
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y
    LDY #$00 ; Stream index. TODO not needed.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    AND #$3F ; Keep lower.
    LDY #$1D ; Stream index.
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Store to file.
    LDY #$14 ; Stream index.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load from file.
    AND #$BF ; Keep 1001.1111
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Store back.
    LDY #$1C ; Stream index.
    LDA SCRIPT_MAIN_FILE_STREAM_INDEX ; Load ??
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Store to.
    LDA WRAM_SCRIPT_COMBINE_IDFK ; Load ??
    ASL A ; << 3, *8.
    ASL A
    ASL A
    TAX ; To X index.
    LDA DATA_UNK_C,X ; Load data.
    LSR A ; >> 2, /4.
    LSR A
    STA WRAM_ONEOFF_IDFK ; Store to WRAM.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Do disabled.
    PLA ; Pull routine layer off??
    PLA
    JMP PTR_EQ_0x00 ; Goto.
SCRIPT_R1_FILE_THINGY: ; 13:1290, 0x027290
    LDA ENGINE_MAPPER_BANK_VALS_COMMITTING+1 ; Load R1.
    JSR REGISTER_FLAG_23_INVERT_PASSED_AND_STREAM_DATA_TO_UNK ; Do sub.
EXIT_MAIN_STREAM_INC_WORD_DISABLE_WRAM: ; 13:1295, 0x027295
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load stream.
    INY ; += 2
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Goto.
REGISTER_FLAG_23_INVERT_PASSED_AND_STREAM_DATA_TO_UNK: ; 13:129C, 0x02729C
    TAX ; To X index.
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Wram writable.
    TXA ; X back to A.
    EOR FLAG_UNK_23 ; Invert with flag.
    AND #$7F ; Keep bottom.
    BNE BOTTOM_NONZERO ; != 0, goto.
    RTS ; Leave if zero.
BOTTOM_NONZERO: ; 13:12AA, 0x0272AA
    STX FLAG_UNK_23 ; To flag.
    LDY #$1C ; Stream index.
    LDA SCRIPT_MAIN_FILE_STREAM_INDEX ; Load main file index.
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Write to file ??
    JSR SUB_PTR_REBASED_TO_DATA? ; To ??
    ORA #$80 ; Set ??
    STA MAIN_FLAG_UNK ; Store to main ??
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Disabled.
    PLA ; Pull multiple layers?
    PLA
    PLA
    PLA
    JMP WAIT_PRESSES_CLEAR? ; Goto wait.
SUB_PTR_REBASED_TO_DATA?: ; 13:12C3, 0x0272C3
    SEC ; Prep sub.
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??[2] ; Load ??
    SBC #$80 ; Sub with.
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Store to.
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??+1 ; Load.
    SBC #$67 ; Sub with.
    ASL LIB_BCD/EXTRA_FILE_BCD_A ; <<
    ROL A ; Rotate into.
    ASL LIB_BCD/EXTRA_FILE_BCD_A ; 2x
    ROL A
    ASL LIB_BCD/EXTRA_FILE_BCD_A ; 3x
    ROL A
    RTS ; Leave.
ROUTINE_ATTRIBUTE_THINGY_TODO_INIT: ; 13:12D8, 0x0272D8
    STX WRAM_SCRIPT_PAIR_UNK[2] ; Store ??
    STY WRAM_UNK_6797
ROUTINE_ATTRIBUTE_THINGY_TODO_CONTINUE: ; 13:12DE, 0x0272DE
    STA WRAM_6780_BASE_FOR_ATTR_FETCH/RTN? ; Store ??
    ASL A ; << 2, *4.
    ASL A
    TAX ; To X index.
    LDA SCRIPT_ATTRIBUTES_A,X ; Move attrs.
    STA ROUTINE_ATTRIBUTES_SCRIPT_WORD_A
    LDA SCRIPT_ATTRIBUTE_B,X
    STA ROUTINE_ATTRIBUTES_SCRIPT_WORD_B 
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    STA WRAM_SCRIPT_COMBINE_IDFK ; Store to.
    STA WRAM_ONEOFF_IDFK
    RTS ; Leave.
SCRIPT_SEEDY_A: ; 13:12FC, 0x0272FC
    LDA #$74 ; Seed ??
    JSR REGISTER_FLAG_23_INVERT_PASSED_AND_STREAM_DATA_TO_UNK
    LDA #$09 ; Seed ??
    LDX #$FC
    LDY #$8A
    JSR ROUTINE_ATTRIBUTE_THINGY_TODO_INIT ; Do ??
    LDA #$0F
    STA WRAM_UNK ; Set ??
    LDX #$10 ; Seed val ret.
    JSR ACTION_INDEX_STORE_AND_RETURN_VALUE_UNK ; Get val.
    JMP EXIT_MAIN_STREAM_INC_WORD_DISABLE_WRAM ; Exit.
SCRIPT_WRAM_SET_UNK: ; 13:1317, 0x027317
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM writable.
    LDA #$F8
    STA WRAM_UNK ; Set ??
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit no WRAM.
SCRIPT_SEEDY_B: ; 13:1323, 0x027323
    LDA #$74 ; Seed ??
    JSR REGISTER_FLAG_23_INVERT_PASSED_AND_STREAM_DATA_TO_UNK ; Do.
    LDA #$0A ; Seed ??
    LDX #$1C
    LDY #$8B
    JSR ROUTINE_ATTRIBUTE_THINGY_TODO_INIT ; Do it.
    LDX #$08 ; Seed return.
    JSR ACTION_INDEX_STORE_AND_RETURN_VALUE_UNK ; Do action.
    JMP EXIT_MAIN_STREAM_INC_WORD_DISABLE_WRAM ; Goto, return.
SCRIPT_SEEDY_C: ; 13:1339, 0x027339
    LDA #$74
    JSR REGISTER_FLAG_23_INVERT_PASSED_AND_STREAM_DATA_TO_UNK ; Seed ??
    LDA #$0B ; Seed ??
    LDX #$3C
    LDY #$8B
    JSR ROUTINE_ATTRIBUTE_THINGY_TODO_INIT ; Do.
    JMP EXIT_MAIN_STREAM_INC_WORD_DISABLE_WRAM ; Exit.
SCRIPT_FLAG_R6_WRAM_FILE_UNK: ; 13:134A, 0x02734A
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
    LDA #$F0
    STA FLAG_UNK_23 ; Set flag ??
    LDA #$3F
    STA SCRIPT_R6_ROUTINE_SELECT ; Seed routine.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM.
    LDA #$00
    STA WRAM_UNK_SET_A ; Clear ??
    STA WRAM_UNK_SET_B
    LDA #$0D ; Seed ??
    LDY #$00
    JSR STREAM_WRAM_PAIR_UNK_AND_RTN_ATTRS ; Do ??
    LDA #$0E ; Seed ??
    LDY #$20
    JSR STREAM_WRAM_PAIR_UNK_AND_RTN_ATTRS ; Do ??
    SEC ; Prep sub.
    LDA PTR_CREATE_SEED_UNK ; Load ??
    SBC #$8F ; Sub with.
    STA WRAM_8F00_PAIR[2] ; Store to.
    LDA #$00
    STA WRAM_8F00_PAIR+1 ; Clear lower.
    STA WRAM_UNK ; Clear ??
    JSR R6_AND_FILE_MANIP_UNK ; Do ??
    LDX #$10 ; Data return.
    JSR ACTION_INDEX_STORE_AND_RETURN_VALUE_UNK ; Do.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Restore stream index.
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit disabled.
STREAM_WRAM_PAIR_UNK_AND_RTN_ATTRS: ; 13:138B, 0x02738B
    STA WRAM_6780_BASE_FOR_ATTR_FETCH/RTN?,Y ; Store val to Y index.
    ASL A ; << 2, *4.
    ASL A
    TAX ; To X index, routine attr.
    LDA #$28 ; Move pair ??
    STA WRAM_SCRIPT_PAIR_UNK[2],Y
    LDA #$8A ; Move pair ??
    STA WRAM_UNK_6797,Y
    LDA SCRIPT_ATTRIBUTES_A,X ; Move routine X attrs to Y index.
    STA ROUTINE_ATTRIBUTES_SCRIPT_WORD_A,Y
    LDA SCRIPT_ATTRIBUTE_B,X
    STA ROUTINE_ATTRIBUTES_SCRIPT_WORD_B ,Y
    RTS ; Leave.
SCRIPT_23_MOD_AND_ATTR_THINGY: ; 13:13A8, 0x0273A8
    LDA #$F2 ; Seed mod.
    JSR REGISTER_FLAG_23_INVERT_PASSED_AND_STREAM_DATA_TO_UNK ; Do.
    LDA #$0F ; Seed ??
    JSR ROUTINE_ATTRIBUTE_THINGY_TODO_CONTINUE ; Do.
    JMP EXIT_MAIN_STREAM_INC_WORD_DISABLE_WRAM ; Exit.
SCRIPT_INTO_AND_RESTORE_UNK: ; 13:13B5, 0x0273B5
    INY ; Stream++
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    ORA #$80 ; Set ??
    STA FIRST_LAUNCHER_HOLD_FLAG? ; Store to.
    LDX #$00
    STX FLAG_UNK_23 ; Clear flag.
    JSR ACTION_INDEX_STORE_AND_RETURN_VALUE_UNK ; Do ??
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??[2] ; Save ??
    PHA
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PHA
    JSR HUGE_ASS_STREAMS_THINGY_IDFK ; Do.
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??+1 ; Restore.
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load stream.
    INY ; ++
    RTS ; Leave.
SCRIPT_HEADER_LOWER_COMPARE_RESTREAM_NE: ; 13:13D8, 0x0273D8
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Save stream.
    LDY #$02 ; Stream index.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    AND #$3F ; Keep lower.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Restore index.
    CMP WRAM_SCRIPT_COMBINE_IDFK ; If _ var
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_EQ ; Exit restream/continue, != restream.
SCRIPT_MAIN_HEADER_CHECKS_UNK: ; 13:13E8, 0x0273E8
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
    LDY #$00 ; Stream reset.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load ??
    AND #$C0 ; Keep upper.
    LDY #$04 ; Seed stream index.
    CMP [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; If _ file
    BNE EXIT_REINDEX_SELF ; !=, goto.
    LDY #$01 ; Stream index.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    LDY #$05 ; Restream.
    CMP [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Compare to other ??
    BNE EXIT_REINDEX_SELF ; !=, goto.
    LDY #$02 ; Restream.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    AND #$C0 ; Keep upper.
    LDY #$06 ; Restream.
    CMP [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; If _ file
    BNE EXIT_REINDEX_SELF ; !=, goto.
    LDY #$03 ; Stream index.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    LDY #$07 ; Restream.
    CMP [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; If _ file
    BNE EXIT_REINDEX_SELF ; !=, goto.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Restore index.
    INY ; += 2
    INY
    RTS ; Leave.
EXIT_REINDEX_SELF: ; 13:141B, 0x02741B
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Restore index.
    JMP MAIN_SCRIPT_RESTREAM_SELF ; Restream itself.
SCRIPT_WRAM_FILE_MANIP_AND_DISABLED: ; 13:1420, 0x027420
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM enable.
    INY ; Stream++
    JSR LIB_MAIN_FPTR_STASH_UNK ; Do ??
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Goto exit disabled.
SCRIPT_TO_SWITCH_INIT_PORTION: ; 13:142B, 0x02742B
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    STA SWITCH_INIT_PORTION? ; Store to.
    INY ; Stream++
    RTS ; Leave.
SCRIPT_WRAM_AND_LARGE_FILES_UNK: ; 13:1432, 0x027432
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM.
    JSR SLOTS_AND_FPTRS_TODO_LARGER_FILES ; Do ??
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Goto disabled.
SCRIPT_MAIN_CONSUME_AND_SAVE_MAP_POS?: ; 13:1440, 0x027440
    JSR SCRIPT_MAIN_FILE_TO_ID?_TODO ; Do ??
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??[2] ; Save ??
    PHA
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PHA
    LDA PARTY/BATTLE_ID?_TODO ; Load ??
    JSR SUB_INDEX_HELPER_UNK ; Do todo.
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??+1 ; Restore ??
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load stream index.
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_CC ; Exit restream maybe.
SCRIPT_FIGURE_ABOVE_THIS_IN_TABLE_SORTA_THE_SAME: ; 13:1459, 0x027459
    JSR SCRIPT_MAIN_FILE_TO_ID?_TODO ; Do ??
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??[2] ; Save.
    PHA
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PHA
    LDA PARTY/BATTLE_ID?_TODO ; Load.
    JSR LIB_RETURN_INDEX_OF_PARTY_MEMBER_ID_A ; Do ??
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??+1 ; Restore ??
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Restore stream.
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_CC ; Exit restream.
SCRIPT_MAIN_TO_ENCOUNTER_ID: ; 13:1472, 0x027472
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    STA SCRIPT_OVERWORLD_BATTLE_ENCOUNTER? ; Store to.
    JSR SUB_PTR_REBASED_TO_DATA? ; Do.
    STA MAIN_FLAG_UNK ; Store ret as flag.
    INY ; Stream++
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
    PLA ; Return extra layer.
    PLA
    JMP WAIT_PRESSES_CLEAR? ; Goto exit clear.
STREAM_COORD_AND_RESTORE: ; 13:1484, 0x027484
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    JSR SUB_COORD_SAVE_AND_DO_UNK ; Do ??
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Restore stream.
    INY ; Stream++
    RTS ; Leave.
STREAM_DATA_WORD_TO_WRAM_TOP_0x3F: ; 13:148D, 0x02748D
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM.
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    AND #$3F ; Keep lower.
    TAX ; To X index.
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    STA CURRENT_SAVE_MANIPULATION_PAGE[768],X ; Store to save page beginning.
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit disabled.
SCRIPT_SAVE_GAME_FILE: ; 13:14A0, 0x0274A0
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream index.
    JSR SCRIPT_HELP_SAVE_GAME_FILE ; Do script, save game.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load stream index.
    INY ; ++
    RTS ; Leave.
SCRIPT_EXTRA_HEADER_DECIMAL_SHIFT_SAVE_EARLY: ; 13:14A9, 0x0274A9
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store stream.
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Do ??
    LDY #$10 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    JSR LIB_IDFK_DECIMALY_AND_IDK ; Do lib.
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Do.
    LDY #$11 ; Stream index.
    SEC ; Prep sub.
    LDA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Load ??
    SBC [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Sub with file.
    STA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Store to.
    INY ; Stream++
    LDA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Load ??
    SBC [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Sub with file.
    STA PAIR_UNK_LEVEL_UP_RELATED?+1 ; Store to pair.
    JSR EXIT_STREAM_HEADER_AS_R6_DATA? ; Do ??
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Wram writes.
    LDX #$03 ; Stream index.
LOOP_POSITIVE: ; 13:14D0, 0x0274D0
    LDA CURRENT_SAVE_MANIPULATION_PAGE+4,X ; Load from arr.
    STA CURRENT_SAVE_MANIPULATION_PAGE+12,X ; Store higher.
    DEX ; Index--
    BPL LOOP_POSITIVE ; Positive, goto.
    LDA #$00
    STA CURRENT_SAVE_MANIPULATION_PAGE+21 ; Clear ??
    STA CURRENT_SAVE_MANIPULATION_PAGE+22
    STA CURRENT_SAVE_MANIPULATION_PAGE+23
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; No WRAM.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Reload stream.
    INY ; Stream++
    RTS ; Leave.
SCRIPT_WRAM_AND_SAVES_MOVE_AND_FLAGS_TODO: ; 13:14EB, 0x0274EB
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM enabled.
    LDX #$03 ; Seed index ??
INDEX_POSITIVE_LOOP: ; 13:14F0, 0x0274F0
    LDA CURRENT_SAVE_MANIPULATION_PAGE+12,X ; Move higher to lower.
    STA CURRENT_SAVE_MANIPULATION_PAGE+4,X
    DEX ; Index--
    BPL INDEX_POSITIVE_LOOP ; Positive, loop.
    LDA #$20
    STA FIRST_LAUNCHER_HOLD_FLAG? ; Set hold ??
    LDA #$00
    STA SCRIPT_FLAG_0x22_AUTO_MOVE ; Clear moving?
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit no WRAM.
COMBINE_VALS_AND_RESTREAM_IF_ANY_SET: ; 13:1505, 0x027505
    LDA CURRENT_SAVE_MANIPULATION_PAGE+21 ; Load all vals.
    ORA CURRENT_SAVE_MANIPULATION_PAGE+22
    ORA CURRENT_SAVE_MANIPULATION_PAGE+23
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_NE ; Goto and restream if nonzero. Has friends?
SCRIPT_FIND_OCCUPIED_HELPER_XP_TO_ALL_MEMBERS?: ; 13:1511, 0x027511
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index save.
    LDA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Move ??
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]
    LDA PAIR_UNK_LEVEL_UP_RELATED?+1
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1
    LDX #$01 ; Slot start.
LOOP_INDEX_LT_0x4: ; 13:151D, 0x02751D
    JSR LIB_FIND_SLOT_OCCUPIED_AND_BETWEEN_0x1-0x5 ; Find.
    BCS SLOT_INVALID ; Invalid, goto.
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Create PTRT for to banked data.
    LDY #$01 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load file.
    BMI SLOT_INVALID ; Negative, goto.
    CLC ; Prep add.
    LDA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Load ??
    ADC PAIR_UNK_LEVEL_UP_RELATED?[2] ; Add with.
    STA PAIR_UNK_LEVEL_UP_RELATED?[2] ; Store to.
    LDA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Load ??
    ADC PAIR_UNK_LEVEL_UP_RELATED?+1 ; Add with.
    STA PAIR_UNK_LEVEL_UP_RELATED?+1 ; Store to. ??
    BCC SLOT_INVALID ; No overflow, goto. Apply XP to all members?
    JSR SEED_UNK_LEVEL_UP_RELATED ; Seed it.
SLOT_INVALID: ; 13:153D, 0x02753D
    INX ; Index++
    CPX #$04 ; If _ #$04
    BCC LOOP_INDEX_LT_0x4 ; <, goto.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    INY ; ++
    RTS ; Leave.
SCRIPT_DELAY_AND_FADE_OUT_FIGHT_OVER?: ; 13:1546, 0x027546
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
    LDX #$3C
    JSR ENGINE_DELAY_X_FRAMES ; Delay frames.
    JSR ENGINE_PALETTE_FADE_OUT ; Fade out.
    JSR ENGINE_IDK ; Engine ??
    JSR PACKETY_HELPER_SAVE_AND_RESTORE_CREATION ; Do packety.
    LDA #$55
    STA ROUTINE_CONTINUE_FLAG? ; Set continue.
    JSR ENGINE_PALETTE_FORWARD_TO_TARGET ; Forward palette.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    INY ; Stream++
    RTS ; Leave.
ENGINE_IDK: ; 13:1561, 0x027561
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do with writes.
    LDX #$00 ; Count loops.
LOOP_LT: ; 13:1566, 0x027566
    LDA WRAM_ARR_PARTY_CHARACTER_IDS?[6],X ; Load save offset.
    BEQ SAVE_OFFSET_EQ_0x00 ; == 0, goto.
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Create ptr.
    LDY #$01 ; Seed index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from PTR.
    BMI SAVE_OFFSET_EQ_0x00 ; If negative, goto.
    JSR STREAM_MOVE_INSIDE_FILE_0x3->0x14_0x4->0x15 ; Alt A.
    JSR STREAM_MOVE_INSIDE_FILE_0x5->0x16_0x6->0x17 ; Alt B.
SAVE_OFFSET_EQ_0x00: ; 13:157A, 0x02757A
    INX ; ++
    CPX #$04 ; If _ #$04
    BCC LOOP_LT ; <, goto.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Re-disable.
    LDA #$20 ; Val ??
    JMP ENGINE_MAIN_SONG_REPLACE_AND_THEN_RESTORE_MAIN_SONG? ; Goto.
STREAM_MOVE_INSIDE_FILE_0x3->0x14_0x4->0x15: ; 13:1587, 0x027587
    LDY #$03
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Move A.
    LDY #$14
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y
    LDY #$04
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Move B.
    LDY #$15
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y
    RTS
STREAM_MOVE_INSIDE_FILE_0x5->0x16_0x6->0x17: ; 13:1598, 0x027598
    LDY #$05
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Move A.
    LDY #$16
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y
    LDY #$06
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Move B.
    LDY #$17
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y
    RTS
SCRIPT_FILE_SUB_RESTREAM/CONTINUE_ON_FILE: ; 13:15A9, 0x0275A9
    JSR SCRIPT_HELPER_SAVE_MAIN_INDEX_AND_MAKE_ENEMY_DPTRS? ; Stream store and ID from ?? store?
    SEC ; Prep sub.
    LDY #$14 ; File index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load ??
    LDY #$03
    SBC [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Sub with ??
    LDY #$15
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load ??
    LDY #$04
    SBC [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Sub with, carry sub.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Restream.
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_CS ; Goto. Restream if underflow.
SCRIPT_HELPER_SAVE_MAIN_INDEX_AND_MAKE_ENEMY_DPTRS?: ; 13:15C2, 0x0275C2
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store index.
SUB_DATA_PTR_FROM_RAM[0x28]: ; 13:15C4, 0x0275C4
    LDA PARTY/BATTLE_ID?_TODO ; Load val from.
    JMP CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Create PTR.
SCRIPT_FILE_HEADER_SUBS_SELF_AND_RESTREAM_NO_UNDERFLOW: ; 13:15C9, 0x0275C9
    JSR SCRIPT_HELPER_SAVE_MAIN_INDEX_AND_MAKE_ENEMY_DPTRS? ; Store and make PTR.
    SEC ; Prep sub.
    LDY #$16 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    LDY #$05 ; Stream index.
    SBC [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Sub with.
    LDY #$17 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    LDY #$06 ; Stream index.
    SBC [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Carry sub from file.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_CS ; Goto.
SCRIPT_UNK_HEADER_MASK_WITH_MAIN_RESTREAM: ; 13:15E2, 0x0275E2
    INY ; Stream++
    JSR SCRIPT_HELPER_SAVE_MAIN_INDEX_AND_MAKE_ENEMY_DPTRS? ; Do store.
    LDY #$01 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream restore.
    AND [SCRIPT_MAIN_FPTR[2]],Y ; Mask with main.
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_EQ ; If none set, restream.
SCRIPT_EXTRA_HEADER_COMPARE_MAIN_RESTREAM: ; 13:15F1, 0x0275F1
    INY ; Stream++
    JSR SCRIPT_HELPER_SAVE_MAIN_INDEX_AND_MAKE_ENEMY_DPTRS? ; Do.
    LDY #$10 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load other index.
    CMP [SCRIPT_MAIN_FPTR[2]],Y ; Compare to other file.
    JMP OPTIONS_CONTINUE_FILE_NO_RESTREAM_ON_CS ; Goto, restream if a >= b.
SCRIPT_WRAM_STREAM_MAIN_AND_EXTRA_MASK_MOVE_AND_ETC: ; 13:1600, 0x027600
    INY ; Stream++
    JSR SCRIPT_HELPER_SAVE_MAIN_INDEX_AND_MAKE_ENEMY_DPTRS? ; Do.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do writable.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    PHP ; Save status after.
    LDY #$01 ; Stream index.
    PHA ; Save value, too.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load value. from file.
    TAX ; To X index.
    PLA ; Pull value.
    AND [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Mask with file.
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Store to file.
    PLP ; Pull status.
    BMI VAL_NEGATIVE ; Negative, goto.
    JSR STREAM_MOVE_INSIDE_FILE_0x3->0x14_0x4->0x15 ; Do move.
    TXA ; X to A.
    BPL VAL_NEGATIVE ; Negative, goto.
    JSR SCRIPT_SUB_EXTRA ; Extra sub.
VAL_NEGATIVE: ; 13:1623, 0x027623
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream++
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Wram disabled.
SCRIPT_MAIN_SET_VALS_UNK: ; 13:1629, 0x027629
    INY ; Stream++
    JSR SCRIPT_HELPER_SAVE_MAIN_INDEX_AND_MAKE_ENEMY_DPTRS? ; Do sub.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load stream index.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    LDY #$01 ; Stream index.
    ORA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Set val with file.
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Store to file.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    INY ; Stream index.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; No WRAM.
SCRIPT_FILES_AND_SEED_UNK_B: ; 13:1640, 0x027640
    INY ; Stream++
    JSR SCRIPT_HELPER_SAVE_MAIN_INDEX_AND_MAKE_ENEMY_DPTRS? ; Do stream.
    LDX #$16 ; Seed ??
    LDY #$05
    BNE VALS_SEEDED ; != 0, goto.
SCRIPT_FILES_AND_SEED_UNK_A: ; 13:164A, 0x02764A
    INY ; Stream++
    JSR SCRIPT_HELPER_SAVE_MAIN_INDEX_AND_MAKE_ENEMY_DPTRS? ; Do script.
    LDX #$14 ; Seed ??
    LDY #$03
VALS_SEEDED: ; 13:1652, 0x027652
    STX LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Store seeded.
    STY LIB_BCD/EXTRA_FILE_D
    CLC ; Prep add.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    LDY LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Load from var.
    ADC [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Add with ??
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Store at.
    INY ; Stream++
    LDA #$00 ; Seed carry.
    ADC [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Add with file.
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Store to.
    SEC ; Prep suib.
    LDY LIB_BCD/EXTRA_FILE_D ; Load ??
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    SBC SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Sub with.
    INY ; Stream++
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load ??
    SBC SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Sub with.
    BCS SUB_NO_UNDERFLOW ; No underflow, goto.
    LDY LIB_BCD/EXTRA_FILE_D ; Load stream from.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Store to file.
    INY ; Stream++
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Move ??
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1
SUB_NO_UNDERFLOW: ; 13:1681, 0x027681
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Wram enable.
    LDY LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Stream index.
    LDA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Load ??
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Store to file.
    INY ; Stream++
    LDA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Move ??
    STA [LIB_BCD/EXTRA_FILE_BCD_A],Y
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream++
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit no wram.
SCRIPT_MAIN_NEW_SONG_AND_SET_UNK: ; 13:1695, 0x027695
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    JSR SOUND_ASSIGN_NEW_MAIN_SONG ; Make new main song.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM enable.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+4 ; Load ??
    AND #$C0 ; Keep upper.
    ORA [SCRIPT_MAIN_FPTR[2]],Y ; Set with file.
    STA CURRENT_SAVE_MANIPULATION_PAGE+4 ; Store back to.
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit disable.
SCRIPT_VAL_TO_SFX_A: ; 13:16AC, 0x0276AC
    INY ; File++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move as song effect.
    STA SOUND_EFFECT_REQUEST_ARRAY[5] ; Store to SFX.
    INY ; Stream++
    RTS ; Leave.
SCRIPT_VAL_TO_SFX_B: ; 13:16B4, 0x0276B4
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move to SFX 0x1
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Store to.
    INY ; Stream++
    RTS ; Leave.
SCRIPT_VAL_TO_SFX_D: ; 13:16BC, 0x0276BC
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move to SFX.
    STA SOUND_EFFECT_REQUEST_ARRAY+3
    INY ; Stream++
    RTS ; Leave.
SCRIPT_WRAM_SET_FLAGS_UNK: ; 13:16C4, 0x0276C4
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM.
    LDA #$20 ; Set flag.
    ORA CURRENT_SAVE_MANIPULATION_PAGE+112 ; Combine with.
    STA CURRENT_SAVE_MANIPULATION_PAGE+112 ; Store to.
    LDA #$20 ; Load ??
    ORA CURRENT_SAVE_MANIPULATION_PAGE+176 ; Combine with.
    STA CURRENT_SAVE_MANIPULATION_PAGE+176 ; Store to.
    INY ; Stream++
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit disabled.
SCRIPT_COPY_PROTECTION_TEST_B: ; 13:16DB, 0x0276DB
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Save stream index.
    LDA #$19 ; Seed ??
    LDX #$C1
    LDY #$A6
    JSR ENGINE_SCRIPT_LAUNCH_R7_A_PTR_XY_WITH_RESTORE ; Launch 19:06C1, copy protection of a type.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Restore stream.
    INY ; Stream++
    RTS ; Leave.
SCRIPT_RESTREAM_IF_NOT_EQUAL_OTHERWISE_ARR_MOVE_TODO: ; 13:16EA, 0x0276EA
    LDA CURRENT_SAVE_MANIPULATION_PAGE+542 ; Load ??
    CMP #$FF ; If _ #$FF
    BEQ VAL_EQ_0xFF ; ==, goto.
    JMP MAIN_SCRIPT_RESTREAM_SELF ; Restream.
VAL_EQ_0xFF: ; 13:16F4, 0x0276F4
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM.
    LDX #$03 ; Index.
LOOP_INDEX_POSITIVE: ; 13:16F9, 0x0276F9
    LDA DATA_MANIP_ARR,X ; Move ??
    STA CURRENT_SAVE_MANIPULATION_PAGE+12,X
    DEX ; Index--
    BPL LOOP_INDEX_POSITIVE ; Positive, loop.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable.
    INY ; Stream += 2
    INY
    RTS ; Leave.
DATA_MANIP_ARR: ; 13:1708, 0x027708
    .db D2 ; To WRAM ??
    .db 00
    .db 80
    .db 47
SCRIPT_FLAGS_AND_SAVE_COORDS: ; 13:170C, 0x02770C
    LDA #$66 ; Set flag ??
    STA ROUTINE_CONTINUE_FLAG?
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Save stream.
    LDA GFX_COORD_HORIZONTAL_OFFSET ; Save coords.
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    JSR SCRIPT_MENU_ROUTINE_NAME_PORTION ; Do ??
    PLA
    STA GFX_COORD_VERTICAL_OFFSET ; Restore coords.
    PLA
    STA GFX_COORD_HORIZONTAL_OFFSET
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Restore stream.
    INY ; Stream++
    RTS ; Leave.
SCRIPT_SETTLE_AND_FADE_COMMIT_PALETTE: ; 13:1725, 0x027725
    JSR ENGINE_SETTLE_ALL_UPDATES? ; Settle.
    JSR ENGINE_PALETTE_FADE_SKIP_INDEX_0xE? ; Do fade.
    INY ; Stream++
    RTS ; Leave.
SCRIPT_COLOR_AND_SFX_AND_DISPLAY_UPDATE_CRIT?: ; 13:172D, 0x02772D
    JSR SCRIPT_PALETTE_COLOR_AND_SFX_TODO ; Do color and sfx.
    JSR ENGINE_PALETTE_UPLOAD_WITH_PACKET_HELPER ; Update packet.
    INY ; Stream++
    RTS ; Leave.
SCRIPT_X_SCROLL_SHAKE_16_FRAMES: ; 13:1735, 0x027735
    LDX #$10 ; Seed ??
LOOP_SHAKY_SCROLL: ; 13:1737, 0x027737
    JSR SCRIPT_INVERT_X_SCROLL_SETTLE ; Do scroll.
    DEX ; X--
    BNE LOOP_SHAKY_SCROLL ; != 0, goto.
    INY ; Stream++
    RTS ; Leave.
SCRIPT_COPY_PROTECTION_TEST_C: ; 13:173F, 0x02773F
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store ??
    LDA #$19 ; Seed 19:05CB
    LDX #$CB
    LDY #$A5
    JSR ENGINE_SCRIPT_LAUNCH_R7_A_PTR_XY_WITH_RESTORE ; Do it.
    JSR EXIT_STREAM_HEADER_AS_R6_DATA? ; Do header.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream restore.
    INY ; Stream++
    RTS ; Leave.
SCRIPT_COPY_PROTECT_CUT_FROM_GAME_UNK: ; 13:1751, 0x027751
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Stream index save.
    LDA #$19 ; Seed 19:06C1, RTS before copy protect stuffs.
    LDX #$C0
    LDY #$A6
    JSR ENGINE_SCRIPT_LAUNCH_R7_A_PTR_XY_WITH_RESTORE ; Do copy proteccy
    JSR EXIT_STREAM_HEADER_AS_R6_DATA? ; Do.
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Restore and exit.
    INY
    RTS ; Leave.
SUB_COORDS_INIT_AND_LOOP_POSSIBLY_MENU: ; 13:1763, 0x027763
    LDX #$02 ; Seed coords.
    LDY #$19
    STX GFX_COORD_HORIZONTAL_OFFSET
    STY GFX_COORD_VERTICAL_OFFSET
    LDX #$02 ; Seed count/index.
COUNT_POSITIVE: ; 13:176D, 0x02776D
    LDA WRAM_DATA_UNK[3],X ; Load ??
    BEQ VAL_CLEAR ; Clear, goto.
    LDA #$A0
    JSR ENGINE_A_TO_UPDATE_PACKET ; Blank.
    DEC GFX_COORD_VERTICAL_OFFSET ; -= 2
    DEC GFX_COORD_VERTICAL_OFFSET
    DEX ; Count--
    BPL COUNT_POSITIVE ; Positive, loop.
VAL_CLEAR: ; 13:177E, 0x02777E
    DEC GFX_COORD_HORIZONTAL_OFFSET ; --
    SEC ; Prep sub.
    LDA GFX_COORD_VERTICAL_OFFSET ; Load vert.
    SBC #$04 ; -= 0x4
    STA GFX_COORD_VERTICAL_OFFSET ; Store new.
    JSR PTR_SEEDED_UNK_C ; Do ??
    JSR EXIT_STREAM_HEADER_AS_R6_DATA? ; Do file from var.
    LDA #$AC
    LDX #$B7
    STA FPTR_MENU_PRIMARY[2] ; Seed menu master.
    STX FPTR_MENU_PRIMARY+1
    JSR ENGINE_MENU_INIT_MASTER_FULL ; Do full init with it.
    BIT SCRIPT_MENU_STATUS ; Test status.
    BMI STATUS_NEGATIVE ; Negative, goto.
    SEC ; Ret CS. Continue.
    RTS
STATUS_NEGATIVE: ; 13:179E, 0x02779E
    LDA #$FF
    JSR ENGINE_CURSOR_TO_BG_UPDATE_INTO_MENU? ; Set cursor to BG.
    LDX MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load option.
    LDA WRAM_DATA_UNK[3],X ; Load data at.
    STA PARTY/BATTLE_ID?_TODO ; Store to.
    CLC ; Ret CC, chosen?
    RTS
    .db 01 ; Master menu from above.
    .db 03
    .db 00
    .db 02
    .db C0
    .db 3A
    .db 02
    .db 15
    .db 04
    .db 67
SUB_TODO_MENU_SUBY?: ; 13:17B6, 0x0277B6
    JSR PTR_SEEDED_UNK_A ; Do seeded.
    LDX #$FF ; Seed ??
LOOP_X_INDEX: ; 13:17BB, 0x0277BB
    INX ; Index++
    CPX #$03 ; If _ #$03
    BCC VAL_LT_0x3 ; <, goto.
    LDX #$00 ; Seed.
VAL_LT_0x3: ; 13:17C2, 0x0277C2
    JSR LIB_FIND_SLOT_OCCUPIED_AND_BETWEEN_0x1-0x5 ; Do test
    BCS LOOP_X_INDEX ; CS, goto.
    STA PARTY/BATTLE_ID?_TODO ; Store ID.
    STX SLOT/DATA_OFFSET_USE/CURR? ; Store index.
    JSR SUB_GROUPED_A ; Do ??
    JSR UNK_DATA_AS_SUBMENU_TODO ; Do ??
    JSR SCRIPT_SUBMENU_MAIN_FUNCTION_TONAME ; Set coords.
    JSR SEED_MASTER_MENU_A_WITH_FULL_INIT ; Do full with menu.
    LDX SLOT/DATA_OFFSET_USE/CURR? ; Load ??
    LDA #$06 ; Seed ??
    BIT SCRIPT_MENU_STATUS ; Test menu status.
    BVS STATUS_0x40_SET ; Set, goto.
    BMI LOOP_X_INDEX ; If negative, goto.
    BEQ LOOP_X_INDEX ; 0x00, goto.
    JSR UNK_DATA_AS_SUBMENU_TODO ; Do submenu.
    JSR SEED_MASTER_MENU_B_WITH_PARTIAL_INIT ; Do partial init of master.
    BIT SCRIPT_MENU_STATUS ; Test status.
    BVS STATUS_0x40_SET ; If 0x40 set, goto.
    BMI MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED ; If negative, goto.
    LDX SLOT/DATA_OFFSET_USE/CURR? ; Load ??
    JMP VAL_LT_0x3 ; Goto.
STATUS_0x40_SET: ; 13:17F4, 0x0277F4
    SEC
    RTS
MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED: ; 13:17F6, 0x0277F6
    LDA #$FF ; Cursor tile for BG.
    JSR ENGINE_CURSOR_TO_BG_UPDATE_INTO_MENU? ; BG update because going into, don't want to keep cursor sprite.
    LDY MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Stream index.
    LDA [FPTR_MENU_SECONDARY/SUBMENU[2]],Y ; Load from the submenu.
    STA PTR_CREATE_SEED_UNK ; Store to.
    CLC ; Ret CC, into menu alert.
    RTS ; Leave.
UNK_DATA_AS_SUBMENU_TODO: ; 13:1803, 0x027803
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Data from.
    CLC ; Prep add.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Load ??
    ADC #$20 ; Add with.
    STA FPTR_MENU_SECONDARY/SUBMENU[2] ; Store ??
    LDA LIB_BCD/EXTRA_FILE_BCD_B ; Load ??
    ADC #$00 ; Add with.
    STA FPTR_MENU_SECONDARY/SUBMENU+1 ; Store to.
    RTS ; Leave.
STREAM_PTR_AND_R6_UNK_TODO: ; 13:1814, 0x027814
    JSR PTR_SEEDED_UNK_B ; Do ??
    JSR EXIT_STREAM_HEADER_AS_R6_DATA? ; Do.
    SEC ; Prep sub.
    LDA SCRIPT_MAIN_FILE_STREAM_INDEX ; Load ??
    ADC SCRIPT_MAIN_FPTR[2] ; Add with.
    STA FPTR_MENU_SECONDARY/SUBMENU[2] ; Store to submenu.
    LDA #$00 ; Carry prep.
    ADC SCRIPT_MAIN_FPTR+1 ; Add with ??
    STA FPTR_MENU_SECONDARY/SUBMENU+1 ; Store to submenu.
    LDY #$03 ; Move coord.
VAL_LT_0xB: ; 13:1829, 0x027829
    STY GFX_COORD_VERTICAL_OFFSET
    LDY SCRIPT_MAIN_FILE_STREAM_INDEX ; Load ??
    INY ; ++
    STY SCRIPT_MAIN_FILE_STREAM_INDEX ; Store back next.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load data before inc.
    STA PTR_CREATE_SEED_UNK ; Store to.
    BEQ VAL_EQ_0x00 ; == 0, goto.
    LDA #$0C
    STA R_**:$0070 ; Set ??
    LDX #$03
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set H coord.
    JSR SUB_DISPLAY_AND_ROUTINE_HELPER ; Do.
    JSR PTR_AND_BANK_R6_UNK ; Do.
    LDA #$00
    STA R_**:$0070 ; Clear ??
    LDX #$0F
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set H coord.
    LDA #$6F ; Seed 13:186F
    LDX #$B8
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER ; Display.
VAL_EQ_0x00: ; 13:1853, 0x027853
    LDY GFX_COORD_VERTICAL_OFFSET ; Load coord.
    INY ; += 2
    INY
    CPY #$0B ; If _ #$0B
    BCC VAL_LT_0xB ; <, goto.
    LDA #$77 ; Seed master menu.
    LDX #$B8
    STA FPTR_MENU_PRIMARY[2]
    STX FPTR_MENU_PRIMARY+1
    JSR ENGINE_MENU_INIT_MASTER_PARTIAL ; Init partial.
    BIT SCRIPT_MENU_STATUS ; Test status.
    BMI STATUS_MENU_SELECTED ; Selected, goto.
    SEC ; Ret CS, continue.
    RTS
STATUS_MENU_SELECTED: ; 13:186C, 0x02786C
    JMP MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED ; Cursor to BG.
    .db A4 ; PTR to.
    .db 23
    .db 2A
    .db 00
    .db 02
    .db 04
    .db BA
    .db 00
    .db 01
    .db 04
    .db 00
    .db 02
    .db C0
    .db 3A
    .db 02
    .db 03
SCRIPT_TODO: ; 13:187F, 0x02787F
    JSR PTR_SEEDED_UNK_A ; Do ??
    LDA #$D8
    LDX #$B8
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER ; Display it.
    LDX #$F8 ; Seed ??
MENU_STATUS_A_PRESSED: ; 13:188B, 0x02788B
    CLC ; Prep add.
    TXA ; X to A.
    ADC #$08 ; += 0x8
    TAX ; Back to X.
    CPX #$50 ; If _ #$50
    BCC VAL_LT_0x50 ; <, goto.
    LDX #$00 ; Seed error??
VAL_LT_0x50: ; 13:1896, 0x027896
    LDA CURRENT_SAVE_MANIPULATION_PAGE+688,X ; Load value.
    BNE VAL_NONZERO ; != 0, goto.
    LDX #$00 ; Seed index if 0x00. TAX better here. >:)
VAL_NONZERO: ; 13:189D, 0x02789D
    STX SLOT/DATA_OFFSET_USE/CURR? ; Store index.
    JSR SUB_SLOT_TO_SUBMENU_TODO ; Submenu do.
    JSR SCRIPT_SUBMENU_MAIN_FUNCTION_TONAME ; Submenu.
    JSR SEED_MASTER_MENU_A_WITH_FULL_INIT ; Do full menu.
    LDX SLOT/DATA_OFFSET_USE/CURR? ; Load slot.
    LDA #$06 ; Load ??
    BIT SCRIPT_MENU_STATUS ; Test menu with.
    BVS MENU_EXIT_LAYER_RET_CS ; Status, 0x40, goto.
    BMI MENU_STATUS_A_PRESSED ; A pressed, goto.
    BEQ MENU_STATUS_A_PRESSED ; Nothing pressed, goto.
    JSR SUB_SLOT_TO_SUBMENU_TODO ; Do submenu.
    JSR SEED_MASTER_MENU_B_WITH_PARTIAL_INIT ; Do partial.
    BIT SCRIPT_MENU_STATUS ; Test status.
    BVS MENU_EXIT_LAYER_RET_CS ; Set, goto.
    BMI SUBMENU_ACCEPTED_CURSOR_TO_BG ; Negative, goto, accepted.
    LDX SLOT/DATA_OFFSET_USE/CURR? ; Load ??
    JMP VAL_LT_0x50 ; Goto.
MENU_EXIT_LAYER_RET_CS: ; 13:18C5, 0x0278C5
    SEC ; Ret CS, go up menu?
    RTS
SUBMENU_ACCEPTED_CURSOR_TO_BG: ; 13:18C7, 0x0278C7
    JMP MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED ; Goto, write selected to BG.
SUB_SLOT_TO_SUBMENU_TODO: ; 13:18CA, 0x0278CA
    CLC ; Prep add.
    LDA SLOT/DATA_OFFSET_USE/CURR? ; Load ??
    ADC #$B0 ; += 0xB0
    STA FPTR_MENU_SECONDARY/SUBMENU[2] ; Store as submenu L.
    LDA #$00 ; Seed carry add.
    ADC #$76 ; Add with val.
    STA FPTR_MENU_SECONDARY/SUBMENU+1 ; Store as submenu H.
    RTS
    .db 20
    .db 09
    .db 03
    .db D4
    .db E8
    .db E5
    .db A0
    .db C3
    .db EC
    .db EF
    .db F3
    .db E5
    .db F4
    .db 00
SUB_UNK_GROUPS_MANY_CHARS?: ; 13:18E6, 0x0278E6
    JSR PTR_SEEDED_UNK_A ; Do ??
    LDX #$FF ; Seed ??
LOOP_NEXT_INDEX: ; 13:18EB, 0x0278EB
    INX ; ++
    CPX #$03 ; If _ #$03
    BCC LOOP_MENU_UNK ; <, goto.
    LDX #$00 ; Seed ??
LOOP_MENU_UNK: ; 13:18F2, 0x0278F2
    LDA WRAM_ARR_PARTY_CHARACTER_IDS?[6],X ; Load from indexed. Party arr?
    BEQ LOOP_NEXT_INDEX ; == 0, ,goto.
    CMP #$03 ; If _ #$03
    BCS LOOP_NEXT_INDEX ; >=, goto.
    STA PARTY/BATTLE_ID?_TODO ; Store val loaded.
    STX SLOT/DATA_OFFSET_USE/CURR? ; Store offset, too?
    JSR SUB_GROUPED_A ; Do sub, display.
    JSR SUB_GROUPED_B ; Do sub, menu and coords submenu?
    JSR SCRIPT_SUBMENU_MAIN_FUNCTION_TONAME ; Do sub, menu and coords submenu?
    JSR SEED_MASTER_MENU_A_WITH_FULL_INIT ; Seded master menu thingy.
    LDX SLOT/DATA_OFFSET_USE/CURR? ; Load ??
    LDA #$06 ; Load ??
    BIT SCRIPT_MENU_STATUS ; Test status.
    BVS RET_CS ; Set, goto.
    BMI LOOP_NEXT_INDEX ; Negative, goto.
    BEQ LOOP_NEXT_INDEX ; == 0, goto.
    JSR SUB_GROUPED_B ; Do.
    LDY #$01 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    AND #$F0 ; Keep upper.
    BNE UPPER_NONZERO ; != 0, goto.
    JSR SEED_MASTER_MENU_B_WITH_PARTIAL_INIT ; Seed.
    BIT SCRIPT_MENU_STATUS ; Test.
    BVS RET_CS ; 0x40 set, goto.
    BMI STATUS_SELECTED_GOING_INTO_MENU ; 0x80, goto.
UPPER_NONZERO: ; 13:192B, 0x02792B
    LDX SLOT/DATA_OFFSET_USE/CURR? ; Load ??
    JMP LOOP_MENU_UNK ; Goto.
RET_CS: ; 13:1930, 0x027930
    SEC ; Ret CS. TODO meaning.
    RTS
STATUS_SELECTED_GOING_INTO_MENU: ; 13:1932, 0x027932
    JMP MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED ; Goto.
SUB_GROUPED_B: ; 13:1935, 0x027935
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Do sub.
    CLC ; Prep add.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Load ??
    ADC #$30 ; Add with ??
    STA FPTR_MENU_SECONDARY/SUBMENU[2] ; Store as submenu ptr L.
    LDA LIB_BCD/EXTRA_FILE_BCD_B ; Load ??
    ADC #$00 ; Carry add.
    STA FPTR_MENU_SECONDARY/SUBMENU+1 ; Store as submenu ptr H.
    LDX #$00 ; Clear.
    LDY #$00
VAL_LT_0x20: ; 13:1949, 0x027949
    STX SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Store letter index.
    STY SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Store loop index.
    LDA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Load ??
    AND #$07 ; Keep lower.
    TAX ; To X index.
    LDA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Load ??
    LSR A ; >> 3, /8.
    LSR A
    LSR A
    TAY ; To stream index.
    LDA [FPTR_MENU_SECONDARY/SUBMENU[2]],Y ; Load from.
    AND LIB_LUT_BIT_TEST_0x80-0x01,X ; Test bit.
    LDX SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Load index ??
    AND ROM_ARR_DATA_UNK,Y ; And with data for stream slot.
    BEQ STREAM_SLOT_NONE_SET ; Clear, goto.
    CLC ; Prep add.
    LDA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Load ??
    ADC #$C0 ; += 0xC0
    STA CHARACTER_NAMES_ARR[8],X ; Store to.
    INX ; Index++
    CPX #$08 ; If _ #$08
    BCS EXIT_SEED_SUBMENU_FPTR_0x0580 ; >=, goto.
STREAM_SLOT_NONE_SET: ; 13:1971, 0x027971
    LDY SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Load ??
    INY ; ++
    CPY #$20 ; If _ #$20
    BCC VAL_LT_0x20 ; <, goto.
    LDA #$00
INDEX_LT_0x8: ; 13:197A, 0x02797A
    STA CHARACTER_NAMES_ARR[8],X ; Clear ??
    INX ; Index++
    CPX #$08 ; If _ #$08
    BCC INDEX_LT_0x8 ; <, goto.
EXIT_SEED_SUBMENU_FPTR_0x0580: ; 13:1982, 0x027982
    LDA #$80 ; Seed menu fptr 0x0580.
    LDX #$05
    STA FPTR_MENU_SECONDARY/SUBMENU[2]
    STX FPTR_MENU_SECONDARY/SUBMENU+1
    RTS ; Leave.
ROM_ARR_DATA_UNK: ; 13:198B, 0x02798B
    .db 60 ; Data meaning TODO.
    .db E0
    .db A8
    .db 00
SUB_MENU_TO_SOLVE: ; 13:198F, 0x02798F
    JSR PTR_SEEDED_UNK_A ; Do routine.
    LDA #$D1 ; Seed fptr L.
    LDX #$B9 ; fptr H.
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER ; Do display.
    JSR SUB_UNK_SUBMENU_DO ; Do ??
    JSR SCRIPT_SUBMENU_MAIN_FUNCTION_TONAME ; Do coord and display.
    LDA #$DC
    LDX #$B9 ; Seed 13:19DC file.
    JSR REPLACE_MENU_MASTER_PARTIAL_INIT ; Do menu partial.
    BIT SCRIPT_MENU_STATUS ; Test status.
    BMI MENU_OPTION_SELECTED ; Negative, goto.
    SEC ; Ret CS.
    RTS
MENU_OPTION_SELECTED: ; 13:19AC, 0x0279AC
    JMP MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED ; Goto.
SUB_UNK_SUBMENU_DO: ; 13:19AF, 0x0279AF
    LDA CURRENT_SAVE_MANIPULATION_PAGE+541 ; Move ??
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1
    LDX #$00 ; Init count.
VAL_LT_0x8: ; 13:19B6, 0x0279B6
    LDA #$00
    ASL SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Shift ??
    BCC SHIFT_CC ; CC, goto.
    CLC ; Prep add.
    TXA ; X to A.
    ADC #$80 ; += 0x80
SHIFT_CC: ; 13:19C0, 0x0279C0
    STA CHARACTER_NAMES_ARR[8],X ; Store to.
    INX ; Index++
    CPX #$08 ; If _ #$08
    BCC VAL_LT_0x8 ; <,, goto.
    LDA #$80
    LDX #$05 ; Seed submenu 0x0580.
    STA FPTR_MENU_SECONDARY/SUBMENU[2]
    STX FPTR_MENU_SECONDARY/SUBMENU+1
    RTS ; Leave.
    .db 20 ; Fptr to.
    .db 07
    .db 03
    .db FE
    .db D7
    .db E8
    .db E5
    .db F2
    .db E5
    .db A2
    .db 00
    .db 02 ; Fptr to.
    .db 04
    .db 0C
    .db 02
    .db C0
    .db 3A
    .db 06
    .db 05
SCRIPT_MENU_ROUTINE_NAME_PORTION: ; 13:19E4, 0x0279E4
    JSR PTR_SEEDED_UNK_E ; Do ??
    LDA #$B6
    LDX #$BA ; Seed 13:1AB6, after this section.
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER ; Packet.
    JSR ENGINE_CREATE_UPDATE_BUF_INIT_INC? ; Create it.
    LDX #$00 ; Seed index init.
    JSR SUB_PAIRED_UNK ; File and menu.
    JSR SUB_PAIRED_UNK
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM enable.
    LDA #$00
    STA CURRENT_SAVE_MANIPULATION_PAGE+49 ; Clear ??
    STA SLOT/DATA_OFFSET_USE/CURR? ; Clear.
    LDY #$10 ; Index ??
    LDA #$A2 ; Seed Text '?'
WRITE_ARRAYS_WITH_QUESTION_MARKS: ; 13:1A07, 0x027A07
    STA CURRENT_SAVE_MANIPULATION_PAGE+32,Y ; Store ?'s
    DEY ; Index--
    BPL WRITE_ARRAYS_WITH_QUESTION_MARKS ; Positive, goto.
    STA R_**:$00D6 ; Also write ??
    JSR NAME_MENU_HELPER_SPRITE/DISPLAY/CURSOR? ; Do ??
    JSR ENGINE_MENU_INIT_MASTER_FULL ; Menu init.
    JMP MENU_TEST_STATUS ; Goto.
MENU_CONTINUE: ; 13:1A18, 0x027A18
    JSR NAME_MENU_HELPER_SPRITE/DISPLAY/CURSOR? ; Do helper.
    JSR SETTLE_AND_MENU_COORD_SPRITE_HELPER? ; Settle and more.
MENU_TEST_STATUS: ; 13:1A1E, 0x027A1E
    BIT SCRIPT_MENU_STATUS ; Goto.
    BMI MENU_NAME_INPUT_A_PRESS ; Do for buttons.
    BVC MENU_NAME_INPUT_B_PRESS
NAME_INPUT_SELECTED_0x10: ; 13:1A24, 0x027A24
    LDY SLOT/DATA_OFFSET_USE/CURR? ; Otherwise.
    BEQ MENU_CONTINUE ; == 0, goto.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+32,Y ; Load ??
    CMP #$A2 ; If _ #$A2
    BNE VAL_NE_0xA2 ; !=, goto.
    DEY ; Index--
VAL_NE_0xA2: ; 13:1A30, 0x027A30
    LDA #$A2 ; Seed ??
    STY SLOT/DATA_OFFSET_USE/CURR? ; Store index.
    STA CURRENT_SAVE_MANIPULATION_PAGE+32,Y ; Store to wram.
    BNE MENU_CONTINUE ; !=, goto.
MENU_NAME_INPUT_A_PRESS: ; 13:1A39, 0x027A39
    LDY MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load index.
    CPY #$10 ; If _ #$10
    BEQ NAME_INPUT_SELECTED_0x10 ; ==, goto.
    CPY #$26 ; If _ #$26
    BEQ MENU_NAME_INPUT_B_PRESS ; VAL_EQ_0x26
    LDA CHARACTER_NAMES_ARR[8],Y ; Load arr.
    LDY SLOT/DATA_OFFSET_USE/CURR? ; Load index.
    STA CURRENT_SAVE_MANIPULATION_PAGE+32,Y ; Store loaded to arr.
    CPY #$10 ; If _ #$10
    BCS MENU_CONTINUE ; >=, goto.
    INY ; Inex++
    STY SLOT/DATA_OFFSET_USE/CURR? ; Store index.
    BNE MENU_CONTINUE ; != 0, goto. Always taken?
MENU_NAME_INPUT_B_PRESS: ; 13:1A54, 0x027A54
    LDY SLOT/DATA_OFFSET_USE/CURR? ; Load index.
    BEQ MENU_CONTINUE ; == 0, leave.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+32,Y ; Load data.
    CMP #$A2 ; If _ #$A2
    BEQ VAL_EQ_A2 ; ==, goto.
    INY ; Index++
VAL_EQ_A2: ; 13:1A60, 0x027A60
    LDA #$00
    STA CURRENT_SAVE_MANIPULATION_PAGE+32,Y ; Clear value.
    STA R_**:$00D6 ; Clear ??
    LDA #$F0
    STA SPRITE_PAGE+4 ; Set X pos off screen.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; R6 disabled.
    JMP EXIT_STREAM_HEADER_AS_R6_DATA? ; Do.
SUB_PAIRED_UNK: ; 13:1A72, 0x027A72
    LDY #$11 ; Seed count.
COUNT_NONZERO_LOOP: ; 13:1A74, 0x027A74
    LDA DATA_ARR_NAME_INPUT_DATA,X ; Load indexed.
    STA CHARACTER_NAMES_ARR[8],X ; Store to arr.
    INX ; Index++
    DEY ; Count--
    BNE COUNT_NONZERO_LOOP ; != 0, goto.
    LDA #$00 ; Seed clear.
    STA **:$057E,X ; EOF? TODO
    LDY #$05 ; Count.
COUNT_NONZERO: ; 13:1A85, 0x027A85
    STA CHARACTER_NAMES_ARR[8],X ; Clear it.
    INX ; Data++
    DEY ; Count--
    BNE COUNT_NONZERO ; != 0, goto.
    RTS ; Leave.
NAME_MENU_HELPER_SPRITE/DISPLAY/CURSOR?: ; 13:1A8D, 0x027A8D
    LDA #$E5 ; Seed 13:1AE6
    LDX #$BA
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER ; Display.
    LDA #$32
    STA SPRITE_PAGE+4 ; Set Y pos.
    LDA #$01
    STA SPRITE_PAGE+5 ; Set tile.
    LDA #$00
    STA SPRITE_PAGE+6 ; Set attr.
    LDA SLOT/DATA_OFFSET_USE/CURR? ; Load cursor.
    ASL A ; << 3, *8. To tile pos.
    ASL A
    ASL A
    ADC #$48 ; += 0x48
    STA SPRITE_PAGE+7 ; Store to, X pos.
    LDA #$EF
    LDX #$BA ; Seed menu master.
    STA FPTR_MENU_PRIMARY[2]
    STX FPTR_MENU_PRIMARY+1
    RTS ; Leave.
    .db 20 ; File PTR to.
    .db 08
    .db 09
DATA_ARR_NAME_INPUT_DATA: ; 13:1AB9, 0x027AB9
    .db C1 ; Text 'A'
    .db C2
    .db C3
    .db C4
    .db C5
    .db C6
    .db C7
    .db A0
    .db C8
    .db C9
    .db CA
    .db CB
    .db CC
    .db CD
    .db CE ; Text 'N'
    .db A0 ; Text space.
    .db C0 ; Star
    .db C2 ; Text 'B'
    .db E1 ; Text 'a'
    .db E3 ; Text 'c'
    .db EB ; Text 'k'
    .db 01 ; ??
    .db CF ; Text 'O'
    .db D0
    .db D1
    .db D2
    .db D3
    .db D4
    .db D5
    .db A0
    .db D6
    .db D7
    .db D8
    .db D9
    .db DA ; Text 'Z'
    .db AE ; Text period.
    .db A7 ; Text single quote.
    .db A0 ; Space.
    .db C0 ; Star
    .db C5 ; Text 'E'
    .db EE ; Text 'n'
    .db E4 ; Text 'd'
    .db A0 ; Space.
    .db 00 ; EOF????
    .db 20
    .db 09 ; PTR here.
    .db 05
    .db 21
    .db 20
    .db 74
    .db 20
    .db 08
    .db 09
    .db 00
    .db 16
    .db 02
    .db 01
    .db 02
    .db D0
    .db 01
    .db 08
    .db 09
    .db 80
    .db 05
SEED_MASTER_MENU_A_WITH_FULL_INIT: ; 13:1AF9, 0x027AF9
    LDA #$04 ; Seed FPTR 13:1B04
    LDX #$BB
    STA FPTR_MENU_PRIMARY[2] ; Seed FPTR.
    STX FPTR_MENU_PRIMARY+1
    JMP ENGINE_MENU_INIT_MASTER_FULL ; Init this one.
MENU_MASTER_PTR_TO_A: ; 13:1B04, 0x027B04
    .db 01
    .db 01
    .db 00
    .db 00
    .db C5
    .db 3A
    .db 07
    .db 03
    .db D1 ; PTR to data mask/submenu ptr?
    .db F0
SEED_MASTER_MENU_B_WITH_PARTIAL_INIT: ; 13:1B0E, 0x027B0E
    LDA #$19 ; Seed FPTR past rtn.
    LDX #$BB
REPLACE_MENU_MASTER_PARTIAL_INIT: ; 13:1B12, 0x027B12
    STA FPTR_MENU_PRIMARY[2]
    STX FPTR_MENU_PRIMARY+1
    JMP ENGINE_MENU_INIT_MASTER_PARTIAL ; Goto.
MENU_MASTER_PTR_TO_B: ; 13:1B19, 0x027B19
    .db 02
    .db 04
    .db 0C
    .db 02
    .db C8
    .db 3A
    .db 06
    .db 05
SUB_GROUPED_A: ; 13:1B21, 0x027B21
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Do ptr.
    CLC ; Prep add.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Load ??
    ADC #$38 ; Add with.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Store to.
    LDA LIB_BCD/EXTRA_FILE_BCD_B ; Load ??
    ADC #$00 ; Carry add.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK+1 ; Store to.
    LDA #$07 ; Seed val ??
    LDX #$09 ; Seed X coord.
    LDY #$03 ; Seed Y coord.
    STA R_**:$0070 ; Set ??
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set coords.
    STY GFX_COORD_VERTICAL_OFFSET
    JMP ENGINE_CREATE_UPDATE_BUF_INIT_INC? ; Update, display?
SCRIPT_SUBMENU_MAIN_FUNCTION_TONAME: ; 13:1B40, 0x027B40
    LDA #$0B ; Seed ??
    LDX #$07 ; Coord X.
    LDY #$05 ; Coord V.
    STA R_**:$0070 ; Set ??
    STY GFX_COORD_VERTICAL_OFFSET ; Set coord.
    LDY #$00 ; Stream index.
VAL_LT_0x8: ; 13:1B4C, 0x027B4C
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set coord.
    STY MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Store index.
    LDA [FPTR_MENU_SECONDARY/SUBMENU[2]],Y ; Load from file.
    STA PTR_CREATE_SEED_UNK ; Store to.
    JSR SUB_DISPLAY_AND_ROUTINE_HELPER ; Do sub with.
    LDX #$13 ; Seed ??
    CPX GFX_COORD_HORIZONTAL_OFFSET ; If _ var
    BNE VAL_NE_0x13 ; !=, goto.
    INC GFX_COORD_VERTICAL_OFFSET ; ++ coords.
    INC GFX_COORD_VERTICAL_OFFSET
    LDX #$07 ; Seed ??
VAL_NE_0x13: ; 13:1B63, 0x027B63
    LDY MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    INY ; ++
    CPY #$08 ; If _ #$08
    BCC VAL_LT_0x8 ; <, goto.
    LDA #$00
    STA R_**:$0070 ; Clear ??
    RTS ; Leave.
SCRIPT_TODO_UNK: ; 13:1B6F, 0x027B6F
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Do ptr.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM write.
    LDA #$04
    STA WRAM_6D00_TRIPLETS_UNK[3] ; Set ??
    CLC ; Prep add.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Load ??
    ADC #$38 ; += 0x38.
    STA WRAM_6D00_TRIPLETS_UNK+1 ; Store to.
    LDA LIB_BCD/EXTRA_FILE_BCD_B ; Load ??
    ADC #$00 ; Carry add.
    STA WRAM_6D00_TRIPLETS_UNK+2 ; Store to.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable WRAM.
PTR_MOVE_TO_UNK_ARR_WRAM: ; 13:1B8C, 0x027B8C
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Get ptr.
    LDY #$00 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from stream.
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2] ; Move ptr.
    INY ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM writable.
    LDY #$00 ; Stream index reset.
A_NONZERO: ; 13:1B9F, 0x027B9F
    LDA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; Load from stream.
    STA WRAM_PAGE_UNK_WHOLE_PAGE_WRITTEN_WHEN_THIS_VAR_FOUND[8],Y ; Store to ??
    INY ; Stream++
    CMP #$00 ; If A _ #$00
    BNE A_NONZERO ; != 0, goto. EOF.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Do disabled.
    JMP EXIT_STREAM_HEADER_AS_R6_DATA? ; Exit.
SUB_DISPLAY_AND_ROUTINE_HELPER: ; 13:1BAF, 0x027BAF
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Do R6 and base from var.
    LDY #$00 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Move fptr L.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    INY ; Stream++
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Move fptr H.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK+1
    JSR ENGINE_CREATE_UPDATE_BUF_INIT_INC? ; Do update.
    JMP EXIT_STREAM_HEADER_AS_R6_DATA? ; Exit.
PTR_AND_BANK_R6_UNK: ; 13:1BC3, 0x027BC3
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Do ptr.
    LDY #$06 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Move ptr? ??
    STA PAIR_UNK_LEVEL_UP_RELATED?[2]
    INY
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y
    STA PAIR_UNK_LEVEL_UP_RELATED?+1
    JMP EXIT_STREAM_HEADER_AS_R6_DATA? ; Exit.
R6_AND_FILE_MANIP_UNK: ; 13:1BD4, 0x027BD4
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Do ptrs.
    LDY #$02 ; R6 index.
    JSR MISC_FILE_MANIP_UNK ; Do ??
    JMP EXIT_STREAM_HEADER_AS_R6_DATA? ; Goto.
R6_BANK_AND_SETUP_PTR_9800: ; 13:1BDF, 0x027BDF
    JSR VARIABLE_LOAD_TO_OFFSET_AND_R6_TO_0x00 ; Do.
OFFSET_PTR_0x9800: ; 13:1BE2, 0x027BE2
    CLC ; Prep add.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Base at $9800
    ADC #$00
    STA LIB_BCD/EXTRA_FILE_BCD_A
    LDA LIB_BCD/EXTRA_FILE_BCD_B
    ADC #$98
    STA LIB_BCD/EXTRA_FILE_BCD_B
    RTS ; Leave.
VARIABLE_LOAD_TO_OFFSET_AND_R6_TO_0x00: ; 13:1BF0, 0x027BF0
    LDA PTR_CREATE_SEED_UNK ; Move.
VARIABLE_TO_OFFSET_AND_R6_TO_0x00: ; 13:1BF2, 0x027BF2
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Alt entry, store seeded.
    LDA #$00 ; Seed clear.
    ASL LIB_BCD/EXTRA_FILE_BCD_A ; << 1
    ROL A ; Into A.
    ASL LIB_BCD/EXTRA_FILE_BCD_A ; 2x
    ROL A
    ASL LIB_BCD/EXTRA_FILE_BCD_A ; 3x
    ROL A
    STA LIB_BCD/EXTRA_FILE_BCD_B ; Store to result.
    JMP ENGINE_R6_TO_BANK_0x00_THING_1 ; Do R6 to 0x00, lave.
SYNC_WAIT_ANY_PRESS: ; 13:1C04, 0x027C04
    JSR WAIT_ANY_BUTTONS_PRESSED_RET_PRESSED ; Wait pressed.
    JMP PTR_SEEDED_UNK_F_WRAM ; Goto.
PACKETY_HELPER_SAVE_AND_RESTORE_CREATION: ; 13:1C0A, 0x027C0A
    LDA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Save file to stack.
    PHA
    LDA ARG/PTR_L
    PHA
    JSR PTR_SEEDED_UNK_K ; Do ??
    PLA
    STA ARG/PTR_L ; Restore FPTR.
    PLA
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    LDA #$00
    STA R_**:$002D ; Clear ??
    LDX #$08
    LDY #$13
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set coords.
    STY GFX_COORD_VERTICAL_OFFSET
    JMP EXIT_STREAM_HEADER_AS_R6_DATA? ; Goto.
SUB_COORD_SAVE_AND_DO_UNK: ; 13:1C28, 0x027C28
    LDA GFX_COORD_HORIZONTAL_OFFSET ; Save pos.
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    JSR PTR_SEEDED_UNK_H_GFX_UPDATE ; Create GFX?
    PLA
    STA GFX_COORD_VERTICAL_OFFSET ; Restore coords.
    PLA
    STA GFX_COORD_HORIZONTAL_OFFSET
    JMP EXIT_STREAM_HEADER_AS_R6_DATA? ; Goto.
SUB_TODO: ; 13:1C3A, 0x027C3A
    LDA LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Load.
    AND #$3F ; Keep lower.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+3 ; To.
    LDA LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Load.
    AND #$C0 ; Keep upper.
    ASL A ; Shift off.
    ROL A ; Rotate into bottom two.
    ROL A
    ADC #$28 ; += 0x28, 0x28-0x2B.
    STA LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Store it.
    LDA PTR_CREATE_SEED_UNK ; Load ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do sub.
    BCS RTS ; CS, leave.
    TYA ; Y to A.
    ADC #$20 ; += 0x20
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+2 ; Store to.
    BCC ADD_NO_OVERFLOW_EXTEND ; No overflow, extend.
RTS: ; 13:1C59, 0x027C59
    RTS ; Leave.
SCRIPT_ENTRY_CLEAR_UNK_AND_MORE: ; 13:1C5A, 0x027C5A
    LDA #$00
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+3 ; Clear ??
ADD_NO_OVERFLOW_EXTEND: ; 13:1C5E, 0x027C5E
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Do sub with ptr.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Seed move ??
    LDX LIB_BCD/EXTRA_FILE_BCD_B
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8] ; To pos.
    STX RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1
    LDY LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Load file index.
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    JSR VARIABLE_TO_OFFSET_AND_R6_TO_0x00 ; Do seeded.
    JSR OFFSET_PTR_0x9800 ; Do ??
    LDY #$03 ; Stream index.
    LDA [LIB_BCD/EXTRA_FILE_BCD_A],Y ; Load from file.
    AND #$3F ; Keep lower.
    STA LIB_BCD/EXTRA_FILE_D ; Store.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Now writeable.
    LDX LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Load index.
    LDA ROM_DATA_USE_UNK,X ; Load ??
    BMI VALUE_NEGATIVE ; Negative, goto.
    TAY ; A to Y.
    SEC ; Prep sub.
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    SBC LIB_BCD/EXTRA_FILE_D ; Sub with.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    INY ; Stream++
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    SBC #$00 ; Carry sub.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    DEY ; Stream--
    CLC ; Prep add.
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    ADC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+3 ; Add with.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store back.
    INY ; Stream++
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    ADC #$00 ; Carry add.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    JMP EXIT_UNK ; Goto.
VALUE_NEGATIVE: ; 13:1CA6, 0x027CA6
    LDY #$02 ; Stream index.
    LDA LIB_BCD/EXTRA_FILE_D ; Load ??
    ASL A ; << 1, *2.
    EOR #$FF ; Invert.
    AND [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Mask with file.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    LDA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+3 ; Load ??
    ASL A ; << 1, *2.
    ORA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Set bits with file.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store back to file.
EXIT_UNK: ; 13:1CB8, 0x027CB8
    LDA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+3 ; Load ??
    BEQ VAL_EQ_0x00 ; == 0, goto.
    LDY RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+2 ; Stream index from.
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
ROM_DATA_USE_UNK: ; 13:1CC0, 0x027CC0
    TAX ; To X index.
    LDY LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Load file index.
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    BNE VAL_NONZERO
    LDY RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+2 ; Load file index.
    BNE VAL_NONZERO_B ; != 0, goto.
VAL_LT_0x28: ; 13:1CCB, 0x027CCB
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    DEY ; Stream--
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file, moved down.
    INY ; Stream++
VAL_NONZERO_B: ; 13:1CD1, 0x027CD1
    INY ; Stream++
    CPY #$28 ; If _ #$28
    BCC VAL_LT_0x28 ; <, goto.
    DEY ; Y--
    LDA #$00 ; Seed clear.
    BEQ SEED_0x00 ; == 0, goto.
VAL_NONZERO: ; 13:1CDB, 0x027CDB
    LDY RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+2 ; Load stream index.
SEED_0x00: ; 13:1CDD, 0x027CDD
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    TXA ; X to A.
VAL_EQ_0x00: ; 13:1CE0, 0x027CE0
    LDY LIB_BCD2/EXTRA_FILE_STREAM_INDEX ; Load stream index.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    CLC ; Ret CC.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable and abuse RTS CC.
    .db 07
    .db 09
    .db 09
    .db FF
ROUTINE_LAUNCHER_0xE: ; 13:1CEC, 0x027CEC
    LDA SWITCH_INIT_PORTION? ; Load.
    ASL A ; *2.
    TAX ; To X.
    LDA #$00
    STA SWITCH_INIT_PORTION? ; Clear, not again.
    LDA RTN_TABLE_H,X ; Move routine.
    PHA
    LDA RTN_TABLE_L,X
    PHA
    RTS ; Run it.
RTN_TABLE_L: ; 13:1CFD, 0x027CFD
    LOW(1F:0DDB) ; Rtn 0x00
RTN_TABLE_H: ; 13:1CFE, 0x027CFE
    HIGH(1F:0DDB) ; Palette fade out.
    LOW(13:1D0C) ; Rtn 0x01
    HIGH(13:1D0C) ; Palette fade out with flag unk.
    LOW(13:1D14) ; Rtn 0x02
    HIGH(13:1D14) ; Game stuff, can lock up script with copy protection.
    LOW(13:1D30) ; Rtn 0x03
    HIGH(13:1D30) ; Palette color thingy.
    LOW(13:1D5B) ; Rtn 0x04
    HIGH(13:1D5B) ; Long.
    LOW(13:1DD8) ; Rtn 0x05
    HIGH(13:1DD8) ; A bit. Sound, objs, updates.
    LOW(13:1D33) ; Rtn 0x06
    HIGH(13:1D33) ; Palette colors and ??
    LOW(13:1E0E) ; Rtn 0x07
    HIGH(13:1E0E) ; No music, delays, fade, do more.
PALETTE_FADE_WITH_??: ; 13:1D0D, 0x027D0D
    LDA #$08 ; Set ??
    STA SOUND_EFFECT_REQUEST_ARRAY[5]
    JMP ENGINE_PALETTE_FADE_OUT
    LDA #$10
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Set sound effect.
    LDA #$34 ; Palette data.
    JSR PALETTE_TO_COLOR_A_AND_FORWARDED ; Do.
    LDA COPY_PROTECTION_VAL
    BEQ VAL_EQ_0x00 ; == 0, goto. Is okay.
    LDA #$19 ; Launch 19:01F7, mwahah. Copy protect hold routine.
    LDX #$F7
    LDY #$A1
    JSR ENGINE_SCRIPT_LAUNCH_R7_A_PTR_XY_WITH_RESTORE ; Launch it.
VAL_EQ_0x00: ; 13:1D2C, 0x027D2C
    LDX #$3C
    JMP ENGINE_DELAY_X_FRAMES ; Engine delay, leave.
    JSR SCRIPT_PALETTE_COLOR_AND_SFX_TODO ; Do ??
SCRIPT_SET_??_PALETTE_FADE_OUT: ; 13:1D34, 0x027D34
    LDA #$20
    STA FIRST_LAUNCHER_HOLD_FLAG? ; Set ??
    JMP ENGINE_PALETTE_FADE_OUT ; Palette fade out.
SCRIPT_PALETTE_COLOR_AND_SFX_TODO: ; 13:1D3B, 0x027D3B
    JSR ENGINE_PALETTE_COMMIT_TO_SCRIPT ; To target.
    LDA #$02
    STA SOUND_EFFECT_REQUEST_ARRAY[5] ; Set SFX.
    LDA #$14 ; Seed.
LOOP_COUNT: ; 13:1D45, 0x027D45
    PHA ; Save todo count.
    LDA #$34
    JSR ENGINE_COLOR_TO_A_PASSED ; Color write.
    LDA #$38
    JSR ENGINE_COLOR_TO_A_PASSED
    LDA #$30
    JSR ENGINE_COLOR_TO_A_PASSED
    PLA ; Pull count.
    SEC ; Prep sub.
    SBC #$01 ; Sub with.
    BNE LOOP_COUNT ; != 0, loop.
    RTS
    LDA #$09
    STA SOUND_EFFECT_REQUEST_ARRAY[5] ; Set ??
    LDA #$11
    JSR PALETTE_TO_COLOR_A_AND_FORWARDED ; Palette to color.
    JSR SETTLE_SPRITES_OFFSCREEN/CLEAR_OBJ_EXTRA_MEMORY ; No sprites.
    JSR ENGINE_HELPER_SETTLE_CLEAR_NMI_AND_TO_MAIN_SCREEN ; Do.
    LDA #$5D
    LDX #$02 ; Set GFX.
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    JSR PPU_READ_INTO_$0110_HELPER_LOOP_UNK ; Load.
    LDA #$5C
    LDX #$02 ; Set GFX.
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    LDA #$1F
    LDX #$BE ; Set PTR $BE1F, 13:
    STA LIB_BCD/EXTRA_FILE_BCD_A
    STX LIB_BCD/EXTRA_FILE_BCD_B
    JSR ARR_MAKE_UNK ; Do ??
    LDA #$2F
    LDX #$BE ; Set PTR, $BE2F, 13:
    JSR ENGINE_SETTLE_AND_PALETTE_FROM_PTR ; Set ??
    LDY #$16 ; Loop count.
COUNT_NONZERO: ; 13:1D91, 0x027D91
    TYA ; To A.
    PHA ; Save it.
    LDX #$08 ; Index.
INDEX_LT_0x28: ; 13:1D95, 0x027D95
    JSR ENGINE_SETTLE_ALL_UPDATES?
    LDA #$01
    STA OBJ?_BYTE_0x5_BYTE,X ; Set ??
    LDA OBJ?_BYTE_0x3_UNK,X ; Load.
    AND #$1F ; Keep lower.
    BNE LOWER_NONZERO ; != 0, goto.
    LDA #$E8
    LDY #$FF ; Seed ??
    BNE PTR_SUB_0x18 ; Always taken, goto.
LOWER_NONZERO: ; 13:1DAA, 0x027DAA
    LDA #$08 ; Val add.
    LDY #$00
PTR_SUB_0x18: ; 13:1DAE, 0x027DAE
    CLC ; Prep add.
    ADC OBJ?_PTR?[2],X ; Add A to.
    STA OBJ?_PTR?[2],X ; Store result.
    TYA ; Y val to A.
    ADC OBJ?_PTR?+1,X ; Add A to.
    STA OBJ?_PTR?+1,X ; Store carry result.
    CLC ; Prep add.
    TXA ; Index to A.
    ADC #$08 ; Index mod, goto.
    TAX ; Val to X.
    CPX #$28 ; If _ #$28
    BCC INDEX_LT_0x28 ; <, goto.
    LDA #$08
    STA NMI_FLAG_EXECUTE_UPDATE_BUF_AND_MORE_TODO ; Set flag ??
    PLA ; Pull A.
    TAY ; To Y.
    DEY ; --
    BNE COUNT_NONZERO ; != 0, goto.
    JSR SETTLE_SPRITES_OFFSCREEN/CLEAR_OBJ_EXTRA_MEMORY ; Do.
    JSR ENGINE_PALETTE_FADE_OUT ; Fade out.
    LDX #$5A
    JMP ENGINE_DELAY_X_FRAMES ; Abuse RTS.
    LDA #$11 ; Seed color decently blue.
    JSR ENGINE_BG_COLOR_A ; BG to.
    LDA #$03
    STA SOUND_EFFECT_REQUEST_ARRAY[5] ; Set ??
    JSR ENGINE_0x300_OBJECTS_UNK? ; Do OBJS?
    LDX #$08 ; Index.
    LDY #$07 ; Data index/loop.
DATA_POSITIVE: ; 13:1DEA, 0x027DEA
    LDA ROM_DATA_LUT_UNK,Y ; Move data.
    STA OBJ?_BYTE_0x5_BYTE,X
    DEY ; Data--
    LDA ROM_DATA_LUT_UNK,Y ; Move data.
    STA OBJ?_BYTE_0x4_UNK,X
    CLC ; Prep add.
    TXA ; Index to A.
    ADC #$08 ; Add to X index.
    TAX ; Back to X.
    DEY ; Data--
    BPL DATA_POSITIVE ; Positive, loop.
    JSR ENGINE_HELPER_R6_0x14
    JSR $9641 ; Do ??
    LDA #$11
    JSR ENGINE_ALL_COLOR_TO_A ; Do.
    LDX #$5A
    JMP ENGINE_DELAY_X_FRAMES ; Delay, abuse RTS.
    JSR SCRIPT_SET_??_PALETTE_FADE_OUT ; Do.
    LDA #$FF
    JSR SOUND_ASSIGN_NEW_MAIN_SONG ; No song.
    LDX #$5A
    JSR ENGINE_DELAY_X_FRAMES ; Delay frames.
    JMP ENGINE_IDK ; Goto.
    RTS ; Unneeded RTS, Lol.
    .db E0
    .db 40
    .db 18
    .db 68
    .db C8
    .db 40
    .db 00
    .db 58
    .db B0
    .db 40
    .db 08
    .db 60
    .db 98
    .db 40
    .db 10
    .db 0F
    .db 22
    .db 20
    .db 11
    .db 0F
    .db 10
    .db 1A
    .db 11
    .db 0F
    .db 30
    .db 00
    .db 11
    .db 0F
    .db 00
    .db 10
    .db 30
    .db 0F
    .db 0F
    .db 01
    .db 31
    .db 0F
    .db 0F
    .db 13
    .db 32
    .db 0F
    .db 0F
    .db 22
    .db 32
    .db 0F
    .db 0F
    .db 11
    .db 32
ROM_DATA_LUT_UNK: ; 13:1E4F, 0x027E4F
    .db FE ; -2
    .db FF ; -2
    .db 02 ; +2
    .db FF ; -1
    .db FF ; +1
    .db FE ; -2
    .db 01 ; +1
    .db FE ; -2
SCRIPT_HELP_SAVE_GAME_FILE: ; 13:1E57, 0x027E57
    LDA SAVE_SLOT_DATA_CHECKSUM_ADJUST_A ; Load stored.
    JSR SAVEGAME_INIT_BASE_FPTR_FOR_FILE_A ; Make ptrs.
    JSR CHECKSUM_SAVE_MANIP_PAGE ; Do checksum.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Enable.
    SEC ; Prep sub.
    LDY #$00 ; Reset stream.
    LDA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; Load 0x7400
    SBC LIB_BCD/EXTRA_FILE_BCD_A ; Sub with.
    STA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; Store back to.
    INY ; Stream++
    LDA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; 2x
    SBC LIB_BCD/EXTRA_FILE_BCD_B ; Sub with.
    STA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; Store back to.
    LDX #$03 ; Pages loop count.
LOOP_NEXT_PAGE: ; 13:1E75, 0x027E75
    LDY #$00 ; Seed stream index.
STREAM_NONZERO: ; 13:1E77, 0x027E77
    LDA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; Load from mod page.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to slot.
    INY ; Stream++
    BNE STREAM_NONZERO ; != 0, goto.
    INC SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Inc PTR H.
    INC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1
    DEX ; Loops--
    BNE LOOP_NEXT_PAGE ; != 0, goto.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Leave, no writes.
LOAD_GAME_A_AND_CHECKSUM: ; 13:1E88, 0x027E88
    JSR SAVEGAME_INIT_BASE_FPTR_FOR_FILE_A ; Set up ptr for file.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Enable WRAM writes.
    LDX #$03 ; Page count for slot size.
LOOP_PAGES: ; 13:1E90, 0x027E90
    LDY #$00 ; Stream index.
MOVE_PAGE_DATA: ; 13:1E92, 0x027E92
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Take game file data.
    STA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; Store to mod page.
    INY ; Stream++
    BNE MOVE_PAGE_DATA ; != 0, loop.
    INC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1 ; Inc PTR H for both ptrs.
    INC SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1
    DEX ; X--
    BNE LOOP_PAGES ; != 0, goto.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; No more WRAM writes.
    JSR CHECKSUM_SAVE_MANIP_PAGE ; Check check it, yeah.
    LDA SAVE_SLOT_DATA_CHECKSUM_ADJUST_A ; Load save slot data.
    AND #$F0 ; Keep upper.
    CMP #$B0 ; If _ #$B0
    BNE EXIT_FAIL_DIRECT ; !=, goto. TODO: Carry matters?
    LDA SAVE_SLOT_DATA_CHECKSUM_ADJUST_B ; Load other.
    CMP #$E9 ; If _ #$E9
    BNE EXIT_FAIL_DIRECT ; !=, goto.
    LDA LIB_BCD/EXTRA_FILE_BCD_A ; Load slot value added up.
    ORA LIB_BCD/EXTRA_FILE_BCD_B ; Combine with other bits. == 0, pass exit. Else, failed.
EXIT_FAIL_DIRECT: ; 13:1EBA, 0x027EBA
    RTS
SAVEGAME_INIT_BASE_FPTR_FOR_FILE_A: ; 13:1EBB, 0x027EBB
    AND #$07 ; Keep lower bits, index.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1 ; Store to.
    ASL A ; << 1, *2. CC now.
    ADC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1 ; Add with, *3. Slot size.
    ADC #$77 ; Addr + 0x7700, base of saved files.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1 ; Store ptr H, 0x77/0x7A/0x7D.
    LDA #$00
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8] ; Clear addr L.
SAVEGAME_INIT_MOD_PAGE_PTR: ; 13:1ECA, 0x027ECA
    LDA #$00 ; Set FPTR 0x7400
    LDX #$74
    STA SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]
    STX SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1
    RTS ; Leave.
CHECKSUM_SAVE_MANIP_PAGE: ; 13:1ED3, 0x027ED3
    JSR SAVEGAME_INIT_MOD_PAGE_PTR ; Reset.
    LDA #$00
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Clear checksum.
    STA LIB_BCD/EXTRA_FILE_BCD_B
    LDX #$03 ; Pages to add together count.
LOOP_ALL_PAGES: ; 13:1EDE, 0x027EDE
    LDY #$00 ; Stream index reset.
LOOP_PAGE_STREAM: ; 13:1EE0, 0x027EE0
    CLC ; Prep add.
    LDA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; Load from file.
    ADC LIB_BCD/EXTRA_FILE_BCD_A ; Add with.
    STA LIB_BCD/EXTRA_FILE_BCD_A ; Store back.
    INY ; Stream++
    LDA [SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER[2]],Y ; Load from file.
    ADC LIB_BCD/EXTRA_FILE_BCD_B ; Add with.
    STA LIB_BCD/EXTRA_FILE_BCD_B ; Store to.
    INY ; Stream++
    BNE LOOP_PAGE_STREAM ; != 0, loop all stream.
    INC SAVE_GAME_MOD_PAGE_PTR/MATH_HELPER+1 ; Inc PTR H.
    DEX ; Pages--
    BNE LOOP_ALL_PAGES ; != 0, goto.
    JMP SAVEGAME_INIT_MOD_PAGE_PTR ; Reset, abuse RTS.
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
