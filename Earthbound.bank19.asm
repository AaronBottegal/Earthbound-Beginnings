SOUND_EFFECT_PLAY_UNK: ; 13:0000, 0x026000
    LDA #$05
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Request cursor movement sound.
RTN_0x3: ; 13:0005, 0x026005
    LDA CURRENT_SAVE_MANIPULATION_PAGE+542 ; Load ??
    STA BCD/MODULO/DIGITS_USE_A ; Store ??
    LDY #$F0 ; Seed index ??
VAL_LT_0xF8: ; 13:000C, 0x02600C
    LDA #$A5 ; Val ??
    LSR BCD/MODULO/DIGITS_USE_A ; >> 1
    BCC SHIFT_CC ; CC, goto.
    LDA #$96 ; Seed val ??
SHIFT_CC: ; 13:0014, 0x026014
    STA STREAM_INDEXES_ARR_UNK[24],Y ; Val ??
    INY ; Index++
    CPY #$F8 ; If _ #$F8
    BCC VAL_LT_0xF8 ; <, goto.
    LDA #$00
    STA STREAM_INDEXES_ARR_UNK[24],Y ; Clear ??
VAL_GTE_0x4: ; 13:0021, 0x026021
    LDX #$00 ; Val ??
VAL_LT_0x4: ; 13:0023, 0x026023
    JSR TEST_SAVE_INDEX_X_CC_0x1-0x5 ; Do ??
    BCS TO_NEXT_X_OBJ_FAST ; Ret CS, goto.
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Do ptr.
    TXA ; X to A.
    PHA ; Save it.
    LDY #$3F ; Stream index reset.
Y_POSITIVE: ; 13:002F, 0x02602F
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from stream.
    STA STREAM_INDEXES_ARR_UNK[24],Y ; Store to page at index.
    DEY ; Y--
    BPL Y_POSITIVE ; Positive, goto.
    LDX #$80 ; Val ??
    LDY #$28 ; Index ??
VAL_LT_0x2C: ; 13:003B, 0x02603B
    LDA STREAM_INDEXES_ARR_UNK[24],Y ; Load ??
    STA PTR_CREATE_SEED_UNK ; Store to.
    JSR SUB_PAGE_AND_FILE_MOVE_UNK ; Do ??
    INY ; Stream++
    CPY #$2C ; If _ #$2C
    BCC VAL_LT_0x2C ; <, goto.
    JSR PTR_SEEDED_UNK_I ; Do ??
    LDA #$F5
    LDX #$A0 ; Seed ptr.
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER ; Do.
    LDA #$C0
    STA PTR_CREATE_SEED_UNK ; Set ??
    JSR PACKETER_UPDATE_IDFK ; Do ??
    LDA #$19
    LDX #$A1 ; Seed FPTR.
    STA FPTR_MENU_MASTER[2]
    STX FPTR_MENU_MASTER+1
    JSR ENGINE_MENU_INIT_MASTER_FULL ; Do.
LOOPER: ; 13:0064, 0x026064
    BIT SCRIPT_MENU_STATUS ; Test.
    BVS BIT_0x40_SET ; 0x40 set, goto.
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    BEQ TO_NEXT_X_OBJ_STACK ; == 0, goto.
    JSR PACKETER_UPDATE_IDFK ; Packeter.
    BCS COORDS_SET ; CS, goto.
    JSR PACKETER_UPDATE_IDFK ; Run again.
COORDS_SET: ; 13:0074, 0x026074
    LDX #$0A ; Set coords.
    LDY #$03
    STX GFX_COORD_HORIZONTAL_OFFSET
    STY GFX_COORD_VERTICAL_OFFSET
    JSR SETTLE_AND_SPRITES_TO_COORD?_IDFK ; Do.
    JMP LOOPER ; Goto.
TO_NEXT_X_OBJ_STACK: ; 13:0082, 0x026082
    PLA ; Restore X.
    TAX
TO_NEXT_X_OBJ_FAST: ; 13:0084, 0x026084
    INX ; X += 0x1
    CPX #$04 ; If _ #$04
    BCC VAL_LT_0x4 ; <, goto.
    BCS VAL_GTE_0x4 ; >=, goto, always taken.
BIT_0x40_SET: ; 13:008B, 0x02608B
    PLA ; Pull A.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Do.
SUB_PAGE_AND_FILE_MOVE_UNK: ; 13:008F, 0x02608F
    TYA ; Save Y and X.
    PHA
    TXA
    PHA
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Do.
    LDY #$00 ; Stream reset.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from file.
    STA SAVE_GAME_MOD_PAGE_PTR[2] ; Store PTR L.
    INY ; Stream++
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from file.
    STA SAVE_GAME_MOD_PAGE_PTR+1 ; Store PTR H.
    PLA ; '
    TAX ; Restore X, page index.
    LDY #$00 ; Stream reset.
LT_0x10: ; 13:00A5, 0x0260A5
    LDA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; Load from file.
    STA STREAM_INDEXES_ARR_UNK[24],X ; Store to page.
    INX ; Index++
    INY ; Index++
    CPY #$10 ; If _ #$10
    BCC LT_0x10 ; <, goto.
    PLA
    TAY ; Restore Y.
    RTS
PACKETER_UPDATE_IDFK: ; 13:00B3, 0x0260B3
    LDX #$40
X_LT_0x80: ; 13:00B5, 0x0260B5
    STX RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8] ; Set ??
    JSR SUB_PTR_SEED_TO_STREAM_INDEX_AND_BIT_TO_TEST ; Do ?? <<<<<<<<<<<<<<<<<<
    LDX RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8] ; Load ??
    AND STREAM_INDEXES_ARR_UNK[24],Y ; Test with.
    BEQ VAL_EQ_0x00 ; == 0, goto.
    JSR SUB_PAGE_AND_FILE_MOVE_UNK ; Do ??
VAL_EQ_0x00: ; 13:00C4, 0x0260C4
    INC PTR_CREATE_SEED_UNK ; +
    BNE VAL_NONZERO ; != 0, goto.
    LDA #$C0
    STA PTR_CREATE_SEED_UNK ; Set ??
    CPX #$41 ; If _ #$41
    BCS VAL_GT_0x41 ; >=, goto.
    RTS ; Leave.
X_LT_0x80: ; 13:00D1, 0x0260D1
    LDA #$00
    STA STREAM_INDEXES_ARR_UNK[24],X ; Clear page.
    CLC ; Prep add.
    TXA ; Index to A.
    ADC #$10 ; += 0x10
    TAX ; To X index.
VAL_GT_0x41: ; 13:00DB, 0x0260DB
    CPX #$80 ; If _ #$80
    BCC X_LT_0x80 ; <, goto.
    BCS PACKETER_DATA_SEEDED ; >=, goto.
VAL_NONZERO: ; 13:00E1, 0x0260E1
    CPX #$80 ; If _ #$80
    BCC X_LT_0x80 ; <, goto.
PACKETER_DATA_SEEDED: ; 13:00E5, 0x0260E5
    LDA #$FE
    LDX #$A0 ; Seed ptr.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    STX FPTR_PACKET_CREATION/PTR_H_FILE_IDK+1
CREATE_PACKETER: ; 13:00ED, 0x0260ED
    JSR ENGINE_CREATE_UPDATE_BUF_INIT_DEC? ; Create.
    CMP #$00 ; If _ #$00
    BNE CREATE_PACKETER ; != 0, goto.
    RTS ; Leave.
    .db 20 ; File start, update, packet.
    .db 0B
    .db 03
    .db 23
    .db 38
    .db 06
    .db 00
    .db 07
    .db 00
    .db 20
    .db 13
    .db 05
    .db 23
    .db 40
    .db 06
    .db 00
    .db 0B
    .db 01
    .db 23
    .db 50
    .db 06
    .db 00
    .db 0B
    .db 01
    .db 23
    .db 60
    .db 06
    .db 00
    .db 0B
    .db 01
    .db 23
    .db 70
    .db 06
    .db 00
    .db 0B
    .db 00
    .db 02
    .db 01
    .db 09
    .db 00
    .db C5
    .db 3A
    .db 0A
    .db 03
    .db D1
    .db F0
SCRIPT_PHONE_RELATED?_TODO: ; 13:0123, 0x026123
    LDA #$80 ; Val for setting, too. Nice trick.
    BIT SCRIPT_SPECIAL_EVENT_MASK? ; Test ??
    BNE RTS ; Was set, leave.
    LDX INP_COUNT_UNK_C ; Load ??
    LDY INP_COUNT_UNK_B
    CPX #$06 ; If _ #$06
    BCC RTS ; <, goto.
    CPY #$90 ; If _ #$90
    BCC RTS ; << leave.
    ORA SCRIPT_SPECIAL_EVENT_MASK? ; Set bit tested.
    STA SCRIPT_SPECIAL_EVENT_MASK? ; Store back.
    LDA #$2F ; Val ??
    JSR ENGINE_MAIN_SONG_REPLACE_AND_THEN_RESTORE_MAIN_SONG? ; Song replace, phone sound.
    LDX #$7C
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ?? <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    LDX #$7E
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDX #$80
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDA #$37
    STA ROUTINE_CONTINUE_FLAG? ; Set ??
    JSR STREAMS_MULTIMENUS_UNK ; Do menus.
    BIT SCRIPT_MENU_STATUS ; Test.
    BVS MENU_STATUS_0x40_SET ; 0x40 set, goto.
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    BEQ MENU_STATUS_0x40_SET ; == 0, goto.
    JSR SCRIPT_HELP_SAVE_GAME_FILE ; Save the game.
    LDX #$86 ; Val ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    JMP ENGINE_RESET_GAME ; Goto.
RTS: ; 13:0167, 0x026167
    RTS ; Leave.
MENU_STATUS_0x40_SET: ; 13:0168, 0x026168
    LDX #$82
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Display ptrs?
    LDX #$84
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    JSR WAIT_PRESSES_CLEAR? ; Wait.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto.
ENGINE_UNK_OBJECTS_REELATED?: ; 13:0178, 0x026178
    LDA #$05
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Set ??
    JSR PACKETS_IDK ; Do ??
    LDA #$B0 ; Set FPTR, R7??:01B0 ??
    LDX #$A1
    STA FPTR_MENU_MASTER[2]
    STX FPTR_MENU_MASTER+1
    JSR ENGINE_MENU_INIT_MASTER_FULL ; Do, menu?
    BIT SCRIPT_MENU_STATUS ; Test.
    BMI VAL_NEGATIVE ; Negative, goto.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto ??
VAL_NEGATIVE: ; 13:0192, 0x026192
    LDA #$FF ; Load ??
    JSR ENGINE_CURSOR_TO_BG_UPDATE_INTO_MENU? ; Do ??
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    ASL A ; << 1, *2.
    TAX ; To index.
    LDA RTN_TABLE_H,X ; Move routine.
    PHA
    LDA RTN_TABLE_L,X
    PHA
    RTS ; Execute it.
RTN_TABLE_L: ; 13:01A4, 0x0261A4
    LOW(RTN_0x0) ; 0x00
RTN_TABLE_H: ; 13:01A5, 0x0261A5
    HIGH(RTN_0x0) ; Many routines.
    LOW(RTN_0x1) ; 0x00
    HIGH(RTN_0x1)
    LOW(RTN_0x2) ; 0x01
    HIGH(RTN_0x2)
    LOW(RTN_0x3) ; 0x02
    HIGH(RTN_0x3)
    LOW(RTN_0x4) ; 0x03
    HIGH(RTN_0x4)
    LOW(RTN_0x5) ; 0x04
    HIGH(RTN_0x5)
    .db 02
    .db 03
    .db 06
    .db 02
    .db C0
    .db 3A
    .db 02
    .db 03
    .db D1
    .db F0
RTN_0x5: ; 13:01BA, 0x0261BA
    LDA #$19 ; Seed 19:036D
    LDX #$6D
    LDY #$A3
    JSR ENGINE_SCRIPT_LAUNCH_R7_A_PTR_XY_WITH_RESTORE ; Script launch ??
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Do ??
STREAMY_LIBY_UNK: ; 13:01C6, 0x0261C6
    JSR LIB_RTN_PTR_CREATION/SHIFT+CLEAR_UNK_MOVE_PTR_DOWN_UNK ; Do ??
    BCS RET_CS ; Ret CS, goto.
    JSR SUB_STREAM_AND_CMP_UNK ; Do ??
    BEQ RTS ; ==, goto.
    ASL A ; << 2, *4.
    ASL A
    BCC RTS ; CC, goto.
    AND #$3C ; Keep 0011.1100
    BEQ RTS ; == 0, goto.
    LDA #$35
    STA **:$0034 ; Set ??
    JSR STREAM_PROCESS_UNK_INIT ; Do ??
    BCS RTS ; Ret CS, goto.
EXIT_LIB_UNK: ; 13:01E1, 0x0261E1
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto otherwise.
RET_CS: ; 13:01E4, 0x0261E4
    JSR STREAM_MOVE_BANK_STREAM_READ_UNK ; Do ??
    BCC EXIT_LIB_UNK ; Ret CC, goto.
RTS: ; 13:01E9, 0x0261E9
    RTS ; Leave.
RTN_0x0: ; 13:01EA, 0x0261EA
    JSR LIB_SCRIPT_DIRECT_UNK_A ; Do ??
    ASL A ; << 1, *2.
    BPL SEED_X_0x2_UNK ; Positive, goto.
    AND #$1E ; Keep lower.
    BEQ LOWER_EQ_0x00 ; == 0, ,goto.
    JSR LIB_SCRIPT_DIRECT_UNK_B ; Do ??
    LDA #$0A
    STA **:$0034 ; Set ??
    JSR STREAM_PROCESS_UNK_INIT ; Do ??
    BCC RET_CC ; CC, goto. TODO always taken?
SEED_X_0x2_UNK: ; 13:0200, 0x026200
    LDX #$02 ; Seed ??
    BNE VAL_SEEDED ; != 0, goto.
LOWER_EQ_0x00: ; 13:0204, 0x026204
    LDX #$04 ; Seed ??
VAL_SEEDED: ; 13:0206, 0x026206
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ptr create.
    JSR WAIT_PRESSES_CLEAR? ; Do wait.
RET_CC: ; 13:020C, 0x02620C
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto.
RTN_0x1: ; 13:020F, 0x02620F
    JSR LIB_SCRIPT_DIRECT_UNK_A ; Do script.
    JSR SUB_STREAM_AND_CMP_UNK ; Do ??
    BNE RETURN_NONZERO ; != 0, goto.
    JSR SUB_UNK_TODO_SAVE_AFFECTED_POSSIBLY? ; Do ??
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto settle.
RETURN_NONZERO: ; 13:021D, 0x02621D
    ASL A ; << 1, *2.
    BPL VAL_STILL_POSITIVE ; Positive, goto.
    AND #$1E ; Keep lower.
    BEQ VAL_STILL_POSITIVE ; Not set, leave.
    LDA #$0B
    STA **:$0034 ; Set ??
    JSR STREAM_PROCESS_UNK_INIT ; Do streams.
    BCC RET_CC ; CC, goto.
VAL_STILL_POSITIVE: ; 13:022D, 0x02622D
    LDX #$06 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ??
    JSR WAIT_PRESSES_CLEAR? ; Wait.
RET_CC: ; 13:0235, 0x026235
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto.
RTN_0x4: ; 13:0238, 0x026238
    JSR SUB_UNK_GROUPS_MANY_CHARS? ; Do ??
    BCC SUB_RET_CC ; CC, goto.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto otherwise.
SUB_RET_CC: ; 13:0240, 0x026240
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do.
    LDY #$07 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from file.
    STA GFX_BANKS_EXTENSION+3 ; Store to ??
    SEC ; Prep sub.
    LDY #$16 ; Stream index.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    SBC GFX_BANKS_EXTENSION+3 ; Sub with previous.
    INY ; Stream++
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Store result to file next.
    SBC #$00 ; Carry sub ??
    BCC SUB_UNDERFLOW ; Underflow, goto.
    JSR LARGE_ROUTINE_SWITCH ; Do sub. TODO sub.
    JMP WAIT_PRESSES_SYNC_EXIT ; Goto ??
SUB_UNDERFLOW: ; 13:025D, 0x02625D
    LDX #$10 ; Load ??
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT ; Goto.
RTN_0x2: ; 13:0262, 0x026262
    JSR SUB_TODO ; Do ??
    BCC SCRIPT_EXIT_MENU_UNK ; CC, goto.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Settle and flags.
SCRIPT_EXIT_MENU_UNK: ; 13:026A, 0x02626A
    JSR PTR_SEEDED_UNK_D ; Do ??
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do ??
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do ??
    BEQ UPPER_EQ_0x00 ; == 0, goto.
    LDA PTR_CREATE_SEED_UNK ; Create seed ??
    CMP #$03 ; If _ #$03
    BEQ UPPER_EQ_0x00 ; ==, goto.
    LDA #$A2
    LDX #$A2 ; Seed 13:02A2
    BNE SUBMENU_SEEDED ; Seeded.
UPPER_EQ_0x00: ; 13:0281, 0x026281
    LDA #$D1 ; Seed 1F:10D1
    LDX #$F0
SUBMENU_SEEDED: ; 13:0285, 0x026285
    STA FPTR_MENU_SUBMENU[2] ; Setup submenu.
    STX FPTR_MENU_SUBMENU+1
    LDA #$9A ; Seed master.
    LDX #$A2
    STA FPTR_MENU_MASTER[2]
    STX FPTR_MENU_MASTER+1
    JSR ENGINE_MENU_INIT_MASTER_PARTIAL ; Init master with seeded submenu.
    BIT SCRIPT_MENU_STATUS ; Check status.
    BMI STATUS_MENU_SELECTED ; Selected, goto.
    BPL RTN_0x2 ; Always taken, loop.
    .db 01
    .db 05
    .db 00
    .db 02
    .db C0
    .db 3A
    .db 18
    .db 07
    .db 00 ; Fptr submenu.
    .db 00
    .db 03
    .db 04
    .db 00
STATUS_MENU_SELECTED: ; 13:02A7, 0x0262A7
    LDA #$FF ; Tile for cursor.
    JSR ENGINE_CURSOR_TO_BG_UPDATE_INTO_MENU? ; To BG.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do.
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Do.
    ASL A ; << 1, *2.
    TAX ; To index.
    LDA RTN_TABLE_H,X ; Routine stack execute.
    PHA
    LDA RTN_TABLE_L,X
    PHA
    RTS
RTN_TABLE_L: ; 13:02BC, 0x0262BC
    LOW(RTN_A) ; Do rtn.
RTN_TABLE_H: ; 13:02BD, 0x0262BD
    HIGH(RTN_A) ; About a billion file exits this can do.
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_C)
    HIGH(RTN_C)
    LOW(RTN_D)
    HIGH(RTN_D)
    LOW(RTN_E)
    HIGH(RTN_E)
RTN_A: ; 13:02C6, 0x0262C6
    LDY #$03 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load ??
    BNE VAL_NONZERO ; != 0, goto.
    LDY #$02 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load ??
    AND #$3F ; Keep lower.
    BEQ FILE_ALT ; == 0
    LDX PARTY/BATTLE_ID?_TODO ; Load ??
    AND MASK_DATA_UNK,X ; Keep ??
    BEQ MASK_EQ_0x00 ; == 0, goto.
    JSR LARGE_ROUTINE_SWITCH ; Do switch.
    JMP WAIT_PRESSES_SYNC_EXIT ; Wait presses.
FILE_ALT: ; 13:02E1, 0x0262E1
    LDX #$16 ; Do file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ??
    JSR RTN_A_FILE_SEED_UNK ; File ??
    JMP WAIT_PRESSES_SYNC_EXIT ; Goto exit.
MASK_EQ_0x00: ; 13:02EC, 0x0262EC
    LDX #$18 ; Seed ??
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT ; Goto.
VAL_NONZERO: ; 13:02F1, 0x0262F1
    STA BCD/MODULO/DIGITS_USE_C ; Store nonzero.
    LDY #$02 ; Seed stream.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load ??
    LDX PARTY/BATTLE_ID?_TODO ; Seed ??
    AND MASK_DATA_UNK,X ; Mask ??
    BEQ MASK_EQ_0x00 ; == 0, goto.
    JSR SUB_TODO ; Do ??
    BCS MASK_EQ_0x00 ; Ret CS, goto.
    LDX #$1C ; File.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do.
    LDA #$04
    STA R_**:$07F3 ; Set ??
    JMP WAIT_PRESSES_SYNC_EXIT ; Goto.
MASK_EQ_0x00: ; 13:0310, 0x026310
    LDX #$1E ; File do.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
RTN_C: ; 13:0315, 0x026315
    LDX COUNT_LOOPS?_UNK ; Load ??
    DEX ; --
    BEQ EXIT_FILE_0C ; == 0, goto.
    LDA PTR_CREATE_SEED_UNK ; Load.
    CMP #$03 ; If _ #$03
    BEQ VAL_EQ_0x3 ; ==, goto.
    JSR SUB_DEEPER/RESTORE_HELPER ; Do.
    BCS EXIT_MENU_UNK ; Goto.
    JSR BANKED_DERP ; Do ??
    BCS RET_CS ; CS, goto.
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do ??
    CMP GFX_BANKS_EXTENSION+2 ; If _ var
    BEQ UPPER_NIBBLE_FILE_SELECT_PORTION ; ==, goto.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do sub.
    BNE EXTENDED_A ; != 0, goto.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do sub.
    BNE EXIT_FILE_0x4C ; != 0, goto.
    LDX #$24 ; Seed file.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_FILE_0x4C: ; 13:0344, 0x026344
    LDX #$4C
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXTENDED_A: ; 13:0349, 0x026349
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do upper.
    BNE EXIT_FILE_0x52 ; !=, goto.
    LDX #$4E ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
UPPER_NIBBLE_FILE_SELECT_PORTION: ; 13:0356, 0x026356
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Get upper.
    BNE EXIT_FILE_0x52 ; != 0, goto.
    LDX #$50 ; Get upper.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_FILE_0x52: ; 13:0360, 0x026360
    LDX #$52 ; Seed file.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
VAL_EQ_0x3: ; 13:0365, 0x026365
    LDX #$26 ; Seed file.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
RET_CS: ; 13:036A, 0x02636A
    LDA PARTY/BATTLE_ID?_TODO ; Load.
    CMP GFX_BANKS_EXTENSION+2 ; If _ #$02
    BEQ UPPER_NIBBLE_FILE_SELECT_PORTION ; ==, goto.
    LDX #$28 ; File ??
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_FILE_0C: ; 13:0375, 0x026375
    LDX #$0C ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_MENU_UNK: ; 13:037A, 0x02637A
    JMP SCRIPT_EXIT_MENU_UNK ; Goto.
RTN_B: ; 13:037D, 0x02637D
    LDY #$02 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load stream.
    AND #$40 ; Keep ??
    BEQ EXIT_FILE_1A ; == 0, goto.
    JSR LARGE_ROUTINE_SWITCH ; Do switch.
    JMP WAIT_PRESSES_SYNC_EXIT ; Goto.
EXIT_FILE_1A: ; 13:038B, 0x02638B
    LDX #$1A ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT ; Goto.
RTN_D: ; 13:0390, 0x026390
    JSR SUB_TODO_WRAM/STATUS_UNK ; Do ??
    BCS EXIT_FILE_0x22 ; CS, file.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Get nibble.
    BNE EXIT_FILE_0x54 ; != 0, goto.
    LDX #$20 ; Exit file.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_FILE_0x54: ; 13:039F, 0x02639F
    LDX #$54 ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
EXIT_FILE_0x22: ; 13:03A4, 0x0263A4
    LDX #$22 ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT
RTN_E: ; 13:03A9, 0x0263A9
    CLC ; Prep add.
    LDA PTR_CREATE_SEED_UNK ; Load ??
    ADC #$E8 ; += 0xE8
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Store to,, PTR H.
    LDA #$00 ; Prep carry.
    ADC #$03 ; Make 3 or 4.
    STA ARG/PTR_L ; Store addr L.
    JSR SCRIPT_USE_ENTRY_TODO_UNK ; Do ??
    JMP WAIT_PRESSES_SYNC_EXIT ; Exit sync.
LARGE_ROUTINE_SWITCH: ; 13:03BC, 0x0263BC
    LDY #$04 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from file.
    ASL A ; << 1, *2.
    TAX ; To X index.
    LDA RTN_TABLE_H,X ; Move RTN to stack.
    PHA
    LDA RTN_TABLE_L,X
    PHA
    RTS ; Execute it.
RTN_TABLE_L: ; 13:03CB, 0x0263CB
    LOW(RTN_A_FILE_SEED_UNK) ; Todo these.
RTN_TABLE_H: ; 13:03CC, 0x0263CC
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_C)
    HIGH(RTN_C)
    LOW(RTN_D)
    HIGH(RTN_D)
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_E)
    HIGH(RTN_E)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_F)
    HIGH(RTN_F)
    LOW(RTN_G)
    HIGH(RTN_G)
    LOW(RTN_H)
    HIGH(RTN_H)
    LOW(RTN_I)
    HIGH(RTN_I)
    LOW(RTN_J)
    HIGH(RTN_J)
    LOW(RTN_K)
    HIGH(RTN_K)
    LOW(RTN_L)
    HIGH(RTN_L)
    LOW(RTN_M)
    HIGH(RTN_M)
    LOW(RTN_N)
    HIGH(RTN_N)
    LOW(RTN_O)
    HIGH(RTN_O)
    LOW(RTN_P)
    HIGH(RTN_P)
    LOW(RTN_Q)
    HIGH(RTN_Q)
    LOW(RTN_R)
    HIGH(RTN_R)
    LOW(RTN_S)
    HIGH(RTN_S)
    LOW(RTN_T)
    HIGH(RTN_T)
    LOW(RTN_U)
    HIGH(RTN_U)
    LOW(RTN_V)
    HIGH(RTN_V)
    LOW(RTN_W_FILE_SET_0x74)
    HIGH(RTN_W_FILE_SET_0x74)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_A_FILE_SEED_UNK)
    HIGH(RTN_A_FILE_SEED_UNK)
    LOW(RTN_X)
    HIGH(RTN_X)
    LOW(RTN_Y)
    HIGH(RTN_Y)
    LOW(RTN_Z_FILE_SET_0x62)
    HIGH(RTN_Z_FILE_SET_0x62)
    LOW(RTN_AA_FILE_SET_0x64)
    HIGH(RTN_AA_FILE_SET_0x64)
    LOW(RTN_AB)
    HIGH(RTN_AB)
    LOW(RTN_AC_FILE_SET_0x70_AND_XTRA)
    HIGH(RTN_AC_FILE_SET_0x70_AND_XTRA)
    LOW(RTN_AD_COMMON_0xE)
    HIGH(RTN_AD_COMMON_0xE)
    LOW(RTN_AE)
    HIGH(RTN_AE)
    LOW(RTN_AF)
    HIGH(RTN_AF)
    LOW(RTN_AG)
    HIGH(RTN_AG)
    LOW(RTN_AH)
    HIGH(RTN_AH)
    LOW(RTN_AI)
    HIGH(RTN_AI)
    LOW(RTN_AJ)
    HIGH(RTN_AJ)
    LOW(RTN_AD_COMMON_0xE)
    HIGH(RTN_AD_COMMON_0xE)
    LOW(RTN_AK)
    HIGH(RTN_AK)
    LOW(RTN_AL)
    HIGH(RTN_AL)
RTN_AE: ; 13:0427, 0x026427
    JSR GFX_FILE_SUB_UNK_PTR_MOD? ; Do ??
    JSR LIB_SCRIPT_DIRECT_UNK_A ; Do ??
    ASL A ; << 1, *2.
    BPL RTN_AD_COMMON_0xE ; Positive, goto.
    AND #$1E ; Keep 0001.1110
    BEQ RTN_AD_COMMON_0xE ; == 0, goto.
    LDA #$0C ; Seed ??
    STA **:$0034
    JSR STREAM_PROCESS_UNK_INIT ; Do ??
    BCS RTN_AD_COMMON_0xE ; Ret CS, goto.
    RTS ; Leave CC.
RTN_AD_COMMON_0xE: ; 13:043E, 0x02643E
    LDX #$0E ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ??
RTN_A_FILE_SEED_UNK: ; 13:0443, 0x026443
    LDX #$2A ; Seed file ??
SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X: ; 13:0445, 0x026445
    JSR MOVE_FILE_X_TO_PTR_0x74_HELPER ; Do.
    JMP SCRIPT_USE_ENTRY_TODO_UNK ; Goto.
SCRIPT+HELPER_COMMON_TODO_SHORT: ; 13:044B, 0x02644B
    JSR MOVE_FILE_X_TO_PTR_0x74_HELPER ; Do.
    JMP EXIT_UNK ; Goto.
RTN_B: ; 13:0451, 0x026451
    JSR LIB_SCRIPT_DIRECT_UNK_A ; Do lib.
    ASL A ; << 1, *2.
    BPL RTN_A_FILE_SEED_UNK ; Positive, goto file seed.
    AND #$1E ; Keep 0001.1110
    BEQ RTN_A_FILE_SEED_UNK ; == 0, seed file.
    LDA #$0D
    STA **:$0034 ; Clear ??
    JSR STREAM_PROCESS_UNK_INIT ; Do streams.
    BCS RTN_A_FILE_SEED_UNK ; CS, goto.
    RTS ; Leave.
RTN_E: ; 13:0465, 0x026465
    JSR SUB_WRAM_UNK_TO_SOLVE ; Do sub.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Wram writable.
    LDA #$0A
    STA CURRENT_SAVE_MANIPULATION_PAGE+25 ; Set ??
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Not writable.
    LDX #$16 ; Seed file.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Goto common.
RTN_Y: ; 13:0478, 0x026478
    JSR SUB_WRAM_UNK_TO_SOLVE ; Do sub.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do writable.
    LDY #$2C ; Seed file index.
VAL_LT_0x30: ; 13:0480, 0x026480
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    STA WRAM_ARR_UNK[48],Y ; Store same to WRAM.
    INY ; ++
    CPY #$30 ; If _ #$30
    BCC VAL_LT_0x30 ; <, goto.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Do disabled.
    LDA #$40
    STA FIRST_LAUNCHER_HOLD_FLAG? ; Set flag ??
    LDA #$01
    STA SWITCH_INIT_PORTION? ; Set switch ??
    LDX #$48 ; Seed file ??
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Goto, run file.
RTN_C: ; 13:049A, 0x02649A
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    BNE VAL_NONZERO ; != 0, goto.
    LDA #$03 ; Load ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do sub.
    BCC RET_CC ; CC, do other file.
    LDA PTR_CREATE_SEED_UNK ; Load ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do test.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM writable.
    LDA #$03 ; Seed ??
    STA [BCD/MODULO/DIGITS_USE_A],Y ; Store to file.
    LDY #$2C ; Arr index seed.
VAL_LT_0x30: ; 13:04B3, 0x0264B3
    LDA WRAM_ARR_UNK[48],Y ; Load WRAM.
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store to GFX file.
    INY ; Index/stream++
    CPY #$30 ; If _ #$30
    BCC VAL_LT_0x30 ; <, goto.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable WRAM.
    LDX #$44 ; Seed ??
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Goto.
RET_CC: ; 13:04C5, 0x0264C5
    LDX #$46 ; Seed alt.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Goto.
VAL_NONZERO: ; 13:04CA, 0x0264CA
    LDA #$14 ; Seed ??
    JMP ENTRY_A_SEEDED_UNK
RTN_D: ; 13:04CF, 0x0264CF
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    BNE VAL_NONZERO ; != 0, goto.
    JMP RTN_B ; Goto.
VAL_NONZERO: ; 13:04D6, 0x0264D6
    LDA #$0F ; Seed val.
    JMP ENTRY_A_SEEDED_UNK ; Goto.
RTN_AG: ; 13:04DB, 0x0264DB
    LDA #$1E ; Seed val.
    JMP ENTRY_UNK ; Goto ??
RTN_AH: ; 13:04E0, 0x0264E0
    LDA #$50 ; Seed val.
    JMP ENTRY_UNK
RTN_AI: ; 13:04E5, 0x0264E5
    JSR SCRIPT_HELPER_SEED_0x3E8_UNK ; Do seed.
    JMP RTN_RESTORE_UNK ; Goto.
RTN_F: ; 13:04EB, 0x0264EB
    LDA #$0A ; Seed ??
    JMP RTN_UNK_B
RTN_G: ; 13:04F0, 0x0264F0
    LDA #$14 ; Seed ??
    JMP ENTRY_A_SEEDED_UNK
RTN_H: ; 13:04F5, 0x0264F5
    LDA #$1E ; Seed ??
    JMP ENTRY_A_SEEDED_UNK
RTN_I: ; 13:04FA, 0x0264FA
    LDA #$3C ; Seed ??
    JMP ENTRY_A_SEEDED_UNK
RTN_J: ; 13:04FF, 0x0264FF
    LDA #$64 ; Seed ??
    JMP RTN_UNK_B
RTN_K: ; 13:0504, 0x026504
    JSR SCRIPT_HELPER_SEED_0x3E8_UNK ; Do ??
    LDX #$16 ; Seed ??
    JMP VAL_SEEDED_UNK ; Goto. TODO: Mistake not BNE? Odd.
RTN_L: ; 13:050C, 0x02650C
    LDA #$1E
    JSR SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE ; Seed ??
    JSR SUB_DEEPER/RESTORE_HELPER ; Do ??
    BCS EXIT_PULL_EXTRA_UNK ; CS, goto.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do ??
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do ??
    BMI RET_NEGATIVE ; Negative, goto.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do ??
    LDX #$42 ; Seed file ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM writable.
    DEC CURRENT_SAVE_MANIPULATION_PAGE+31 ; --
    PHP ; Save status.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; No more writes.
    PLP ; Pull result.
    BNE RESULT_NONZERO ; != 0, goto.
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do sub.
    LDX #$56 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do file.
RESULT_NONZERO: ; 13:053B, 0x02653B
    JMP EXIT_SYNC_UNK ; Goto.
RTN_UNK_B: ; 13:053E, 0x02653E
    LDX #$2E ; Seed ??
    BNE FILE_SEEDED ; != 0, ,goto.
ENTRY_A_SEEDED_UNK: ; 13:0542, 0x026542
    LDX #$2C ; Move ??
FILE_SEEDED: ; 13:0544, 0x026544
    STX FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Store file.
    JSR SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE ; Do ??
    LDX FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Load file.
VAL_SEEDED_UNK: ; 13:054B, 0x02654B
    JSR MOVE_FILE_X_TO_PTR_0x74_HELPER ; Do it.
    JSR SUB_DEEPER/RESTORE_HELPER ; Restore.
    BCS EXIT_PULL_EXTRA_UNK ; CS, goto.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do sub.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do ??
    BMI RET_NEGATIVE ; Negative, goto.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do ??
    JSR SCRIPT_USE_ENTRY_TODO_UNK ; Do ??
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do ??
EXIT_SYNC_UNK: ; 13:0564, 0x026564
    JSR SUB_TODO_B ; Do ??
    JMP SYNC_WAIT_ANY_PRESS ; Goto.
EXIT_PULL_EXTRA_UNK: ; 13:056A, 0x02656A
    PLA ; Pull addr.
    PLA
    JMP SCRIPT_EXIT_MENU_UNK ; Goto.
RET_NEGATIVE: ; 13:056F, 0x02656F
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do ??
    LDX #$58 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do.
EXIT_JUMP_SEEDED: ; 13:0577, 0x026577
    JMP RTN_A_FILE_SEED_UNK
    STA PAIR_UNK_2A[2] ; Save file ??
    STY PAIR_UNK_2A+1
    JSR MOVE_FILE_X_TO_PTR_0x74_HELPER ; Do ??
    JSR SUB_DEEPER/RESTORE_HELPER ; Do sub.
    BCS EXIT_PULL_EXTRA_UNK ; CS, goto.
    LDA PAIR_UNK_2A[2] ; Load ??
    BMI VAL_NEGATIVE ; Negative, goto.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do ??
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do ??
    BMI RET_NEGATIVE ; Negative, goto.
VAL_NEGATIVE: ; 13:0592, 0x026592
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do ??
    JSR SCRIPT_USE_ENTRY_TODO_UNK ; Do ??
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do ??
RTN_FILE_UNK: ; 13:059B, 0x02659B
    LDY #$01 ; Stream index.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    AND PAIR_UNK_2A[2] ; Mask with.
    BEQ EXIT_JUMP_SEEDED ; == 0, goto.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM.
    LDA PAIR_UNK_2A[2] ; Load ??
    PHP ; Save status.
    EOR #$FF ; Invert.
    AND [GFX_BANKS_EXTENSION[4]],Y ; Mask with.
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store back.
    PLP ; Pull status.
    BPL VALUE_POSITIVE ; Positive, goto.
    JSR NEGATIVE_RTN ; Do negative.
VALUE_POSITIVE: ; 13:05B5, 0x0265B5
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; No WRAM.
    LDA #$07
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Set SFX, very good thingy ??
    LDX PAIR_UNK_2A+1 ; Load ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do ??
    JMP SYNC_WAIT_ANY_PRESS ; Goto.
    STY PAIR_UNK_2A[2] ; Y to ??
    JSR MOVE_FILE_X_TO_PTR_0x74_HELPER ; Do ??
    JSR SUB_DEEPER/RESTORE_HELPER ; Do deeper.
    BCS EXIT_PULL_EXTRA_UNK ; Ret CS, leave one more up.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; Do ??
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Upper nibble.
    BMI RET_NEGATIVE ; Negative, goto.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do ??
    JSR SCRIPT_USE_ENTRY_TODO_UNK ; Do ??
    JSR SUB_SAVE_ID_AND_GFX_AND_RESTORE ; Do ??
    LDY PAIR_UNK_2A[2] ; Load ??
    LDA #$05 ; Seed to go to.
    JSR SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE ; Goto.
    CLC ; Prep add.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load file.
    ADC PAIR_UNK_2A[2] ; Mod with.
    STA SAVE_GAME_MOD_PAGE_PTR[2] ; Store to.
    BCC ADD_NO_OVERFLOW ; No overflow, goto.
    CLC ; Prep add.
    LDA PAIR_UNK_2A[2] ; Load ??
    SBC SAVE_GAME_MOD_PAGE_PTR[2] ; Sub with.
    STA PAIR_UNK_2A[2] ; Store to.
ADD_NO_OVERFLOW: ; 13:05F7, 0x0265F7
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM Mod.
    CLC ; Prep add.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load file.
    ADC PAIR_UNK_2A[2] ; Add with.
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store to.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Do sub.
    CLC ; Prep add.
    TYA ; Stream index.
    ADC #$11 ; += 11
    ASL A ; *2.
    TAX ; To X index, file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do file.
    LDX #$32 ; Seed file.
    JMP SCRIPT+HELPER_COMMON_TODO_SHORT ; Goto.
RTN_AF: ; 13:0612, 0x026612
    JSR WRAM_TEST_543_MENU_UNK ; Test.
    JSR SUB_MENU_TO_SOLVE ; Do submenu.
    BCS RET_CS ; Ret CS, goto.
    JSR GFX_FILE_SUB_UNK_PTR_MOD? ; Do sub.
    LDX #$0E ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    PLA ; Pull 2 levels.
    PLA
    PLA
    PLA
    JSR WAIT_PRESSES_CLEAR? ; Wait.
    JMP MENU_DOUBLE_EXIT_SAVE_SONG_AND_ASSIGN_NEW_AND_SFX ; Goto.
WRAM_TEST_543_MENU_UNK: ; 13:062C, 0x02662C
    LDA CURRENT_SAVE_MANIPULATION_PAGE+543 ; Load ??
    AND #$02 ; Keep ??
    BEQ RTS ; Clear, leave.
    PLA ; Pull rtn?
    PLA
    LDX #$12 ; Seed file.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Go do it.
RTS: ; 13:063A, 0x02663A
    RTS ; Leave.
ENTRY_UNK: ; 13:063B, 0x02663B
    JSR SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE ; Do ??
RTN_RESTORE_UNK: ; 13:063E, 0x02663E
    JSR SUB_DEEPER/RESTORE_HELPER ; Do ??
EXIT_PULL_EXTRA: ; 13:0641, 0x026641
    BCS RET_CS ; Ret CS, goto.
    JSR GFX_FILE_SUB_UNK_PTR_MOD? ; Do ??
    LDX #$0E ; Seed file ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do scrip.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do ??
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do ??
    BMI EXIT_KNOWN ; Negative, goto.
    JSR SUB_TODO_B ; Do sub.
    JMP SYNC_WAIT_ANY_PRESS ; Goto.
RET_CS: ; 13:0659, 0x026659
    PLA ; Pull script off?
    PLA
    JMP RTN_0x4 ; Goto ??
EXIT_KNOWN: ; 13:065E, 0x02665E
    JMP RTN_A_FILE_SEED_UNK ; Goto.
    STA PAIR_UNK_2A[2] ; Store ??
    STY PAIR_UNK_2A+1
    JSR SUB_DEEPER/RESTORE_HELPER ; Do ??
    BCS RET_CS ; Ret CS, goto.
    JSR GFX_FILE_SUB_UNK_PTR_MOD? ; Do sub.
    LDX #$0E ; Seed ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do sub.
    JSR SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM ; Do sub.
    LDA PAIR_UNK_2A[2] ; Load ??
    BMI VAL_NEGATIVE ; Negative, goto.
    JSR LOAD_FILE[1]_UPPER_NIBBLE_ONLY ; Do sub.
    BMI EXIT_KNOWN ; Negative, goto.
VAL_NEGATIVE: ; 13:067E, 0x02667E
    JMP RTN_FILE_UNK ; Do ??
SUB_TODO_B: ; 13:0681, 0x026681
    LDY #$14
    JSR 13:06A5
    LDY #$03
    JSR 13:06B4
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDY #$14
    JSR 13:06D1
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED
    LDA #$07
    STA SOUND_EFFECT_REQUEST_ARRAY+1
    LDX #$34
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDX #$30
    JMP SCRIPT+HELPER_COMMON_TODO_SHORT
    CLC
    LDA [GFX_BANKS_EXTENSION[4]],Y
    ADC PAIR_UNK_2A[2]
    STA SAVE_GAME_MOD_PAGE_PTR[2]
    INY
    LDA [GFX_BANKS_EXTENSION[4]],Y
    ADC PAIR_UNK_2A+1
    STA SAVE_GAME_MOD_PAGE_PTR+1
    RTS
    SEC
    LDA [GFX_BANKS_EXTENSION[4]],Y
    SBC SAVE_GAME_MOD_PAGE_PTR[2]
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]
    INY
    LDA [GFX_BANKS_EXTENSION[4]],Y
    SBC SAVE_GAME_MOD_PAGE_PTR+1
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1
    BCS 13:06D0
    LDA PAIR_UNK_2A[2]
    ADC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]
    STA PAIR_UNK_2A[2]
    LDA PAIR_UNK_2A+1
    ADC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1
    STA PAIR_UNK_2A+1
    RTS
    CLC
    LDA [GFX_BANKS_EXTENSION[4]],Y
    ADC PAIR_UNK_2A[2]
    STA [GFX_BANKS_EXTENSION[4]],Y
    INY
    LDA [GFX_BANKS_EXTENSION[4]],Y
    ADC PAIR_UNK_2A+1
    STA [GFX_BANKS_EXTENSION[4]],Y
    RTS
NEGATIVE_RTN: ; 13:06E0, 0x0266E0
    LDY #$03
    LDA [GFX_BANKS_EXTENSION[4]],Y
    LDY #$14
    STA [GFX_BANKS_EXTENSION[4]],Y
    LDY #$04
    LDA [GFX_BANKS_EXTENSION[4]],Y
    LDY #$15
    STA [GFX_BANKS_EXTENSION[4]],Y
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    PHA
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PHA
    JSR LIB_SPECIAL_CHECKS_UNK
    JSR L_13:0728
    BCS 13:071E
    TXA
    JSR ENGINE_CRAFT_MAP_OBJ_RESERVATION_PTR
    LDA ENGINE_MAPPER_BANK_VALS_COMMITTING+6
    PHA
    LDY #$15
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y
    ASL A
    ASL A
    ASL A
    TAX
    JSR 1F:02BF
    PLA
    LDX #$06
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    LDA #$1D
    JSR ENGINE_MAIN_SONG_REPLACE_AND_THEN_RESTORE_MAIN_SONG?
    JSR L_1E:1977
    JSR ENGINE_WRAM_STATE_WRITEABLE
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    RTS
L_13:0728: ; 13:0728, 0x026728
    LDA PARTY/BATTLE_ID?_TODO
    LDX #$00
    CMP CURRENT_SAVE_MANIPULATION_PAGE+8,X
    CLC
    BEQ 13:0737
    INX
    CPX #$04
    BCC 13:072C
    RTS
RTN_AK: ; 13:0738, 0x026738
    LDA #$02
    LDY #$5A
    JMP 13:0661
RTN_AJ: ; 13:073F, 0x02673F
    LDA #$40
    LDY #$6C
    JMP 13:0661
RTN_AL: ; 13:0746, 0x026746
    LDA #$80
    LDY #$14
    JMP 13:0661
RTN_M: ; 13:074D, 0x02674D
    LDA #$02
    LDX #$2E
    LDY #$5A
    JMP 13:057A
RTN_N: ; 13:0756, 0x026756
    LDA #$01
    LDX #$16
    LDY #$5C
    JMP 13:057A
RTN_O: ; 13:075F, 0x02675F
    LDA #$14
    JSR SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE
    LDX #$5E
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDY #$16
    JSR 13:06A5
    LDY #$05
    JSR 13:06B4
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDY #$16
    JSR 13:06D1
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED
    LDX #$36
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDX #$30
    JSR SCRIPT+HELPER_COMMON_TODO_SHORT
    JSR RANDOMIZE_GROUP_0x26
    CMP #$19
    BCS 13:0797
    JSR SUB_WRAM_UNK_TO_SOLVE
    LDX #$60
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    JMP SYNC_WAIT_ANY_PRESS
RTN_P: ; 13:079A, 0x02679A
    LDX #$4A
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    JSR SUB_WRAM_UNK_TO_SOLVE
    LDY #$0F
    JMP 13:05E2
RTN_Q: ; 13:07A7, 0x0267A7
    LDX #$2C
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    JSR SUB_WRAM_UNK_TO_SOLVE
    LDY #$0B
    JMP 13:05E2
RTN_R: ; 13:07B4, 0x0267B4
    LDX #$2E
    LDY #$0C
    JMP 13:05C5
RTN_S: ; 13:07BB, 0x0267BB
    LDX #$2E
    LDY #$0D
    JMP 13:05C5
RTN_T: ; 13:07C2, 0x0267C2
    LDX #$2E
    LDY #$0E
    JMP 13:05C5
RTN_U: ; 13:07C9, 0x0267C9
    LDX #$2E
    LDY #$0F
    JMP 13:05C5
RTN_V: ; 13:07D0, 0x0267D0
    LDX #$2E
    LDY #$0B
    JMP 13:05C5
RTN_X: ; 13:07D7, 0x0267D7
    JSR WRAM_TEST_543_MENU_UNK
    LDA CURRENT_SAVE_MANIPULATION_PAGE+540
    BPL 13:07E2
    JMP RTN_A_FILE_SEED_UNK
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDX #$03
    LDA 13:0803,X
    STA CURRENT_SAVE_MANIPULATION_PAGE+4,X
    DEX
    BPL 13:07E7
    JSR SLOTS_AND_FPTRS_IDFK
    JSR 1E:18CE
    LDA #$02
    STA SWITCH_INIT_PORTION?
    LDA #$40
    STA FIRST_LAUNCHER_HOLD_FLAG?
    LDX #$16
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    .db 49
    .db 9E
    .db 44
    .db A8
RTN_Z_FILE_SET_0x62: ; 13:0807, 0x026807
    LDX #$62 ; Seed file.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
RTN_AA_FILE_SET_0x64: ; 13:080C, 0x02680C
    LDX #$64 ; File.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
RTN_W_FILE_SET_0x74: ; 13:0811, 0x026811
    LDX #$74 ; File.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
RTN_AC_FILE_SET_0x70_AND_XTRA: ; 13:0816, 0x026816
    LDX #$70 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDA #$01 ; Seed song, beeps TODO why. Melody?
    JSR ENGINE_MAIN_SONG_REPLACE_AND_THEN_RESTORE_MAIN_SONG?
    LDX #$72 ; Seed file.
    JMP SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
RTN_AB: ; 13:0825, 0x026825
    PLA ; Pull layer.
    PLA
    LDX #$78 ; Do ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do file ??
    JMP SCRIPT_UNK ; Exit ??
ENGINE_MAIN_RTN_MANY_FADES: ; 13:082F, 0x02682F
    LDA #$05
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Set ??
SCRIPT_UNK: ; 13:0834, 0x026834
    LDA R_**:$0014 ; Load ??
    CMP #$01 ; If _ #$01
    BEQ VAL_EQ_0x01 ; ==, goto.
    CMP #$02 ; If _ #$02
    BEQ VAL_EQ_0x01 ; ==, goto.
    LDX #$7A ; File.
    JMP COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT ; Goto ??
VAL_EQ_0x01: ; 13:0843, 0x026843
    JSR WAIT_PRESSES_CLEAR? ; Wait.
    JSR ENGINE_PALETTE_FADE_OUT ; Fade.
    JSR SETTLE_SPRITES_OFFSCREEN/CLEAR_OBJ_RAM ; Clear off screen.
    LDX #$00
    LDY #$08 ; Seed scroll.
    JSR ENGINE_HELPER_SETTLE_CLEAR_LATCH_SET_SCROLL_TODO_MORE ; Do.
    LDA #$06 ; Add sprites and BG in the leftmost column.
    ORA ENGINE_PPU_MASK_COPY ; Set with copy.
    STA ENGINE_PPU_MASK_COPY ; Store it.
    LDA #$5B
    LDX #$02 ; GFX swap.
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    JSR PPU_READ_INTO_$0110_HELPER_LOOP_UNK ; Read into RAM.
    LDA #$E3
    LDX #$A8
    JSR ENGINE_SET_GFX_BANKS_FPTR_AX ; Set GFX banks PTRS.
    LDA #$DF
    STA SPRITE_PAGE+1 ; Set tile.
    LDA #$00
    STA SPRITE_PAGE+2 ; Clear ATTRS.
    LDX #$40 ; Attr, sprite HFlip.
    LDA R_**:$6785 ; Load ??
    JSR HELPER_SPRITE_0_ATTR ; Do ??
    SBC #$08 ; -= 0x8
    STA SPRITE_PAGE+3 ; As XPos of SPR 0.
    LDX #$80 ; Attr VFlip.
    LDA WRAM_SPECIAL_B? ; Load ??
    JSR HELPER_SPRITE_0_ATTR ; Do ??
    SBC #$21 ; -= 0x21
    STA SPRITE_PAGE[256] ; Store as VPos.
    LDA #$E9
    LDX #$A8
    JSR ENGINE_SETTLE_AND_PALETTE_FROM_PTR ; Palette.
    LDA #$00
    STA CONTROL_ACCUMULATED?[2] ; No buttons.
BUTTON_B_NOT_PRESSED: ; 13:0899, 0x026899
    LDX #$08
    JSR ENGINE_DELAY_X_FRAMES ; Delay frames.
    LDA #$DF ; Val ?? 1101.1111
    EOR SPRITE_PAGE+1 ; Invert tile.
    STA SPRITE_PAGE+1 ; Store back.
    BIT CONTROL_ACCUMULATED?[2] ; Test P1 CTRL.
    BVC BUTTON_B_NOT_PRESSED ; Not pressed, goto.
    LDA #$00
    STA CONTROL_ACCUMULATED?[2] ; No buttons pressed now.
    LDA #$F0
    STA SPRITE_PAGE[256] ; Set Ypos way down.
    JSR ENGINE_SETTLE_ALL_UPDATES? ; Settle.
    JSR ENGINE_PALETTE_FADE_OUT_NO_UPLOAD_CURRENT ; Fade out.
    JSR ENGINE_PALETTE_SCRIPT_TO_UPLOADED ; Do palette.
    LDA #$F9 ; Keep all except left column.
    AND ENGINE_PPU_MASK_COPY ; Set from current.
    STA ENGINE_PPU_MASK_COPY ; Store disabled.
    LDA #$7E
    LDX #$04 ; GFX.
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    LDA #$00
    STA SOUND_SAMPLE_FLAG_DONT_RESET_LEVEL ; Clear ??
    JSR SETTLE_SPRITES_OFFSCREEN/CLEAR_OBJ_RAM ; Settle clean.
    JMP ENGINE_SETTLE_UPDATES_TODO ; Do.
HELPER_SPRITE_0_ATTR: ; 13:08D4, 0x0268D4
    SEC ; Prep sub.
    BPL RTS ; Positive, goto.
    TAY ; A to Y.
    TXA ; Attr to A.
    ORA SPRITE_PAGE+2 ; Combine attrs.
    STA SPRITE_PAGE+2 ; Update attrs.
    TYA ; A val back.
    SBC #$07 ; -= 0x7
RTS: ; 13:08E2, 0x0268E2
    RTS ; Leave.
    .db 00 ; GFX Banks set.
    .db 78
    .db 58
    .db 59
    .db 5A
    .db 00
    .db 0F ; Palette.
    .db 36
    .db 30
    .db 2A
    .db 0F
    .db 36
    .db 30
    .db 2A
    .db 0F
    .db 36
    .db 30
    .db 16
    .db 0F
    .db 36
    .db 30
    .db 16
    .db 0F
    .db 21
    .db 02
    .db 0A
    .db 0F
    .db 21
    .db 21
    .db 21
    .db 0F
    .db 21
    .db 21
    .db 21
    .db 0F
    .db 21
    .db 21
    .db 21
COMMON_HELP_FILE_X_WAIT_PRESSES_AND_LIB_EXIT: ; 13:0909, 0x026909
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Do file.
WAIT_PRESSES_SYNC_EXIT: ; 13:090C, 0x02690C
    JSR WAIT_PRESSES_CLEAR? ; Wait clear.
    JMP LIB_OBJECTS_AND_SETTLE_AND_FLAGS_UNK ; Goto settle and exit.
SUB_A_TO_UNK_SCRIPT_SAVE_STUFF_AND_RESTORE: ; 13:0912, 0x026912
    STA BCD/MODULO/DIGITS_USE_A ; Store ??
    LDA #$00
    STA BCD/MODULO/DIGITS_USE_B ; Clear ??
    JSR SCRIPT_HARD_SWITCH_TO_SOMETHING_HUGE ; Do sub.
    LDA BCD/MODULO/DIGITS_USE_A ; Move ??
    STA PAIR_UNK_2A[2]
    LDA BCD/MODULO/DIGITS_USE_B
    STA PAIR_UNK_2A+1
    RTS ; Leave.
SCRIPT_HELPER_SEED_0x3E8_UNK: ; 13:0924, 0x026924
    LDA #$E8
    LDX #$03 ; Seed 0x03E8?
    STA PAIR_UNK_2A[2] ; Seed store.
    STX PAIR_UNK_2A+1
    RTS ; Leave.
SUB_TODO_GFX_DATA_STORED_AND_MOVE_UNK_TO_WRAM: ; 13:092D, 0x02692D
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM writable.
    JSR VAR_TO_FPTR_IN_GFX_BANKS_AREA? ; GFX bank fucked up here.
    LDA #$04
    STA WRAM_6D20_FOR_EFFECT_LOL_RENAME_ME ; Set ??
    CLC ; Prep add.
    LDA GFX_BANKS_EXTENSION[4] ; Load ptr L.
    ADC #$38 ; += 0x38
    STA WRAM_PTR_UNK[2] ; Store to.
    LDA GFX_BANKS_EXTENSION+1 ; Load ptr H.
    ADC #$00 ; Carry add.
    STA WRAM_PTR_UNK+1 ; Store to WRAM.
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Set up.
    LDY #$00 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from file.
    STA SAVE_GAME_MOD_PAGE_PTR[2] ; Store to.
    INY ; Stream++
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from file.
    STA SAVE_GAME_MOD_PAGE_PTR+1 ; Store to.
    LDY #$00 ; Stream reset.
DATA_NE_0x00: ; 13:0957, 0x026957
    LDA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; Load from moved fptr.
    STA WRAM_ARR_GFX_FILE_DATA_ARR_TODO[2],Y ; Store to WRAM. TODO size.
    INY ; Stream++
    CMP #$00 ; If _ #$00
    BNE DATA_NE_0x00 ; !=, do more.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable.
VAR_TO_FPTR_IN_GFX_BANKS_AREA?: ; 13:0964, 0x026964
    LDA PARTY/BATTLE_ID?_TODO ; Load ??
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Ptr from.
    LDA BCD/MODULO/DIGITS_USE_A ; Ptr to vars. GFX reused.
    STA GFX_BANKS_EXTENSION[4]
    LDA BCD/MODULO/DIGITS_USE_B
    STA GFX_BANKS_EXTENSION+1
    RTS ; Leave.
LOAD_FILE[1]_UPPER_NIBBLE_ONLY: ; 13:0972, 0x026972
    LDY #$01 ; Stream index.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    AND #$F0 ; Keep upper.
    RTS ; Leave.
BANKED_DERP: ; 13:0979, 0x026979
    LDA #$00 ; Val ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do ??
    BCS EXIT_RET_CS ; CS, goto.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM writable.
    LDA PTR_CREATE_SEED_UNK ; Load ??
    STA [BCD/MODULO/DIGITS_USE_A],Y ; Store to ptr.
    CLC ; Ret CC.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Exit disabling wram.
SUB_TODO_WRAM/STATUS_UNK: ; 13:098B, 0x02698B
    JSR SUB_GET_UNK_NEGATIVE_BIT_ONLY ; Do ??
    BNE EXIT_RET_CS ; Set, goto.
SUB_WRAM_UNK_TO_SOLVE: ; 13:0990, 0x026990
    LDA PTR_CREATE_SEED_UNK ; Load ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do ??
    BCS EXIT_RET_CS ; CS, goto.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM write.
    JSR WRAM_HELPER_TOSOLVE ; Do WRAM.
    CLC ; Seed ??
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Do disable exit.
EXIT_RET_CS: ; 13:09A1, 0x0269A1
    SEC ; Seed CS.
    RTS ; Leave.
SUB_SAVE_ID_AND_GFX_AND_RESTORE: ; 13:09A3, 0x0269A3
    LDA PARTY/BATTLE_ID?_TODO ; Save ??
    PHA
    LDA GFX_BANKS_EXTENSION+2 ; Move ??
    STA PARTY/BATTLE_ID?_TODO
    JSR SUB_WRAM_UNK_TO_SOLVE ; Do ??
    PLA ; Restore ??
    STA PARTY/BATTLE_ID?_TODO
    RTS ; Leave.
GFX_FILE_SUB_UNK_PTR_MOD?: ; 13:09B1, 0x0269B1
    JSR ENGINE_WRAM_STATE_WRITEABLE ; WRAM writable.
    SEC ; Prep sub.
    LDY #$16 ; Stream index.
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    SBC GFX_BANKS_EXTENSION+3 ; Sub with ??
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store to file.
    INY ; Stream++
    LDA [GFX_BANKS_EXTENSION[4]],Y ; Load from file.
    SBC #$00 ; Carry sub.
    STA [GFX_BANKS_EXTENSION[4]],Y ; Store to file.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Leave.
SUB_STREAM_AND_CMP_UNK: ; 13:09C7, 0x0269C7
    TAY ; A to Y.
    BEQ Y_EQ_0x00 ; == 0, goto.
    TAX ; Val to X.
    LDY #$00 ; Stream reset.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load from stream.
    AND #$3F ; Keep lower.
    TAY ; Val to index.
    TXA ; X to A.
Y_EQ_0x00: ; 13:09D3, 0x0269D3
    CPY #$20 ; If _ #$20
    RTS ; Return compare.
SUB_UNK_TODO_SAVE_AFFECTED_POSSIBLY?: ; 13:09D6, 0x0269D6
    JSR STREAM_MOVE_AND_BANKED_PROPER_TODO ; Get data?
    JSR GET_FILE_DATA_UNK ; Do fptr ??
    AND LIB_LUT_BIT_TEST_0x80-0x01,X ; Test bit for index.
    BNE TEST_SET ; Set, goto.
    LDA #$04 ; Seed ??
    JSR 1F:02C2 ; Do sub.
    LDX #$66 ; Seed ??
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Create ??
    LDA #$0A
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Play sound smol beep
    LDY #$06 ; Seed file index.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    AND #$7F ; Keep lower.
    STA PTR_CREATE_SEED_UNK ; Store to.
    BNE VAL_NONZERO ; != 0, goto.
    JSR ZERO_SUB_SET_VALUE_WRAM_TODO ; Do set if 0x00.
TEST_SET: ; 13:09FD, 0x0269FD
    LDX #$76 ; Seed file.
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X ; Sub for setup.
    JMP WAIT_PRESSES_CLEAR? ; Goto wait for exit?
VAL_NONZERO: ; 13:0A05, 0x026A05
    JSR PTR_MOVE_TO_UNK_ARR_WRAM
    LDX #$68
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDX #$00
    JSR TEST_SAVE_INDEX_X_CC_0x1-0x5
    BCS 13:0A1F
    STA PARTY/BATTLE_ID?_TODO
    TXA
    PHA
    JSR BANKED_DERP
    PLA
    TAX
    BCC 13:0A2C
    INX
    CPX #$04
    BCC 13:0A0F
    LDX #$6E
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    JMP WAIT_PRESSES_CLEAR?
    JSR ZERO_SUB_SET_VALUE_WRAM_TODO
    JSR SCRIPT_TODO_UNK
    LDX #$6A
    JSR SCRIPT_HELPER_COMMON_TODO_FILE_ID_IN_X
    LDA #$06
    STA SOUND_EFFECT_REQUEST_ARRAY+1
    JMP WAIT_PRESSES_CLEAR?
ZERO_SUB_SET_VALUE_WRAM_TODO: ; 13:0A3F, 0x026A3F
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Writable.
    JSR GET_FILE_DATA_UNK ; Do fptr.
    ORA LIB_LUT_BIT_TEST_0x80-0x01,X ; Set bit.
    STA CURRENT_SAVE_MANIPULATION_PAGE+544,Y ; Store back to save page.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable and exit.
SUB_DEEPER/RESTORE_HELPER: ; 13:0A4E, 0x026A4E
    LDA PARTY/BATTLE_ID?_TODO ; Move ??
    STA GFX_BANKS_EXTENSION+2
    LDA COUNT_LOOPS?_UNK ; Load.
    CMP #$02 ; If _ #$02
    BCC EXIT_SCRIPT_RET_CC ; <, goto.
    LDA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Save file.
    PHA
    LDA ARG/PTR_L
    PHA
    JSR SUB_COORDS_INIT_AND_LOOP_POSSIBLY_MENU ; Do ??Do sub.
    PLA
    STA ARG/PTR_L ; Restore fptr.
    PLA
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    BCS EXIT_CS_RESTORE_ID? ; CS, goto.
EXIT_SCRIPT_RET_CC: ; 13:0A6A, 0x026A6A
    JSR SCRIPT_TODO_UNK ; Do ??
    CLC ; Ret CC.
    RTS ; Do sub.
EXIT_CS_RESTORE_ID?: ; 13:0A6F, 0x026A6F
    LDA GFX_BANKS_EXTENSION+2 ; Restore.
    STA PARTY/BATTLE_ID?_TODO
    RTS ; Leave.
MASK_DATA_UNK: ; 13:0A74, 0x026A74
    .db 00 ; 0x00 - 0x08 here.
    .db 01
    .db 02
    .db 04
    .db 08
    .db 10
    .db 20
    .db 20
MOVE_FILE_X_TO_PTR_0x74_HELPER: ; 13:0A7C, 0x026A7C
    LDA FILE_PTR_H,X ; Move ptr.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    LDA FILE_PTR_L,X
    STA ARG/PTR_L
    RTS
FILE_PTR_H: ; 13:0A87, 0x026A87
    HIGH(R_**:$0000)
FILE_PTR_L: ; 13:0A88, 0x026A88
    LOW(R_**:$0000)
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH(R_**:$0000)
    LOW(R_**:$0000)
    HIGH(1E:1703)
    LOW(1E:1703)
    HIGH(1E:1B03)
    LOW(1E:1B03)
    HIGH(RTS)
    LOW(RTS)
    HIGH(1E:0806)
    LOW(1E:0806)
    HIGH(1E:1006)
    LOW(1E:1006)
    HIGH(1E:0906)
    LOW(1E:0906)
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH(13:0F06)
    LOW(13:0F06)
    HIGH(13:1006)
    LOW(13:1006)
    HIGH(13:1106)
    LOW(13:1106)
    HIGH(13:1206)
    LOW(13:1206)
    HIGH(13:1306)
    LOW(13:1306)
    HIGH(13:1406)
    LOW(13:1406)
    HIGH(13:1506)
    LOW(13:1506)
    HIGH(13:1606)
    LOW(13:1606)
    HIGH(13:1706)
    LOW(13:1706)
    HIGH(13:1806)
    LOW(13:1806)
    HIGH(13:1906)
    LOW(13:1906)
    HIGH(13:1A06)
    LOW(13:1A06)
    HIGH(13:1B06)
    LOW(13:1B06)
    HIGH(13:1C06)
    LOW(13:1C06)
    HIGH(13:1D06)
    LOW(13:1D06)
    HIGH(13:1E06)
    LOW(13:1E06)
    HIGH(13:0706)
    LOW(13:0706)
    HIGH(13:0806)
    LOW(13:0806)
    HIGH(13:0506)
    LOW(13:0506)
    HIGH(13:0A06)
    LOW(13:0A06)
    HIGH(13:0906)
    LOW(13:0906)
    HIGH(1E:0106)
    LOW(1E:0106)
    HIGH(13:0606)
    LOW(13:0606)
    HIGH(SCRIPT_UPDATES_AND_MORE_UNK)
    LOW(SCRIPT_UPDATES_AND_MORE_UNK)
    HIGH(TODO_ROUTINE_NO_MASK_ENTRY)
    LOW(TODO_ROUTINE_NO_MASK_ENTRY)
    HIGH(1E:0506)
    LOW(1E:0506)
    HIGH(1E:0606)
    LOW(1E:0606)
    HIGH(13:1F06)
    LOW(13:1F06)
    HIGH(1E:0006)
    LOW(1E:0006)
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH((null))
    LOW((null))
    HIGH(1E:0B06)
    LOW(1E:0B06)
    HIGH((null))
    LOW((null))
    HIGH(1E:0C06)
    LOW(1E:0C06)
    HIGH(1E:0D06)
    LOW(1E:0D06)
    HIGH(1E:0A06)
    LOW(1E:0A06)
    HIGH(13:0103)
    LOW(13:0103)
    HIGH(1E:0F06)
    LOW(1E:0F06)
    HIGH(1E:0E06)
    LOW(1E:0E06)
    .db 14 ; Phone file. 0x7C
    .db 00
    .db 16 ; 0x7D
    .db 00
    .db 38 ; 0x7E
    .db 03
    .db 18 ; 0x7F
    .db 00
    .db 21 ; 0x80
    .db 00
    .db 1B ; 0x81
    .db 00
STREAM_PROCESS_UNK_INIT: ; 13:0B0F, 0x026B0F
    JSR STREAM_MOVE_AND_BANKED_PROPER_TODO ; Move data?
    LDY #$14 ; Stream index.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load ??
    AND #$0F ; Keep lower.
    TAY ; To Y index.
PROCESS_STREAM_LOOP: ; 13:0B19, 0x026B19
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from ptr.
    BEQ PTR_EQ_0x00 ; == 0, goto.
    JSR SCRIPT_COMMAND_LAUNCHER ; Do command launch.
    JMP PROCESS_STREAM_LOOP ; Loop more.
PTR_EQ_0x00: ; 13:0B23, 0x026B23
    LDA MAIN_FLAG_UNK ; Load ??
    BEQ WAIT_PRESSES_CLEAR? ; == 0, goto.
    JSR LIB_RTN_PTR_CREATION/SHIFT+CLEAR_UNK_MOVE_PTR_DOWN_UNK ; Do.
    LDA #$40
    STA **:$0034 ; Set ??
    BNE STREAM_PROCESS_UNK_INIT ; Always taken, loop.
WAIT_PRESSES_CLEAR?: ; 13:0B30, 0x026B30
    LDA ROUTINE_CONTINUE_FLAG? ; Load ??
    BEQ EXIT_FINISHED_RET_CS ; == 0, goto.
    LDA #$00
    STA ROUTINE_CONTINUE_FLAG? ; Clear flag.
    CLC ; Ret CC, continue.
    JMP WAIT_ANY_BUTTONS_PRESSED_RET_PRESSED ; Goto.
EXIT_FINISHED_RET_CS: ; 13:0B3C, 0x026B3C
    SEC ; Ret CS, finished.
    RTS ; Leave.
STREAM_MOVE_AND_BANKED_PROPER_TODO: ; 13:0B3E, 0x026B3E
    JSR SETUP_PTR_FROM_PTR_TODO ; Do.
EXIT_STREAM_DATA_AS_R6_ROUTINE: ; 13:0B41, 0x026B41
    LDY #$01 ; Stream index for value.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load data from file.
    JMP BANK_HANDLER_R6_AND_BASE_FILE? ; Set R6 for routine called, base the bank index.
STREAM_MOVE_BANK_STREAM_READ_UNK: ; 13:0B48, 0x026B48
    JSR STREAM_MOVE_AND_BANKED_PROPER_TODO ; Do.
    LDY #$1C ; Stream index.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load from stream.
    TAY ; To Y index.
    JMP PROCESS_STREAM_LOOP ; Goto.
LIB_STREAM_COMMANDS_PROCESS_UNK: ; 13:0B53, 0x026B53
    JSR LIB_RTN_PTR_CREATION/SHIFT+CLEAR_UNK_MOVE_PTR_DOWN_UNK ; Do ??
    JSR STREAM_MOVE_AND_BANKED_PROPER_TODO ; Do ??
    LDY SCRIPT_MAIN_FILE_INDEX ; Y from ??
    JMP PROCESS_STREAM_LOOP ; Goto.
SCRIPT_COMMAND_LAUNCHER: ; 13:0B5E, 0x026B5E
    ASL A ; << 1, *2.
    TAX ; To X index.
    LDA RTN_TBL_H,X ; PTR to stack for RTS Launch.
    PHA
    LDA RTN_TBL_L,X
    PHA
    RTS ; Launch it.
RTN_TBL_L: ; 13:0B69, 0x026B69
    LOW(WAIT_PRESSES_CLEAR?) ; 0x00
RTN_TBL_H: ; 13:0B6A, 0x026B6A
    HIGH(WAIT_PRESSES_CLEAR?) ; Wait for CTRL press, any button. CC continue, CS completed.
    LOW(OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?) ; 0x01 goto?
    HIGH(OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?)
    LOW(MAIN_FPTR_GOSUB) ; 0x02
    HIGH(MAIN_FPTR_GOSUB)
    LOW(RETURN_EXTRA_LAYER?) ; 0x03
    HIGH(RETURN_EXTRA_LAYER?) ; Pulls stack 2x, returns.
    LOW(SCRIPT_UNK_A)
    HIGH(SCRIPT_UNK_A)
    LOW(SCRIPT_UNK_B)
    HIGH(SCRIPT_UNK_B)
    LOW(SCRIPT_UNK_B)
    HIGH(SCRIPT_UNK_B)
    LOW(SELF_LOCKUP_JMP)
    HIGH(SELF_LOCKUP_JMP)
    LOW(13:0D0D)
    HIGH(13:0D0D)
    LOW(13:0DA2)
    HIGH(13:0DA2)
    LOW(13:0C71)
    HIGH(13:0C71)
    LOW(13:0C71)
    HIGH(13:0C71)
    LOW(13:0C61)
    HIGH(13:0C61)
    LOW(13:0C6A)
    HIGH(13:0C6A)
    LOW(SELF_LOCKUP_JMP)
    HIGH(SELF_LOCKUP_JMP)
    LOW(ENGINE_RESET_GAME)
    HIGH(ENGINE_RESET_GAME)
    LOW(13:0E23)
    HIGH(13:0E23)
    LOW(13:0E35)
    HIGH(13:0E35)
    LOW(13:0E4A)
    HIGH(13:0E4A)
    LOW(13:0E6C)
    HIGH(13:0E6C)
    LOW(13:0E5E)
    HIGH(13:0E5E)
    LOW(13:0E7A)
    HIGH(13:0E7A)
    LOW(13:0E8A)
    HIGH(13:0E8A)
    LOW(13:148D)
    HIGH(13:148D)
    LOW(13:10AD)
    HIGH(13:10AD)
    LOW(13:0E97)
    HIGH(13:0E97)
    LOW(13:0EBD)
    HIGH(13:0EBD)
    LOW(13:1505)
    HIGH(13:1505)
    LOW(13:10E4)
    HIGH(13:10E4)
    LOW(13:0E9E)
    HIGH(13:0E9E)
    LOW(13:0EC5)
    HIGH(13:0EC5)
    LOW(13:1484)
    HIGH(13:1484)
    LOW(13:1196)
    HIGH(13:1196)
    LOW(13:1172)
    HIGH(13:1172)
    LOW(13:1184)
    HIGH(13:1184)
    LOW(13:0FAC)
    HIGH(13:0FAC)
    LOW(13:0FB8)
    HIGH(13:0FB8)
    LOW(13:0EB6)
    HIGH(13:0EB6)
    LOW(13:0ED3)
    HIGH(13:0ED3)
    LOW(13:0F8E)
    HIGH(13:0F8E)
    LOW(13:0EDB)
    HIGH(13:0EDB)
    LOW(13:0EEE)
    HIGH(13:0EEE)
    LOW(13:0F15)
    HIGH(13:0F15)
    LOW(13:0F2F)
    HIGH(13:0F2F)
    LOW(13:0FDC)
    HIGH(13:0FDC)
    LOW(13:0FD1)
    HIGH(13:0FD1)
    LOW(13:0FEA)
    HIGH(13:0FEA)
    LOW(13:0FF5)
    HIGH(13:0FF5)
    LOW(13:100C)
    HIGH(13:100C)
    LOW(13:103C)
    HIGH(13:103C)
    LOW(13:0F5E)
    HIGH(13:0F5E)
    LOW(13:1028)
    HIGH(13:1028)
    LOW(13:0C71)
    HIGH(13:0C71)
    LOW(13:0C71)
    HIGH(13:0C71)
    LOW(13:13D8)
    HIGH(13:13D8)
    LOW(13:0DFA)
    HIGH(13:0DFA)
    LOW(13:11BD)
    HIGH(13:11BD)
    LOW(13:11D8)
    HIGH(13:11D8)
    LOW(13:10D1)
    HIGH(13:10D1)
    LOW(13:1235)
    HIGH(13:1235)
    LOW(13:142B)
    HIGH(13:142B)
    LOW(13:1420)
    HIGH(13:1420)
    LOW(13:1246)
    HIGH(13:1246)
    LOW(13:0C57)
    HIGH(13:0C57)
    LOW(13:0C71)
    HIGH(13:0C71)
    LOW(13:14EB)
    HIGH(13:14EB)
    LOW(13:1440)
    HIGH(13:1440)
    LOW(13:1459)
    HIGH(13:1459)
    LOW(13:1472)
    HIGH(13:1472)
    LOW(13:1511)
    HIGH(13:1511)
    LOW(13:1290)
    HIGH(13:1290)
    LOW(13:12FC)
    HIGH(13:12FC)
    LOW(13:1323)
    HIGH(13:1323)
    LOW(13:1339)
    HIGH(13:1339)
    LOW(13:134A)
    HIGH(13:134A)
    LOW(13:13A8)
    HIGH(13:13A8)
    LOW(13:13B5)
    HIGH(13:13B5)
    LOW(13:1317)
    HIGH(13:1317)
    LOW(13:1432)
    HIGH(13:1432)
    LOW(13:13E8)
    HIGH(13:13E8)
    LOW(13:15A9)
    HIGH(13:15A9)
    LOW(13:164A)
    HIGH(13:164A)
    LOW(13:15E2)
    HIGH(13:15E2)
    LOW(13:1600)
    HIGH(13:1600)
    LOW(13:15F1)
    HIGH(13:15F1)
    LOW(13:1546)
    HIGH(13:1546)
    LOW(13:14A0)
    HIGH(13:14A0)
    LOW(13:14A9)
    HIGH(13:14A9)
    LOW(13:0EAA)
    HIGH(13:0EAA)
    LOW(13:1629)
    HIGH(13:1629)
    LOW(13:1695)
    HIGH(13:1695)
    LOW(13:16AC)
    HIGH(13:16AC)
    LOW(13:16B4)
    HIGH(13:16B4)
    LOW(13:16BC)
    HIGH(13:16BC)
    LOW(SELF_LOCKUP_JMP)
    HIGH(SELF_LOCKUP_JMP)
    LOW(13:16C4)
    HIGH(13:16C4)
    LOW(13:15C9)
    HIGH(13:15C9)
    LOW(13:1640)
    HIGH(13:1640)
    LOW(13:11FD)
    HIGH(13:11FD)
    LOW(13:1223)
    HIGH(13:1223)
    LOW(13:16DB)
    HIGH(13:16DB)
    LOW(13:16EA)
    HIGH(13:16EA)
    LOW(13:170C)
    HIGH(13:170C)
    LOW(13:1725)
    HIGH(13:1725)
    LOW(13:172D)
    HIGH(13:172D)
    LOW(13:1735)
    HIGH(13:1735)
    LOW(13:173F)
    HIGH(13:173F)
    LOW(13:1751)
    HIGH(13:1751)
SELF_LOCKUP_JMP: ; 13:0C41, 0x026C41
    JMP SELF_LOCKUP_JMP ; JMP Self?
PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER: ; 13:0C44, 0x026C44
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Store FPTR.
    STX FPTR_PACKET_CREATION/PTR_H_FILE_IDK+1
    JMP ENGINE_CREATE_UPDATE_BUF_INIT_INC? ; Create.
ENGINE_RESET_GAME: ; 13:0C4B, 0x026C4B
    JSR WAIT_PRESSES_CLEAR? ; Do.
    JSR ENGINE_PALETTE_FADE_OUT ; Palette.
    JMP VECTOR_RESET ; Reset the game.
SCRIPT_UNK_B: ; 13:0C54, 0x026C54
    INY
    INY
    RTS
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    CLC
    ADC #$04
    STA MAIN_FLAG_UNK
    INY
    RTS
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    CLC
    ADC #$C0
    JMP 13:0C6D
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    CMP PTR_CREATE_SEED_UNK
    BNE OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
    TXA
    LSR A
    CMP **:$0034
    BNE OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
OPT_A_STREAM_SKIP_AND_RETURN: ; 13:0C77, 0x026C77
    INY ; Stream += 2
    INY
    RTS ; Leave.
OPTIONS_SKIP_FOR_CS: ; 13:0C7A, 0x026C7A
    BCS OPT_A_STREAM_SKIP_AND_RETURN ; CS, do skip.
    BCC OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
OPTIONS_SKIP_FOR_CC: ; 13:0C7E, 0x026C7E
    BCC OPT_A_STREAM_SKIP_AND_RETURN ; CC, do skip.
    BCS OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
OPTIONS_SKIP_FOR_NE: ; 13:0C82, 0x026C82
    BNE OPT_A_STREAM_SKIP_AND_RETURN ; !=, do skip.
    BEQ OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
OPTIONS_SKIP_FOR_EQ: ; 13:0C86, 0x026C86
    BEQ OPT_A_STREAM_SKIP_AND_RETURN ; ==, do skip.
OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?: ; 13:0C88, 0x026C88
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    TAY ; As new stream index.
    RTS
MAIN_FPTR_GOSUB: ; 13:0C8D, 0x026C8D
    LDA SCRIPT_MAIN_FPTR[2] ; Save FPTR to stack.
    PHA
    LDA SCRIPT_MAIN_FPTR+1
    PHA
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load FPTR from file to stack.
    PHA
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    PHA
    INY ; Stream ++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    STA SCRIPT_MAIN_FILE_INDEX ; Store as index, replaced file.
    INY
    PLA
    STA SCRIPT_MAIN_FPTR+1 ; Rewrite FPTR from stack.
    PLA
    STA SCRIPT_MAIN_FPTR[2]
    TYA ; Save index of saved to stack.
    PHA
    LDY SCRIPT_MAIN_FILE_INDEX ; Load index for new file.
    JSR PROCESS_STREAM_LOOP ; Process it.
    PLA ; Restore original file from.
    TAY
    PLA
    STA SCRIPT_MAIN_FPTR+1
    PLA
    STA SCRIPT_MAIN_FPTR[2]
    RTS ; Leave.
RETURN_EXTRA_LAYER?: ; 13:0CB7, 0x026CB7
    PLA
    PLA
    RTS
SCRIPT_UNK_A: ; 13:0CBA, 0x026CBA
    LDA CURRENT_SAVE_MANIPULATION_PAGE+4
    AND #$3F
    CMP #$24
    BCC 13:0D05
    CMP #$2C
    BCS 13:0D05
    JSR ENGINE_PALETTE_SCRIPT_TO_TARGET
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA NMI_GFX_COUNTER
    INY
    LSR A
    LSR A
    LSR A
    AND #$07
    TAX
    LDA BG_COLOR_CHANGE_ARR,X
    STA ENGINE_COMMIT_PALETTE+1
    STA ENGINE_COMMIT_PALETTE+5
    STA ENGINE_COMMIT_PALETTE+9
    STA ENGINE_COMMIT_PALETTE+13
    JSR CREATE_PALETTE_UPLOAD_PACKET_0x1_WAIT
    LDA NMI_GFX_COUNTER
    BNE 13:0CD0
    LDA SCRIPT_R6_UNK
    LDX #$02
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    LDA SCRIPT_R7_UNK
    LDX #$03
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    JMP ENGINE_PALETTE_UPLOAD_WITH_PACKET_HELPER
BG_COLOR_CHANGE_ARR: ; 13:0CFD, 0x026CFD
    .db 21
    .db 22
    .db 23
    .db 24
    .db 25
    .db 24
    .db 23
    .db 22
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    TAX
    INY
    JMP ENGINE_DELAY_X_FRAMES
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA ARG/PTR_L
    INY
    STY SCRIPT_MAIN_FILE_INDEX
SCRIPT_USE_ENTRY_TODO_UNK: ; 13:0D1A, 0x026D1A
    LDA ROUTINE_CONTINUE_FLAG? ; Load ??
    BNE VAL_NONZERO ; != 0, goto.
    JSR PACKETY_HELPER_SAVE_AND_RESTORE_CREATION ; Do ??
VAL_NONZERO: ; 13:0D21, 0x026D21
    LDA #$08 ; Val ??
    CMP ROUTINE_CONTINUE_FLAG? ; If _ #$2C
    BEQ VAL_EQ_FLAG_PORTION ; ==, goto.
STORE_FLAG_RTN_UNK_TODO: ; 13:0D27, 0x026D27
    STA ROUTINE_CONTINUE_FLAG? ; Store diff.
EXIT_UNK: ; 13:0D29, 0x026D29
    LDY GFX_COORD_VERTICAL_OFFSET ; Load ??
    CPY #$1B ; If _ #$1B
    BCC VAL_LT_0x1B ; <, goto.
    JSR GFX_COORD_ADJUSTMENT_TODO ; Do ??
    DEC R_**:$002D ; --
    BMI VAL_NEGATIVE ; Negative, goto.
VAL_LT_0x1B: ; 13:0D36, 0x026D36
    LDA R_**:$002D ; Load ??
    BNE VAL_NONZERO ; Nonzero, goto.
    LDY GFX_COORD_VERTICAL_OFFSET ; Load ??
    CPY #$19 ; If _ #$19
    BCS VAL_NEGATIVE ; >=, goto.
VAL_NONZERO: ; 13:0D40, 0x026D40
    JSR LIB_READING_PPU_ROM_$0110_HELPER ; Load ??
    LDA #$16 ; Seed ??
    STA R_**:$0070 ; Set ??
    LDA #$00
    STA ENGINE_PACKINATOR_ARG_SEED_BLANK_PRE_COUNT ; Clear ??
    JSR RTN_SETTLE_UPDATE_TODO ; Settle ??
    JSR SUB_MOD_PACKETS_TODO_UNK ; Do ??
    CMP #$00 ; If _ #$00
    BEQ VAL_EQ_0x00 ; == 0, goto.
    LDY #$00 ; Stream index.
    LDA [FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]],Y ; Load from file.
    CMP #$03 ; If _ #$03
    BEQ VAL_EQ_0x3 ; ==, goto.
    CMP #$00 ; If _ #$00
    BNE EXIT_UNK ; !=, goto.
VAL_EQ_0x00: ; 13:0D61, 0x026D61
    JSR EXIT_STREAM_DATA_AS_R6_ROUTINE ; Do routine.
    LDA #$00
    STA R_**:$0070 ; Clear ??
    STA ENGINE_PACKINATOR_ARG_SEED_BLANK_PRE_COUNT ; Clear ??
    LDY SCRIPT_MAIN_FILE_INDEX ; Load index.
SUB_HELPER_UNK_TODO_COORD: ; 13:0D6C, 0x026D6C
    SEC ; Prep sub.
    LDA GFX_COORD_VERTICAL_OFFSET ; Load ??
    SBC #$13 ; Sub with.
    LSR A ; >> 1, /2.
    STA R_**:$002D ; Store to.
    RTS ; Leave.
VAL_EQ_0x3: ; 13:0D75, 0x026D75
    INC FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; ++
    BNE VAL_EQ_FLAG_PORTION ; != 0, goto.
    INC ARG/PTR_L ; ++
VAL_EQ_FLAG_PORTION: ; 13:0D7B, 0x026D7B
    LDY GFX_COORD_VERTICAL_OFFSET ; Load ??
    CPY #$1B ; If _ #$1B
    BCC VAL_NEGATIVE ; <, goto.
    JSR GFX_COORD_ADJUSTMENT_TODO ; Do ??
VAL_NEGATIVE: ; 13:0D84, 0x026D84
    JSR SUB_HELPER_UNK_TODO_COORD ; Do ??
    LDA #$91 ; Seed menu.
    LDX #$AD
    JSR MENU_HELPER_UNK_TODO ; Do menu ??
    JMP VAL_NONZERO ; Goto.
    .db 01
    .db 01
    .db 00
    .db 00
    .db C0
    .db 3B
    .db 12
GFX_COORD_ADJUSTMENT_TODO: ; 13:0D98, 0x026D98
    LDX #$04 ; Seed ??
    JSR SUB_ADDRESSES_UNK_ENTRY_ADD ; Do ??
    DEC GFX_COORD_VERTICAL_OFFSET ; --
    DEC GFX_COORD_VERTICAL_OFFSET
    RTS ; Leave.
    STY SCRIPT_MAIN_FILE_INDEX ; Store stream.
    JSR SEED_TODO_SOLVE ; Do.
    LDY SCRIPT_MAIN_FILE_INDEX ; Load stream.
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load selected?
    JMP OPTIONS_SKIP_FOR_EQ ; Goto.
SEED_TODO_SOLVE: ; 13:0DAE, 0x026DAE
    LDA #$DF ; Seed ??
    LDX #$AD
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Store FPTR.
    STX ARG/PTR_L
    LDA #$09 ; Seed ??
    JSR STORE_FLAG_RTN_UNK_TODO ; Do ??
    LDA #$EC ; Seed menu.
    LDX #$AD
    BNE MENU_HELPER_UNK_TODO ; Inject it.
STREAMS_MULTIMENUS_UNK: ; 13:0DC1, 0x026DC1
    LDA #$F3 ; Seed FPTR 13:0DF3
    LDX #$AD
MENU_HELPER_UNK_TODO: ; 13:0DC5, 0x026DC5
    STA FPTR_MENU_MASTER[2] ; Store FPTR for menu.
    STX FPTR_MENU_MASTER+1
    LDY #$06 ; Stream index into,
    LDA [FPTR_MENU_MASTER[2]],Y ; Load from FPTR for menu.
    STA GFX_COORD_HORIZONTAL_OFFSET ; Store to, HCoord.
    LDA #$D1 ; Seed FPTR submenu 1F:10D1, LUT.
    LDX #$F0
    STA FPTR_MENU_SUBMENU[2] ; Store submenu.
    STX FPTR_MENU_SUBMENU+1
    JSR MENU_FILE_MAKE_ROW_OFFSET? ; Menu.
    LDA #$08
    STA GFX_COORD_HORIZONTAL_OFFSET ; Set coord H.
    RTS ; Leave.
    .db A0
    .db A0
    .db A0
    .db A0
    .db D9
    .db E5
    .db F3
    .db A0
    .db A0
    .db CE
    .db EF
    .db A0
    .db 00
    .db 02
    .db 01
    .db 05
    .db 00
    .db 80
    .db 3A
    .db 0B
    .db 02 ; File.
    .db 01
    .db 09
    .db 00
    .db C0
    .db 3A
    .db 09
    .db C8
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA ARG/PTR_L
    INY
    STY SCRIPT_MAIN_FILE_INDEX
    LDA #$37
    JSR STORE_FLAG_RTN_UNK_TODO
    JSR STREAMS_MULTIMENUS_UNK
    LDY SCRIPT_MAIN_FILE_INDEX
    BIT SCRIPT_MENU_STATUS
    BVS 0x40_SET
    LDA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL
    BNE EXIT_RESTREAM_FROM_STREAM
    INY
    INY
    RTS
EXIT_RESTREAM_FROM_STREAM: ; 13:0E1C, 0x026E1C
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load from file.
    TAY ; Store as stream pos.
    RTS ; Leave.
0x40_SET: ; 13:0E20, 0x026E20
    JMP OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC? ; Goto.
    JSR ENGINE_WRAM_STATE_WRITEABLE
    JSR L_13:0E58
    ORA LIB_LUT_BIT_TEST_0x80-0x01,X
    STA CURRENT_SAVE_MANIPULATION_PAGE+512,Y
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    JSR ENGINE_WRAM_STATE_WRITEABLE
    JSR L_13:0E58
    ORA LIB_LUT_BIT_TEST_0x80-0x01,X
    EOR LIB_LUT_BIT_TEST_0x80-0x01,X
    STA CURRENT_SAVE_MANIPULATION_PAGE+512,Y
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    JSR L_13:0E58
    LDY SCRIPT_MAIN_FILE_INDEX
    AND LIB_LUT_BIT_TEST_0x80-0x01,X
    EOR LIB_LUT_BIT_TEST_0x80-0x01,X
    JMP OPTIONS_SKIP_FOR_EQ
L_13:0E58: ; 13:0E58, 0x026E58
    INY
    STY SCRIPT_MAIN_FILE_INDEX
    JMP GET_STREAM_INDEX_AND_VALUE_TODO
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    TAX
    INY
    JSR ENGINE_WRAM_STATE_WRITEABLE
    INC CURRENT_SAVE_MANIPULATION_PAGE+608,X
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    TAX
    INY
    JSR ENGINE_WRAM_STATE_WRITEABLE
    DEC CURRENT_SAVE_MANIPULATION_PAGE+608,X
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    TAX
    INY
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDA #$00
    STA CURRENT_SAVE_MANIPULATION_PAGE+608,X
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    TAX
    INY
    LDA CURRENT_SAVE_MANIPULATION_PAGE+608,X
    CMP [SCRIPT_MAIN_FPTR[2]],Y
    JMP OPTIONS_SKIP_FOR_CS
    JSR L_13:1032
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA PAIR_UNK_2A[2]
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA PAIR_UNK_2A+1
    INY
    RTS
    LDA CURRENT_SAVE_MANIPULATION_PAGE+16
    STA PAIR_UNK_2A[2]
    LDA CURRENT_SAVE_MANIPULATION_PAGE+17
    STA PAIR_UNK_2A+1
    INY
    RTS
    JSR L_13:0FC4
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
    INY
    LDA PARTY/BATTLE_ID?_TODO
    CMP [SCRIPT_MAIN_FPTR[2]],Y
    JMP OPTIONS_SKIP_FOR_EQ
    SEC
    INY
    LDA PAIR_UNK_2A[2]
    SBC [SCRIPT_MAIN_FPTR[2]],Y
    INY
    LDA PAIR_UNK_2A+1
    SBC [SCRIPT_MAIN_FPTR[2]],Y
    JMP OPTIONS_SKIP_FOR_CS
    INY
    LDA PTR_CREATE_SEED_UNK
    CMP [SCRIPT_MAIN_FPTR[2]],Y
    JMP OPTIONS_SKIP_FOR_EQ
    CLC
    LDA CURRENT_SAVE_MANIPULATION_PAGE+16
    ADC PAIR_UNK_2A[2]
    STA BCD/MODULO/DIGITS_USE_A
    LDA CURRENT_SAVE_MANIPULATION_PAGE+17
    ADC PAIR_UNK_2A+1
    STA BCD/MODULO/DIGITS_USE_B
    BCS L_13:0F12
    BCC L_13:0EFF
    SEC
    LDA CURRENT_SAVE_MANIPULATION_PAGE+16
    SBC PAIR_UNK_2A[2]
    STA BCD/MODULO/DIGITS_USE_A
    LDA CURRENT_SAVE_MANIPULATION_PAGE+17
    SBC PAIR_UNK_2A+1
    STA BCD/MODULO/DIGITS_USE_B
    BCC L_13:0F12
L_13:0EFF: ; 13:0EFF, 0x026EFF
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDA BCD/MODULO/DIGITS_USE_A
    STA CURRENT_SAVE_MANIPULATION_PAGE+16
    LDA BCD/MODULO/DIGITS_USE_B
    STA CURRENT_SAVE_MANIPULATION_PAGE+17
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    INY
    RTS
L_13:0F12: ; 13:0F12, 0x026F12
    JMP OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
    CLC
    LDA CURRENT_SAVE_MANIPULATION_PAGE+18
    ADC PAIR_UNK_2A[2]
    STA BCD/MODULO/DIGITS_USE_A
    LDA CURRENT_SAVE_MANIPULATION_PAGE+19
    ADC PAIR_UNK_2A+1
    STA BCD/MODULO/DIGITS_USE_B
    LDA CURRENT_SAVE_MANIPULATION_PAGE+20
    ADC #$00
    STA BCD/MODULO/DIGITS_USE_C
    BCS L_13:0F12
    BCC L_13:0F47
    SEC
    LDA CURRENT_SAVE_MANIPULATION_PAGE+18
    SBC PAIR_UNK_2A[2]
    STA BCD/MODULO/DIGITS_USE_A
    LDA CURRENT_SAVE_MANIPULATION_PAGE+19
    SBC PAIR_UNK_2A+1
    STA BCD/MODULO/DIGITS_USE_B
    LDA CURRENT_SAVE_MANIPULATION_PAGE+20
    SBC #$00
    STA BCD/MODULO/DIGITS_USE_C
    BCC L_13:0F12
L_13:0F47: ; 13:0F47, 0x026F47
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDA BCD/MODULO/DIGITS_USE_A
    STA CURRENT_SAVE_MANIPULATION_PAGE+18
    LDA BCD/MODULO/DIGITS_USE_B
    STA CURRENT_SAVE_MANIPULATION_PAGE+19
    LDA BCD/MODULO/DIGITS_USE_C
    STA CURRENT_SAVE_MANIPULATION_PAGE+20
    INY
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA SAVE_GAME_MOD_PAGE_PTR[2]
    STY SCRIPT_MAIN_FILE_INDEX
    LDA PAIR_UNK_2A[2]
    STA BCD/MODULO/DIGITS_USE_A
    LDA PAIR_UNK_2A+1
    STA BCD/MODULO/DIGITS_USE_B
    JSR LIB_DECIMAL?_UNK
    LDA #$64
    STA SAVE_GAME_MOD_PAGE_PTR[2]
    JSR ENGINE_BINARY_MODULO_HELPER
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    LDA BCD/MODULO/DIGITS_USE_C
    BNE L_13:0F87
    LDA BCD/MODULO/DIGITS_USE_A
    STA PAIR_UNK_2A[2]
    LDA BCD/MODULO/DIGITS_USE_B
    STA PAIR_UNK_2A+1
    RTS
L_13:0F87: ; 13:0F87, 0x026F87
    LDA #$FF
    STA PAIR_UNK_2A[2]
    STA PAIR_UNK_2A+1
    RTS
    JSR L_13:0FC4
    LDX #$00
L_13:0F93: ; 13:0F93, 0x026F93
    JSR TEST_SAVE_INDEX_X_CC_0x1-0x5
    BCS L_13:0FA5
    STA PARTY/BATTLE_ID?_TODO
    TXA
    PHA
    LDA PTR_CREATE_SEED_UNK
    JSR TEST_FOR_VAL_EQ_PASSED
    PLA
    TAX
    BCC L_13:101E
L_13:0FA5: ; 13:0FA5, 0x026FA5
    INX
    CPX #$04
    BCC L_13:0F93
    BCS L_13:1023
    JSR L_13:0FC4
    LDA PTR_CREATE_SEED_UNK
    JSR TEST_FOR_VAL_EQ_PASSED
    BCC L_13:101E
    BCS L_13:1023
    JSR L_13:0FC4
    LDA PTR_CREATE_SEED_UNK
    JSR L_13:1063
    BCS L_13:1023
    BCC L_13:101E
L_13:0FC4: ; 13:0FC4, 0x026FC4
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA PTR_CREATE_SEED_UNK
    STY SCRIPT_MAIN_FILE_INDEX
    JSR PTR_AND_BANK_R6_UNK
    JMP PTR_MOVE_TO_UNK_ARR_WRAM
    STY SCRIPT_MAIN_FILE_INDEX
    LDA #$00
    JSR TEST_FOR_VAL_EQ_PASSED
    BCS L_13:1023
    BCC L_13:0FFE
    STY SCRIPT_MAIN_FILE_INDEX
    JSR SUB_GET_UNK_NEGATIVE_BIT_ONLY
    PHP
    JSR EXIT_STREAM_DATA_AS_R6_ROUTINE
    PLP
    BNE L_13:1023
    BEQ L_13:0FEC
    STY SCRIPT_MAIN_FILE_INDEX
L_13:0FEC: ; 13:0FEC, 0x026FEC
    LDA PTR_CREATE_SEED_UNK
    JSR TEST_FOR_VAL_EQ_PASSED
    BCS L_13:1023
    BCC L_13:1015
    STY SCRIPT_MAIN_FILE_INDEX
    LDA #$00
    JSR L_13:1063
    BCS L_13:1023
L_13:0FFE: ; 13:0FFE, 0x026FFE
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDA PTR_CREATE_SEED_UNK
    STA [BCD/MODULO/DIGITS_USE_A],Y
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    STY SCRIPT_MAIN_FILE_INDEX
    LDA PTR_CREATE_SEED_UNK
    JSR L_13:1063
    BCS L_13:1023
L_13:1015: ; 13:1015, 0x027015
    JSR ENGINE_WRAM_STATE_WRITEABLE
    JSR WRAM_HELPER_TOSOLVE
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED
L_13:101E: ; 13:101E, 0x02701E
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    INY
    RTS
L_13:1023: ; 13:1023, 0x027023
    LDY SCRIPT_MAIN_FILE_INDEX
    JMP OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
    JSR L_13:1032
    JSR L_13:0728
    BCC L_13:101E
    BCS L_13:1023
L_13:1032: ; 13:1032, 0x027032
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA PARTY/BATTLE_ID?_TODO
    STY SCRIPT_MAIN_FILE_INDEX
    JMP SCRIPT_TODO_UNK
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STY SCRIPT_MAIN_FILE_INDEX
    PHA
    LDA PARTY/BATTLE_ID?_TODO
    JSR PTR_AND_ADVANCE_TODO
    PLA
    TAY
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    BEQ L_13:1023
    STA PTR_CREATE_SEED_UNK
    JSR PTR_AND_BANK_R6_UNK
    JSR PTR_MOVE_TO_UNK_ARR_WRAM
    JMP L_13:101E
TEST_FOR_VAL_EQ_PASSED: ; 13:1058, 0x027058
    PHA ; Save val. TODO TODO TODO
    LDA PARTY/BATTLE_ID?_TODO ; Load ??
    JSR PTR_AND_ADVANCE_TODO ; Do ??
    PLA ; Pull val passed.
    LDY #$08 ; Seed target.
    BNE SEEDED_ENTRY ; Always taken.
L_13:1063: ; 13:1063, 0x027063
    JSR PTR_VERY_MANUAL_HELPER_76B0 ; Set PTR.
    LDY #$50 ; Seed target.
SEEDED_ENTRY: ; 13:1068, 0x027068
    STY SAVE_GAME_MOD_PAGE_PTR[2] ; Y to.
    LDY #$00 ; Reseet.
LT_TARGET: ; 13:106C, 0x02706C
    CMP [BCD/MODULO/DIGITS_USE_A],Y ; If A _ stream
    BEQ EXIT_RET_CC ; ==, goto.
    INY ; Stream++
    CPY SAVE_GAME_MOD_PAGE_PTR[2] ; If _ target
    BCC LT_TARGET ; <, goto.
    RTS ; Return CS, failed.
EXIT_RET_CC: ; 13:1076, 0x027076
    CLC ; Passed, ret CC.
    RTS ; Leave.
STREAM_MOVE_DOWN_IN_FILE_STREAM_UNK: ; 13:1078, 0x027078
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from stream.
    DEY ; Stream--
    STA [BCD/MODULO/DIGITS_USE_A],Y ; Store to prev.
    INY ; Stream++
WRAM_HELPER_TOSOLVE: ; 13:107E, 0x02707E
    INY ; Stream++
    CPY SAVE_GAME_MOD_PAGE_PTR[2] ; If _ var
    BCC STREAM_MOVE_DOWN_IN_FILE_STREAM_UNK ; <, goto, move down.
    LDA #$00 ; Seed ??
    DEY ; Stream--
    STA [BCD/MODULO/DIGITS_USE_A],Y ; Clear ??
    RTS ; Leave.
PTR_AND_ADVANCE_TODO: ; 13:1089, 0x027089
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Create ptr.
    CLC ; Prep add.
    LDA BCD/MODULO/DIGITS_USE_A ; Load ??
    ADC #$20 ; += 0x20
    STA BCD/MODULO/DIGITS_USE_A ; Store result.
    LDA BCD/MODULO/DIGITS_USE_B ; Carry into.
    ADC #$00
    STA BCD/MODULO/DIGITS_USE_B ; Store result.
    RTS ; Leave.
PTR_VERY_MANUAL_HELPER_76B0: ; 13:109A, 0x02709A
    LDX #$B0
    STX BCD/MODULO/DIGITS_USE_A
    LDX #$76
    STX BCD/MODULO/DIGITS_USE_B
    RTS
SUB_GET_UNK_NEGATIVE_BIT_ONLY: ; 13:10A3, 0x0270A3
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Do sub.
    LDY #$02 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load ??
    AND #$80 ; Keep upper only.
    RTS ; Leave.
    LDA #$18
    STA ROUTINE_CONTINUE_FLAG? ; Set ??
    LDA GFX_COORD_HORIZONTAL_OFFSET ; Save coords.
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    STY SCRIPT_MAIN_FILE_INDEX ; Store index.
    JSR SUB_COORDS_INIT_AND_LOOP_POSSIBLY_MENU ; Do sub.
    PLA
    STA GFX_COORD_VERTICAL_OFFSET ; Restore coords from stack.
    PLA
    STA GFX_COORD_HORIZONTAL_OFFSET
    BCS EXIT_RESTORE_STREAM_INDEX_AND_GO_DEEPER? ; CS,, goto.
VAL_NONZERO: ; 13:10C4, 0x0270C4
    JSR SCRIPT_TODO_UNK ; Do ??
    LDY SCRIPT_MAIN_FILE_INDEX ; Load index.
    INY ; += 2
    INY
    RTS ; Leave.
EXIT_RESTORE_STREAM_INDEX_AND_GO_DEEPER?: ; 13:10CC, 0x0270CC
    LDY SCRIPT_MAIN_FILE_INDEX ; Load index.
    JMP OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC? ; Restream.
    INY ; Stream++
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Move stream index.
    STY SCRIPT_MAIN_FILE_INDEX ; Save stream index.
    TAX ; Val to X.
    CPX #$04 ; If _ #$04
    BCS EXIT_RESTORE_STREAM_INDEX_AND_GO_DEEPER? ; >=, leave.
    LDA CURRENT_SAVE_MANIPULATION_PAGE+8,X ; Load save page.
    BEQ EXIT_RESTORE_STREAM_INDEX_AND_GO_DEEPER? ; == 0, leave.
    STA PARTY/BATTLE_ID?_TODO ; Store ??
    BNE VAL_NONZERO ; != 0, goto.
    STY SCRIPT_MAIN_FILE_INDEX ; Store stream index.
    JSR L_13:1C28 ; Do ??
    LDX #$07 ; Load ??
INDEX_POSITIVE: ; 13:10EB, 0x0270EB
    LDA ARRAY_DATA_TODO_LOOK_AT_ME_BETTER,X ; Move TODO probs good clues here.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8],X ; Store to arr.
    DEX ; Index--
    BPL INDEX_POSITIVE ; Positive, goto.
    LDA #$66 ; Seed 13:1166, todo.
    LDX #$B1
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    STX ARG/PTR_L
    LDA #$1C ; Seed ??
    JSR STORE_FLAG_RTN_UNK_TODO ; Do ??
    LDA #$6C
    LDX #$B1 ; Seed master menu.
    STA FPTR_MENU_MASTER[2]
    STX FPTR_MENU_MASTER+1
    LDA #$6C ; Seed submenu.
    LDX #$00
    STA FPTR_MENU_SUBMENU[2]
    STX FPTR_MENU_SUBMENU+1
    LDA #$00
    STA MENU_COLUMN_INDEX ; Clear menu.
    STA MENU_ROW_INDEX
    STA MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL
MENU_LOOP?: ; 13:1118, 0x027118
    LDX #$0C
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set offset.
    JSR SETTLE_AND_SPRITES_TO_COORD?_IDFK ; Do ??
    LDA SCRIPT_MENU_STATUS ; Load.
    AND #$0C ; Keep 0000.1100
    BEQ VALS_CLEAR ; Clear, goto.
    LDX MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load index.
    LDY RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+4,X ; Load ??
    AND #$08 ; Keep ??
    BEQ VAL_CLEAR ; Clear, goto.
    INY ; Index++
    CPY #$BA ; If _ #$BA
    BNE ALT_UNK ; !=, goto.
    LDY #$B0 ; Seed ??
    BNE ALT_UNK ; Always taken.
VAL_CLEAR: ; 13:1136, 0x027136
    DEY ; --
    CPY #$AF ; If _ #$AF
    BNE ALT_UNK ; !=, goto.
    LDY #$B9 ; Seed ??
ALT_UNK: ; 13:113D, 0x02713D
    TYA ; Y to A.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+4,X ; Store ??
    JSR ENGINE_CURSOR_TO_BG_UPDATE_INTO_MENU? ; As cursor?
    JMP MENU_LOOP? ; Loop.
VALS_CLEAR: ; 13:1146, 0x027146
    JSR CLEAR_MODSTUFF_AND_GOTO ; Clear ??
    LDA BCD/MODULO/DIGITS_USE_A ; Move ??
    STA PAIR_UNK_2A[2]
    LDA BCD/MODULO/DIGITS_USE_B
    STA PAIR_UNK_2A+1
    LDX #$08
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set coord.
    LDY SCRIPT_MAIN_FILE_INDEX ; Load ??
    LDA #$40 ; To test.
    BIT SCRIPT_MENU_STATUS ; Test it.
    JMP OPTIONS_SKIP_FOR_EQ ; Goto.
ARRAY_DATA_TODO_LOOK_AT_ME_BETTER: ; 13:115E, 0x02715E
    .db A0
    .db A0
    .db A4
    .db A0
    .db B0
    .db B0
    .db B0
    .db B0
    .db 23 ; Ptr to, disp update.
    .db 68
    .db 00
    .db 00
    .db 08
    .db 00
    .db 04
    .db 01
    .db 01
    .db 00
    .db CC
    .db 01
    .db A9
    .db 21
    .db 85
    .db 2C
    .db 84
    .db 35
    LDA GFX_COORD_HORIZONTAL_OFFSET ; Save coords.
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    JSR SCRIPT_TODO ; Do ??
    JMP SAVE_COORDS_AND_DO_CARRY_STUFF
    LDA #$22
    STA ROUTINE_CONTINUE_FLAG?
    STY SCRIPT_MAIN_FILE_INDEX
    LDA GFX_COORD_HORIZONTAL_OFFSET
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    JSR L_13:1814
    JMP SAVE_COORDS_AND_DO_CARRY_STUFF
    LDA #$20
    STA ROUTINE_CONTINUE_FLAG?
    STY SCRIPT_MAIN_FILE_INDEX
    LDA GFX_COORD_HORIZONTAL_OFFSET
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    JSR SUB_TODO
SAVE_COORDS_AND_DO_CARRY_STUFF: ; 13:11A5, 0x0271A5
    PLA ; Save coords.
    STA GFX_COORD_VERTICAL_OFFSET
    PLA
    STA GFX_COORD_HORIZONTAL_OFFSET
    BCS CS_PORTION ; CS, goto.
    JSR PTR_AND_BANK_R6_UNK
    JSR PTR_MOVE_TO_UNK_ARR_WRAM
L_13:11B3: ; 13:11B3, 0x0271B3
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    INY
    RTS
CS_PORTION: ; 13:11B8, 0x0271B8
    LDY SCRIPT_MAIN_FILE_INDEX
    JMP OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
    STY SCRIPT_MAIN_FILE_INDEX
    LDX #$00
L_13:11C1: ; 13:11C1, 0x0271C1
    JSR TEST_SAVE_INDEX_X_CC_0x1-0x5
    BCS L_13:11D1
    TAY
    TXA
    PHA
    TYA
    JSR L_13:11E1
    PLA
    TAX
    BCC L_13:11B3
L_13:11D1: ; 13:11D1, 0x0271D1
    INX
    CPX #$04
    BCC L_13:11C1
    BCS CS_PORTION
    STY SCRIPT_MAIN_FILE_INDEX
    JSR L_13:11E8
    BCS CS_PORTION
    BCC L_13:11B3
L_13:11E1: ; 13:11E1, 0x0271E1
    JSR PTR_AND_ADVANCE_TODO
    LDY #$08
    BNE L_13:11ED
L_13:11E8: ; 13:11E8, 0x0271E8
    JSR PTR_VERY_MANUAL_HELPER_76B0
    LDY #$50
L_13:11ED: ; 13:11ED, 0x0271ED
    STY SAVE_GAME_MOD_PAGE_PTR[2]
    LDY #$00
L_13:11F1: ; 13:11F1, 0x0271F1
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    BNE L_13:11FB
    INY
    CPY SAVE_GAME_MOD_PAGE_PTR[2]
    BCC L_13:11F1
    RTS
L_13:11FB: ; 13:11FB, 0x0271FB
    CLC
    RTS
    STY SCRIPT_MAIN_FILE_INDEX
    JSR SUB_DATA_PTR_FROM_RAM[0x28]
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDY #$28
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    BEQ L_13:121B
    STA CURRENT_SAVE_MANIPULATION_PAGE+640
    STY BCD/MODULO/DIGITS_USE_C
    JSR SCRIPT_ENTRY_CLEAR_UNK_AND_MORE
    JSR EXIT_STREAM_DATA_AS_R6_ROUTINE
L_13:1216: ; 13:1216, 0x027216
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    INY
    RTS
L_13:121B: ; 13:121B, 0x02721B
    LDY SCRIPT_MAIN_FILE_INDEX
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED
L_13:1220: ; 13:1220, 0x027220
    JMP OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
    LDA CURRENT_SAVE_MANIPULATION_PAGE+640
    BEQ L_13:1220
    STA PTR_CREATE_SEED_UNK
    STY SCRIPT_MAIN_FILE_INDEX
    JSR PTR_AND_BANK_R6_UNK
    JSR PTR_MOVE_TO_UNK_ARR_WRAM
    JMP L_13:1216
    JSR ENGINE_WRAM_STATE_WRITEABLE
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STY SCRIPT_MAIN_FILE_INDEX
    JSR STREAM_UNK
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    JSR ENGINE_WRAM_STATE_WRITEABLE
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    PHA
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    INY
    STY SCRIPT_MAIN_FILE_INDEX
    LDY #$1F
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y
    DEY
    PLA
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y
    LDY #$00
    LDA #$07
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y
    LDY #$00
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    AND #$3F
    LDY #$1D
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y
    LDY #$14 ; Stream index.
    LDA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Load from file.
    AND #$BF ; Keep 1001.1111
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Store back.
    LDY #$1C ; Streaqm index.
    LDA SCRIPT_MAIN_FILE_INDEX ; Load ??
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Store to.
    LDA WRAM_SCRIPT_COMBINE_IDFK ; Load ??
    ASL A ; << 3, *8.
    ASL A
    ASL A
    TAX ; To X index.
    LDA DATA_UNK_C,X ; Load data.
    LSR A ; >> 2, /4.
    LSR A
    STA WRAM_ONEOFF_IDFK ; Store to WRAM.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Do disabled.
    PLA ; Pull ?? off.
    PLA
    JMP PTR_EQ_0x00 ; Goto.
    LDA ENGINE_MAPPER_BANK_VALS_COMMITTING+1 ; Load R1.
    JSR R1_SUB ; Do sub.
L_13:1295: ; 13:1295, 0x027295
    LDY SCRIPT_MAIN_FILE_INDEX ; Load stream.
    INY ; += 2
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Goto.
R1_SUB: ; 13:129C, 0x02729C
    TAX ; To X index.
    STY SCRIPT_MAIN_FILE_INDEX ; Store stream index.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Wram writable.
    TXA ; X top A.
    EOR FLAG_UNK_23 ; Invert with.
    AND #$7F ; Keep bottom.
    BNE BOTTOM_NONZERO ; != 0, goto.
    RTS ; Leave.
BOTTOM_NONZERO: ; 13:12AA, 0x0272AA
    STX FLAG_UNK_23 ; To flag.
    LDY #$1C ; Stream index.
    LDA SCRIPT_MAIN_FILE_INDEX ; Load ??
    STA [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y ; Write to file.
    JSR SUB_PTR_REBASED_TO_DATA? ; To ??
    ORA #$80 ; Set ??
    STA MAIN_FLAG_UNK ; Store to main ??
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Disabled.
    PLA ; Pull a fuck ton of stuff.
    PLA
    PLA
    PLA
    JMP WAIT_PRESSES_CLEAR? ; Goto wait.
SUB_PTR_REBASED_TO_DATA?: ; 13:12C3, 0x0272C3
    SEC ; Prep sub.
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??[2] ; Load ??
    SBC #$80 ; Sub with.
    STA BCD/MODULO/DIGITS_USE_A ; Store to.
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??+1 ; Load.
    SBC #$67 ; Sub with.
    ASL BCD/MODULO/DIGITS_USE_A ; <<
    ROL A ; Rotate into.
    ASL BCD/MODULO/DIGITS_USE_A ; 2x
    ROL A
    ASL BCD/MODULO/DIGITS_USE_A ; 3x
    ROL A
    RTS ; Leave.
L_13:12D8: ; 13:12D8, 0x0272D8
    STX WRAM_SCRIPT_PAIR_UNK[2]
    STY WRAM_UNK_6797
L_13:12DE: ; 13:12DE, 0x0272DE
    STA WRAM_6780_BASE
    ASL A
    ASL A
    TAX
    LDA SCRIPT_ATTRIBUTES_A,X
    STA R_**:$6788
    LDA SCRIPT_ATTRIBUTE_B,X
    STA R_**:$6794
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA WRAM_SCRIPT_COMBINE_IDFK
    STA WRAM_ONEOFF_IDFK
    RTS
    LDA #$74
    JSR R1_SUB
    LDA #$09
    LDX #$FC
    LDY #$8A
    JSR L_13:12D8
    LDA #$0F
    STA R_**:$679A
    LDX #$10
    JSR ACTION_INDEX_STORE_AND_RETURN_VALUE_UNK
    JMP L_13:1295
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDA #$F8
    STA R_**:$679A
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    LDA #$74
    JSR R1_SUB
    LDA #$0A
    LDX #$1C
    LDY #$8B
    JSR L_13:12D8
    LDX #$08
    JSR ACTION_INDEX_STORE_AND_RETURN_VALUE_UNK
    JMP L_13:1295
    LDA #$74
    JSR R1_SUB
    LDA #$0B
    LDX #$3C
    LDY #$8B
    JSR L_13:12D8
    JMP L_13:1295
    STY SCRIPT_MAIN_FILE_INDEX
    LDA #$F0
    STA FLAG_UNK_23
    LDA #$3F
    STA SCRIPT_R6_ROUTINE_SELECT
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDA #$00
    STA R_**:$67C0
    STA R_**:$67E0
    LDA #$0D
    LDY #$00
    JSR L_13:138B
    LDA #$0E
    LDY #$20
    JSR L_13:138B
    SEC
    LDA PTR_CREATE_SEED_UNK
    SBC #$8F
    STA R_**:$679E
    LDA #$00
    STA R_**:$679F
    STA R_**:$679A
    JSR R6_AND_FILE_MANIP_UNK
    LDX #$10
    JSR ACTION_INDEX_STORE_AND_RETURN_VALUE_UNK
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
L_13:138B: ; 13:138B, 0x02738B
    STA WRAM_6780_BASE,Y
    ASL A
    ASL A
    TAX
    LDA #$28
    STA WRAM_SCRIPT_PAIR_UNK[2],Y
    LDA #$8A
    STA WRAM_UNK_6797,Y
    LDA SCRIPT_ATTRIBUTES_A,X
    STA R_**:$6788,Y
    LDA SCRIPT_ATTRIBUTE_B,X
    STA R_**:$6794,Y
    RTS
    LDA #$F2
    JSR R1_SUB
    LDA #$0F
    JSR L_13:12DE
    JMP L_13:1295
    INY
    STY SCRIPT_MAIN_FILE_INDEX
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    ORA #$80
    STA FIRST_LAUNCHER_HOLD_FLAG?
    LDX #$00
    STX FLAG_UNK_23
    JSR ACTION_INDEX_STORE_AND_RETURN_VALUE_UNK
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    PHA
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PHA
    JSR HUGE_ASS_STREAMS_THINGY_IDFK
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
    STY SCRIPT_MAIN_FILE_INDEX
    LDY #$02
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    AND #$3F
    LDY SCRIPT_MAIN_FILE_INDEX
    CMP WRAM_SCRIPT_COMBINE_IDFK
    JMP OPTIONS_SKIP_FOR_EQ
    STY SCRIPT_MAIN_FILE_INDEX
    LDY #$00
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    AND #$C0
    LDY #$04
    CMP [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y
    BNE L_13:141B
    LDY #$01
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    LDY #$05
    CMP [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y
    BNE L_13:141B
    LDY #$02
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    AND #$C0
    LDY #$06
    CMP [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y
    BNE L_13:141B
    LDY #$03
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    LDY #$07
    CMP [ENGINE_MAP_OBJ_RESERVATIONS/??[2]],Y
    BNE L_13:141B
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    INY
    RTS
L_13:141B: ; 13:141B, 0x02741B
    LDY SCRIPT_MAIN_FILE_INDEX
    JMP OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
    JSR ENGINE_WRAM_STATE_WRITEABLE
    INY
    JSR MISC_FILE_MANIP_WITH_PTR_32_AS_MANIP
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA SWITCH_INIT_PORTION?
    INY
    RTS
    STY SCRIPT_MAIN_FILE_INDEX
    JSR ENGINE_WRAM_STATE_WRITEABLE
    JSR SLOTS_AND_FPTRS_IDFK
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    JSR L_13:1032
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    PHA
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PHA
    LDA PARTY/BATTLE_ID?_TODO
    JSR SUB_INDEX_HELPER_UNK
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    LDY SCRIPT_MAIN_FILE_INDEX
    JMP OPTIONS_SKIP_FOR_CC
    JSR L_13:1032
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    PHA
    LDA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PHA
    LDA PARTY/BATTLE_ID?_TODO
    JSR COMAPRE_IDFK
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??+1
    PLA
    STA ENGINE_MAP_OBJ_RESERVATIONS/??[2]
    LDY SCRIPT_MAIN_FILE_INDEX
    JMP OPTIONS_SKIP_FOR_CC
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA SCRIPT_ENCOUNTER_ID?(SAID_SONG_ID???)
    JSR SUB_PTR_REBASED_TO_DATA?
    STA MAIN_FLAG_UNK
    INY
    STY SCRIPT_MAIN_FILE_INDEX
    PLA
    PLA
    JMP WAIT_PRESSES_CLEAR?
    STY SCRIPT_MAIN_FILE_INDEX
    JSR L_13:1C28
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
    JSR ENGINE_WRAM_STATE_WRITEABLE
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    AND #$3F
    TAX
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA CURRENT_SAVE_MANIPULATION_PAGE[768],X
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    STY SCRIPT_MAIN_FILE_INDEX
    JSR SCRIPT_HELP_SAVE_GAME_FILE
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
    STY SCRIPT_MAIN_FILE_INDEX
    JSR SUB_DATA_PTR_FROM_RAM[0x28]
    LDY #$10
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    JSR LIB_IDFK_DECIMALY_AND_IDK
    JSR SUB_DATA_PTR_FROM_RAM[0x28]
    LDY #$11
    SEC
    LDA SAVE_GAME_MOD_PAGE_PTR[2]
    SBC [BCD/MODULO/DIGITS_USE_A],Y
    STA PAIR_UNK_2A[2]
    INY
    LDA SAVE_GAME_MOD_PAGE_PTR+1
    SBC [BCD/MODULO/DIGITS_USE_A],Y
    STA PAIR_UNK_2A+1
    JSR EXIT_STREAM_DATA_AS_R6_ROUTINE
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDX #$03
L_13:14D0: ; 13:14D0, 0x0274D0
    LDA CURRENT_SAVE_MANIPULATION_PAGE+4,X
    STA CURRENT_SAVE_MANIPULATION_PAGE+12,X
    DEX
    BPL L_13:14D0
    LDA #$00
    STA CURRENT_SAVE_MANIPULATION_PAGE+21
    STA CURRENT_SAVE_MANIPULATION_PAGE+22
    STA CURRENT_SAVE_MANIPULATION_PAGE+23
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDX #$03
L_13:14F0: ; 13:14F0, 0x0274F0
    LDA CURRENT_SAVE_MANIPULATION_PAGE+12,X
    STA CURRENT_SAVE_MANIPULATION_PAGE+4,X
    DEX
    BPL L_13:14F0
    LDA #$20
    STA FIRST_LAUNCHER_HOLD_FLAG?
    LDA #$00
    STA SCRIPT_FLAG_0x22_AUTO_MOVE
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    LDA CURRENT_SAVE_MANIPULATION_PAGE+21
    ORA CURRENT_SAVE_MANIPULATION_PAGE+22
    ORA CURRENT_SAVE_MANIPULATION_PAGE+23
    JMP OPTIONS_SKIP_FOR_NE
    STY SCRIPT_MAIN_FILE_INDEX
    LDA PAIR_UNK_2A[2]
    STA SAVE_GAME_MOD_PAGE_PTR[2]
    LDA PAIR_UNK_2A+1
    STA SAVE_GAME_MOD_PAGE_PTR+1
    LDX #$01
L_13:151D: ; 13:151D, 0x02751D
    JSR TEST_SAVE_INDEX_X_CC_0x1-0x5
    BCS L_13:153D
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA
    LDY #$01
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    BMI L_13:153D
    CLC
    LDA SAVE_GAME_MOD_PAGE_PTR[2]
    ADC PAIR_UNK_2A[2]
    STA PAIR_UNK_2A[2]
    LDA SAVE_GAME_MOD_PAGE_PTR+1
    ADC PAIR_UNK_2A+1
    STA PAIR_UNK_2A+1
    BCC L_13:153D
    JSR L_13:0F87
L_13:153D: ; 13:153D, 0x02753D
    INX
    CPX #$04
    BCC L_13:151D
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
    STY SCRIPT_MAIN_FILE_INDEX
    LDX #$3C
    JSR ENGINE_DELAY_X_FRAMES
    JSR ENGINE_PALETTE_FADE_OUT
    JSR ENGINE_IDK
    JSR PACKETY_HELPER_SAVE_AND_RESTORE_CREATION
    LDA #$55
    STA ROUTINE_CONTINUE_FLAG?
    JSR ENGINE_PALETTE_FORWARD_TO_TARGET
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
ENGINE_IDK: ; 13:1561, 0x027561
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do with writes.
    LDX #$00 ; Count loops.
LOOP_LT: ; 13:1566, 0x027566
    LDA CURRENT_SAVE_MANIPULATION_PAGE+8,X ; Load save offset.
    BEQ SAVE_OFFSET_EQ_0x00 ; == 0, goto.
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Create ptr.
    LDY #$01 ; Seed index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from PTR.
    BMI SAVE_OFFSET_EQ_0x00 ; If negative, goto.
    JSR STREAM_MOVE_INSIDE_FILE_0x3->0x14_0x4->0x15 ; Alt A.
    JSR STREAM_MOVE_INSIDE_FILE_0x5->0x16_0x6->0x17 ; Alt B.
SAVE_OFFSET_EQ_0x00: ; 13:157A, 0x02757A
    INX ; ++
    CPX #$04 ; If _ #$04
    BCC LOOP_LT ; <, goto.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Re-disable.
    LDA #$20 ; Val ??
    JMP ENGINE_MAIN_SONG_REPLACE_AND_THEN_RESTORE_MAIN_SONG? ; Goto.
STREAM_MOVE_INSIDE_FILE_0x3->0x14_0x4->0x15: ; 13:1587, 0x027587
    LDY #$03
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Move A.
    LDY #$14
    STA [BCD/MODULO/DIGITS_USE_A],Y
    LDY #$04
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Move B.
    LDY #$15
    STA [BCD/MODULO/DIGITS_USE_A],Y
    RTS
STREAM_MOVE_INSIDE_FILE_0x5->0x16_0x6->0x17: ; 13:1598, 0x027598
    LDY #$05
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Move A.
    LDY #$16
    STA [BCD/MODULO/DIGITS_USE_A],Y
    LDY #$06
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Move B.
    LDY #$17
    STA [BCD/MODULO/DIGITS_USE_A],Y
    RTS
    JSR STREAM_STORE_AND_SCRIPT_PTR_FROM_VAR
    SEC ; Prep sub.
    LDY #$14
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    LDY #$03
    SBC [BCD/MODULO/DIGITS_USE_A],Y
    LDY #$15
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    LDY #$04
    SBC [BCD/MODULO/DIGITS_USE_A],Y
    LDY SCRIPT_MAIN_FILE_INDEX
    JMP OPTIONS_SKIP_FOR_CS
STREAM_STORE_AND_SCRIPT_PTR_FROM_VAR: ; 13:15C2, 0x0275C2
    STY SCRIPT_MAIN_FILE_INDEX ; Store index.
SUB_DATA_PTR_FROM_RAM[0x28]: ; 13:15C4, 0x0275C4
    LDA PARTY/BATTLE_ID?_TODO ; Load val from.
    JMP CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Create PTR.
    JSR STREAM_STORE_AND_SCRIPT_PTR_FROM_VAR ; Store and make PTR.
    SEC ; Prep sub.
    LDY #$16 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from file.
    LDY #$05 ; Stream index.
    SBC [BCD/MODULO/DIGITS_USE_A],Y ; Sub with.
    LDY #$17 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from file.
    LDY #$06 ; Stream index.
    SBC [BCD/MODULO/DIGITS_USE_A],Y ; Carry sub from file.
    LDY SCRIPT_MAIN_FILE_INDEX ; Stream index.
    JMP OPTIONS_SKIP_FOR_CS ; Goto.
    INY
    JSR STREAM_STORE_AND_SCRIPT_PTR_FROM_VAR
    LDY #$01
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    LDY SCRIPT_MAIN_FILE_INDEX
    AND [SCRIPT_MAIN_FPTR[2]],Y
    JMP OPTIONS_SKIP_FOR_EQ
    INY
    JSR STREAM_STORE_AND_SCRIPT_PTR_FROM_VAR
    LDY #$10
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    LDY SCRIPT_MAIN_FILE_INDEX
    CMP [SCRIPT_MAIN_FPTR[2]],Y
    JMP OPTIONS_SKIP_FOR_CS
    INY
    JSR STREAM_STORE_AND_SCRIPT_PTR_FROM_VAR
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDY SCRIPT_MAIN_FILE_INDEX
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    PHP
    LDY #$01
    PHA
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    TAX
    PLA
    AND [BCD/MODULO/DIGITS_USE_A],Y
    STA [BCD/MODULO/DIGITS_USE_A],Y
    PLP
    BMI 13:1623
    JSR STREAM_MOVE_INSIDE_FILE_0x3->0x14_0x4->0x15
    TXA
    BPL 13:1623
    JSR 13:06F0
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    JSR STREAM_STORE_AND_SCRIPT_PTR_FROM_VAR
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDY SCRIPT_MAIN_FILE_INDEX
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    LDY #$01
    ORA [BCD/MODULO/DIGITS_USE_A],Y
    STA [BCD/MODULO/DIGITS_USE_A],Y
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    JSR STREAM_STORE_AND_SCRIPT_PTR_FROM_VAR
    LDX #$16
    LDY #$05
    BNE 13:1652
    INY
    JSR STREAM_STORE_AND_SCRIPT_PTR_FROM_VAR
    LDX #$14
    LDY #$03
    STX BCD/MODULO/DIGITS_USE_C
    STY BCD/MODULO/DIGITS_USE_D
    CLC
    LDY SCRIPT_MAIN_FILE_INDEX
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    LDY BCD/MODULO/DIGITS_USE_C
    ADC [BCD/MODULO/DIGITS_USE_A],Y
    STA SAVE_GAME_MOD_PAGE_PTR[2]
    INY
    LDA #$00
    ADC [BCD/MODULO/DIGITS_USE_A],Y
    STA SAVE_GAME_MOD_PAGE_PTR+1
    SEC
    LDY BCD/MODULO/DIGITS_USE_D
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    SBC SAVE_GAME_MOD_PAGE_PTR[2]
    INY
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    SBC SAVE_GAME_MOD_PAGE_PTR+1
    BCS 13:1681
    LDY BCD/MODULO/DIGITS_USE_D
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    STA SAVE_GAME_MOD_PAGE_PTR[2]
    INY
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    STA SAVE_GAME_MOD_PAGE_PTR+1
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDY BCD/MODULO/DIGITS_USE_C
    LDA SAVE_GAME_MOD_PAGE_PTR[2]
    STA [BCD/MODULO/DIGITS_USE_A],Y
    INY
    LDA SAVE_GAME_MOD_PAGE_PTR+1
    STA [BCD/MODULO/DIGITS_USE_A],Y
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    JSR SOUND_ASSIGN_NEW_MAIN_SONG
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDA CURRENT_SAVE_MANIPULATION_PAGE+4
    AND #$C0
    ORA [SCRIPT_MAIN_FPTR[2]],Y
    STA CURRENT_SAVE_MANIPULATION_PAGE+4
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA SOUND_EFFECT_REQUEST_ARRAY[5]
    INY
    RTS
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA SOUND_EFFECT_REQUEST_ARRAY+1
    INY
    RTS
    INY
    LDA [SCRIPT_MAIN_FPTR[2]],Y
    STA R_**:$07F3
    INY
    RTS
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDA #$20
    ORA CURRENT_SAVE_MANIPULATION_PAGE+112
    STA CURRENT_SAVE_MANIPULATION_PAGE+112
    LDA #$20
    ORA CURRENT_SAVE_MANIPULATION_PAGE+176
    STA CURRENT_SAVE_MANIPULATION_PAGE+176
    INY
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED
    STY SCRIPT_MAIN_FILE_INDEX
    LDA #$19
    LDX #$C1
    LDY #$A6
    JSR ENGINE_SCRIPT_LAUNCH_R7_A_PTR_XY_WITH_RESTORE
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
    LDA CURRENT_SAVE_MANIPULATION_PAGE+542
    CMP #$FF
    BEQ 13:16F4
    JMP OPT_B_EXIT_RESTREAM_NEXT_FROM_CURRENT_GOTO_FUNC?
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDX #$03
    LDA 13:1708,X
    STA CURRENT_SAVE_MANIPULATION_PAGE+12,X
    DEX
    BPL 13:16F9
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED
    INY
    INY
    RTS
    .db D2
    .db 00
    .db 80
    .db 47
    LDA #$66
    STA ROUTINE_CONTINUE_FLAG?
    STY SCRIPT_MAIN_FILE_INDEX
    LDA GFX_COORD_HORIZONTAL_OFFSET
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    JSR 13:19E4
    PLA
    STA GFX_COORD_VERTICAL_OFFSET
    PLA
    STA GFX_COORD_HORIZONTAL_OFFSET
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
    JSR ENGINE_SETTLE_ALL_UPDATES?
    JSR ENGINE_PALETTE_FADE_SKIP_INDEX_0xE?
    INY
    RTS
    JSR SCRIPT_PALETTE_COLOR
    JSR ENGINE_PALETTE_UPLOAD_WITH_PACKET_HELPER
    INY
    RTS
    LDX #$10
    JSR SCRIPT_INVERT_X_SCROLL_SETTLE
    DEX
    BNE 13:1737
    INY
    RTS
    STY SCRIPT_MAIN_FILE_INDEX
    LDA #$19
    LDX #$CB
    LDY #$A5
    JSR ENGINE_SCRIPT_LAUNCH_R7_A_PTR_XY_WITH_RESTORE
    JSR EXIT_STREAM_DATA_AS_R6_ROUTINE
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
    STY SCRIPT_MAIN_FILE_INDEX
    LDA #$19
    LDX #$C0
    LDY #$A6
    JSR ENGINE_SCRIPT_LAUNCH_R7_A_PTR_XY_WITH_RESTORE
    JSR EXIT_STREAM_DATA_AS_R6_ROUTINE
    LDY SCRIPT_MAIN_FILE_INDEX
    INY
    RTS
SUB_COORDS_INIT_AND_LOOP_POSSIBLY_MENU: ; 13:1763, 0x027763
    LDX #$02 ; Seed coords.
    LDY #$19
    STX GFX_COORD_HORIZONTAL_OFFSET
    STY GFX_COORD_VERTICAL_OFFSET
    LDX #$02 ; Seed count/index.
COUNT_POSITIVE: ; 13:176D, 0x02776D
    LDA WRAM_DATA_UNK[3],X ; Load ??
    BEQ VAL_CLEAR ; Clear, goto.
    LDA #$A0
    JSR ENGINE_A_TO_UPDATE_PACKET ; Blank.
    DEC GFX_COORD_VERTICAL_OFFSET ; -= 2
    DEC GFX_COORD_VERTICAL_OFFSET
    DEX ; Count--
    BPL COUNT_POSITIVE ; Positive, loop.
VAL_CLEAR: ; 13:177E, 0x02777E
    DEC GFX_COORD_HORIZONTAL_OFFSET ; --
    SEC ; Prep sub.
    LDA GFX_COORD_VERTICAL_OFFSET ; Load vert.
    SBC #$04 ; -= 0x4
    STA GFX_COORD_VERTICAL_OFFSET ; Store new.
    JSR PTR_SEEDED_UNK_C ; Do ??
    JSR EXIT_STREAM_DATA_AS_R6_ROUTINE ; Do file from var.
    LDA #$AC
    LDX #$B7
    STA FPTR_MENU_MASTER[2] ; Seed menu master.
    STX FPTR_MENU_MASTER+1
    JSR ENGINE_MENU_INIT_MASTER_FULL ; Do full init with it.
    BIT SCRIPT_MENU_STATUS ; Test status.
    BMI STATUS_NEGATIVE ; Negative, goto.
    SEC ; Ret CS. Continue.
    RTS
STATUS_NEGATIVE: ; 13:179E, 0x02779E
    LDA #$FF
    JSR ENGINE_CURSOR_TO_BG_UPDATE_INTO_MENU? ; Set cursor to BG.
    LDX MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load option.
    LDA WRAM_DATA_UNK[3],X ; Load data at.
    STA PARTY/BATTLE_ID?_TODO ; Store to.
    CLC ; Ret CC, chosen?
    RTS
    .db 01 ; Master menu from above.
    .db 03
    .db 00
    .db 02
    .db C0
    .db 3A
    .db 02
    .db 15
    .db 04
    .db 67
SUB_TODO: ; 13:17B6, 0x0277B6
    JSR PTR_SEEDED_UNK_A ; Do seeded.
    LDX #$FF ; Seed ??
LOOP_X_INDEX: ; 13:17BB, 0x0277BB
    INX ; Index++
    CPX #$03 ; If _ #$03
    BCC VAL_LT_0x3 ; <, goto.
    LDX #$00 ; Seed.
VAL_LT_0x3: ; 13:17C2, 0x0277C2
    JSR TEST_SAVE_INDEX_X_CC_0x1-0x5 ; Do test
    BCS LOOP_X_INDEX ; CS, goto.
    STA PARTY/BATTLE_ID?_TODO ; Store ID.
    STX SLOT/DATA_OFFSET_USE/CURR? ; Store index.
    JSR SUB_GROUPED_A ; Do ??
    JSR UNK_DATA_AS_SUBMENU_TODO ; Do ??
    JSR SUB_GROUPED_C ; Set coords.
    JSR SEED_MASTER_MENU_A_WITH_FULL_INIT ; Do full with menu.
    LDX SLOT/DATA_OFFSET_USE/CURR? ; Load ??
    LDA #$06 ; Seed ??
    BIT SCRIPT_MENU_STATUS ; Test menu status.
    BVS STATUS_0x40_SET ; Set, goto.
    BMI LOOP_X_INDEX ; If negative, goto.
    BEQ LOOP_X_INDEX ; 0x00, goto.
    JSR UNK_DATA_AS_SUBMENU_TODO ; Do submenu.
    JSR SEED_MASTER_MENU_B_WITH_PARTIAL_INIT ; Do partial init of master.
    BIT SCRIPT_MENU_STATUS ; Test status.
    BVS STATUS_0x40_SET ; If 0x40 set, goto.
    BMI MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED ; If negative, goto.
    LDX SLOT/DATA_OFFSET_USE/CURR? ; Load ??
    JMP VAL_LT_0x3 ; Goto.
STATUS_0x40_SET: ; 13:17F4, 0x0277F4
    SEC
    RTS
MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED: ; 13:17F6, 0x0277F6
    LDA #$FF ; Cursor tile for BG.
    JSR ENGINE_CURSOR_TO_BG_UPDATE_INTO_MENU? ; BG update because going into, don't want to keep cursor sprite.
    LDY MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Stream index.
    LDA [FPTR_MENU_SUBMENU[2]],Y ; Load from the submenu.
    STA PTR_CREATE_SEED_UNK ; Store to.
    CLC ; Ret CC, into menu alert.
    RTS ; Leave.
UNK_DATA_AS_SUBMENU_TODO: ; 13:1803, 0x027803
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Data from.
    CLC ; Prep add.
    LDA BCD/MODULO/DIGITS_USE_A ; Load ??
    ADC #$20 ; Add with.
    STA FPTR_MENU_SUBMENU[2] ; Store ??
    LDA BCD/MODULO/DIGITS_USE_B ; Load ??
    ADC #$00 ; Add with.
    STA FPTR_MENU_SUBMENU+1 ; Store to.
    RTS ; Leave.
L_13:1814: ; 13:1814, 0x027814
    JSR PTR_SEEDED_UNK_B ; Do ??
    JSR EXIT_STREAM_DATA_AS_R6_ROUTINE ; Do.
    SEC ; Prep sub.
    LDA SCRIPT_MAIN_FILE_INDEX ; Load ??
    ADC SCRIPT_MAIN_FPTR[2] ; Add with.
    STA FPTR_MENU_SUBMENU[2] ; Store to submenu.
    LDA #$00 ; Carry prep.
    ADC SCRIPT_MAIN_FPTR+1 ; Add with ??
    STA FPTR_MENU_SUBMENU+1 ; Store to submenu.
    LDY #$03 ; Move coord.
VAL_LT_0xB: ; 13:1829, 0x027829
    STY GFX_COORD_VERTICAL_OFFSET
    LDY SCRIPT_MAIN_FILE_INDEX ; Load ??
    INY ; ++
    STY SCRIPT_MAIN_FILE_INDEX ; Store back next.
    LDA [SCRIPT_MAIN_FPTR[2]],Y ; Load data before inc.
    STA PTR_CREATE_SEED_UNK ; Store to.
    BEQ VAL_EQ_0x00 ; == 0, goto.
    LDA #$0C
    STA R_**:$0070 ; Set ??
    LDX #$03
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set H coord.
    JSR SUB_DISPLAY_AND_ROUTINE_HELPER ; Do.
    JSR PTR_AND_BANK_R6_UNK ; Do.
    LDA #$00
    STA R_**:$0070 ; Clear ??
    LDX #$0F
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set H coord.
    LDA #$6F ; Seed 13:186F
    LDX #$B8
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER ; Display.
VAL_EQ_0x00: ; 13:1853, 0x027853
    LDY GFX_COORD_VERTICAL_OFFSET ; Load coord.
    INY ; += 2
    INY
    CPY #$0B ; If _ #$0B
    BCC VAL_LT_0xB ; <, goto.
    LDA #$77 ; Seed master menu.
    LDX #$B8
    STA FPTR_MENU_MASTER[2]
    STX FPTR_MENU_MASTER+1
    JSR ENGINE_MENU_INIT_MASTER_PARTIAL ; Init partial.
    BIT SCRIPT_MENU_STATUS ; Test status.
    BMI STATUS_MENU_SELECTED ; Selected, goto.
    SEC ; Ret CS, continue.
    RTS
STATUS_MENU_SELECTED: ; 13:186C, 0x02786C
    JMP MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED ; Cursor to BG.
    .db A4 ; PTR to.
    .db 23
    .db 2A
    .db 00
    .db 02
    .db 04
    .db BA
    .db 00
    .db 01
    .db 04
    .db 00
    .db 02
    .db C0
    .db 3A
    .db 02
    .db 03
SCRIPT_TODO: ; 13:187F, 0x02787F
    JSR PTR_SEEDED_UNK_A
    LDA #$D8
    LDX #$B8
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER
    LDX #$F8
    CLC
    TXA
    ADC #$08
    TAX
    CPX #$50
    BCC 13:1896
    LDX #$00
    LDA CURRENT_SAVE_MANIPULATION_PAGE+688,X
    BNE 13:189D
    LDX #$00
    STX SLOT/DATA_OFFSET_USE/CURR?
    JSR 13:18CA
    JSR SUB_GROUPED_C
    JSR SEED_MASTER_MENU_A_WITH_FULL_INIT
    LDX SLOT/DATA_OFFSET_USE/CURR?
    LDA #$06
    BIT SCRIPT_MENU_STATUS
    BVS 13:18C5
    BMI 13:188B
    BEQ 13:188B
    JSR 13:18CA
    JSR SEED_MASTER_MENU_B_WITH_PARTIAL_INIT
    BIT SCRIPT_MENU_STATUS
    BVS 13:18C5
    BMI 13:18C7
    LDX SLOT/DATA_OFFSET_USE/CURR?
    JMP 13:1896
    SEC
    RTS
    JMP MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED
    CLC
    LDA SLOT/DATA_OFFSET_USE/CURR?
    ADC #$B0
    STA FPTR_MENU_SUBMENU[2]
    LDA #$00
    ADC #$76
    STA FPTR_MENU_SUBMENU+1
    RTS
    .db 20
    .db 09
    .db 03
    .db D4
    .db E8
    .db E5
    .db A0
    .db C3
    .db EC
    .db EF
    .db F3
    .db E5
    .db F4
    .db 00
SUB_UNK_GROUPS_MANY_CHARS?: ; 13:18E6, 0x0278E6
    JSR PTR_SEEDED_UNK_A ; Do ??
    LDX #$FF ; Seed ??
LOOP_NEXT_INDEX: ; 13:18EB, 0x0278EB
    INX ; ++
    CPX #$03 ; If _ #$03
    BCC LOOP_MENU_UNK ; <, goto.
    LDX #$00 ; Seed ??
LOOP_MENU_UNK: ; 13:18F2, 0x0278F2
    LDA CURRENT_SAVE_MANIPULATION_PAGE+8,X ; Load from indexed. Party arr?
    BEQ LOOP_NEXT_INDEX ; == 0, ,goto.
    CMP #$03 ; If _ #$03
    BCS LOOP_NEXT_INDEX ; >=, goto.
    STA PARTY/BATTLE_ID?_TODO ; Store val loaded.
    STX SLOT/DATA_OFFSET_USE/CURR? ; Store offset, too?
    JSR SUB_GROUPED_A ; Do sub, display.
    JSR SUB_GROUPED_B ; Do sub, menu and coords submenu?
    JSR SUB_GROUPED_C ; Do sub, menu and coords submenu?
    JSR SEED_MASTER_MENU_A_WITH_FULL_INIT ; Seded master menu thingy.
    LDX SLOT/DATA_OFFSET_USE/CURR? ; Load ??
    LDA #$06 ; Load ??
    BIT SCRIPT_MENU_STATUS ; Test status.
    BVS RET_CS ; Set, goto.
    BMI LOOP_NEXT_INDEX ; Negative, goto.
    BEQ LOOP_NEXT_INDEX ; == 0, goto.
    JSR SUB_GROUPED_B ; Do.
    LDY #$01 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from file.
    AND #$F0 ; Keep upper.
    BNE UPPER_NONZERO ; != 0, goto.
    JSR SEED_MASTER_MENU_B_WITH_PARTIAL_INIT ; Seed.
    BIT SCRIPT_MENU_STATUS ; Test.
    BVS RET_CS ; 0x40 set, goto.
    BMI STATUS_SELECTED_GOING_INTO_MENU ; 0x80, goto.
UPPER_NONZERO: ; 13:192B, 0x02792B
    LDX SLOT/DATA_OFFSET_USE/CURR? ; Load ??
    JMP LOOP_MENU_UNK ; Goto.
RET_CS: ; 13:1930, 0x027930
    SEC ; Ret CS. TODO meaning.
    RTS
STATUS_SELECTED_GOING_INTO_MENU: ; 13:1932, 0x027932
    JMP MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED ; Goto.
SUB_GROUPED_B: ; 13:1935, 0x027935
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Do sub.
    CLC ; Prep add.
    LDA BCD/MODULO/DIGITS_USE_A ; Load ??
    ADC #$30 ; Add with ??
    STA FPTR_MENU_SUBMENU[2] ; Store as submenu ptr L.
    LDA BCD/MODULO/DIGITS_USE_B ; Load ??
    ADC #$00 ; Carry add.
    STA FPTR_MENU_SUBMENU+1 ; Store as submenu ptr H.
    LDX #$00 ; Clear.
    LDY #$00
VAL_LT_0x20: ; 13:1949, 0x027949
    STX SAVE_GAME_MOD_PAGE_PTR[2] ; Store letter index.
    STY SAVE_GAME_MOD_PAGE_PTR+1 ; Store loop index.
    LDA SAVE_GAME_MOD_PAGE_PTR+1 ; Load ??
    AND #$07 ; Keep lower.
    TAX ; To X index.
    LDA SAVE_GAME_MOD_PAGE_PTR+1 ; Load ??
    LSR A ; >> 3, /8.
    LSR A
    LSR A
    TAY ; To stream index.
    LDA [FPTR_MENU_SUBMENU[2]],Y ; Load from.
    AND LIB_LUT_BIT_TEST_0x80-0x01,X ; Test bit.
    LDX SAVE_GAME_MOD_PAGE_PTR[2] ; Load index ??
    AND ROM_ARR_DATA_UNK,Y ; And with data for stream slot.
    BEQ STREAM_SLOT_NONE_SET ; Clear, goto.
    CLC ; Prep add.
    LDA SAVE_GAME_MOD_PAGE_PTR+1 ; Load ??
    ADC #$C0 ; += 0xC0
    STA CHARACTER_NAMES_ARR[8],X ; Store to.
    INX ; Index++
    CPX #$08 ; If _ #$08
    BCS EXIT_SEED_SUBMENU_FPTR_0x0580 ; >=, goto.
STREAM_SLOT_NONE_SET: ; 13:1971, 0x027971
    LDY SAVE_GAME_MOD_PAGE_PTR+1 ; Load ??
    INY ; ++
    CPY #$20 ; If _ #$20
    BCC VAL_LT_0x20 ; <, goto.
    LDA #$00
INDEX_LT_0x8: ; 13:197A, 0x02797A
    STA CHARACTER_NAMES_ARR[8],X ; Clear ??
    INX ; Index++
    CPX #$08 ; If _ #$08
    BCC INDEX_LT_0x8 ; <, goto.
EXIT_SEED_SUBMENU_FPTR_0x0580: ; 13:1982, 0x027982
    LDA #$80 ; Seed menu fptr 0x0580.
    LDX #$05
    STA FPTR_MENU_SUBMENU[2]
    STX FPTR_MENU_SUBMENU+1
    RTS ; Leave.
ROM_ARR_DATA_UNK: ; 13:198B, 0x02798B
    .db 60 ; Data meaning TODO.
    .db E0
    .db A8
    .db 00
SUB_MENU_TO_SOLVE: ; 13:198F, 0x02798F
    JSR PTR_SEEDED_UNK_A ; Do routine.
    LDA #$D1 ; Seed fptr L.
    LDX #$B9 ; fptr H.
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER ; Do display.
    JSR SUB_UNK_SUBMENU_DO ; Do ??
    JSR SUB_GROUPED_C ; Do coord and display.
    LDA #$DC
    LDX #$B9 ; Seed 13:19DC file.
    JSR REPLACE_MENU_MASTER_PARTIAL_INIT ; Do menu partial.
    BIT SCRIPT_MENU_STATUS ; Test status.
    BMI MENU_OPTION_SELECTED ; Negative, goto.
    SEC ; Ret CS.
    RTS
MENU_OPTION_SELECTED: ; 13:19AC, 0x0279AC
    JMP MENU_OPTION_SELECTED_CURSOR_TO_BG_CURSOR_SEEDED ; Goto.
SUB_UNK_SUBMENU_DO: ; 13:19AF, 0x0279AF
    LDA CURRENT_SAVE_MANIPULATION_PAGE+541 ; Move ??
    STA SAVE_GAME_MOD_PAGE_PTR+1
    LDX #$00 ; Init count.
VAL_LT_0x8: ; 13:19B6, 0x0279B6
    LDA #$00
    ASL SAVE_GAME_MOD_PAGE_PTR+1 ; Shift ??
    BCC SHIFT_CC ; CC, goto.
    CLC ; Prep add.
    TXA ; X to A.
    ADC #$80 ; += 0x80
SHIFT_CC: ; 13:19C0, 0x0279C0
    STA CHARACTER_NAMES_ARR[8],X ; Store to.
    INX ; Index++
    CPX #$08 ; If _ #$08
    BCC VAL_LT_0x8 ; <,, goto.
    LDA #$80
    LDX #$05 ; Seed submenu 0x0580.
    STA FPTR_MENU_SUBMENU[2]
    STX FPTR_MENU_SUBMENU+1
    RTS ; Leave.
    .db 20 ; Fptr to.
    .db 07
    .db 03
    .db FE
    .db D7
    .db E8
    .db E5
    .db F2
    .db E5
    .db A2
    .db 00
    .db 02 ; Fptr to.
    .db 04
    .db 0C
    .db 02
    .db C0
    .db 3A
    .db 06
    .db 05
    JSR PTR_SEEDED_UNK_E
    LDA #$B6
    LDX #$BA
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER
    JSR ENGINE_CREATE_UPDATE_BUF_INIT_INC?
    LDX #$00
    JSR 13:1A72
    JSR 13:1A72
    JSR ENGINE_WRAM_STATE_WRITEABLE
    LDA #$00
    STA CURRENT_SAVE_MANIPULATION_PAGE+49
    STA SLOT/DATA_OFFSET_USE/CURR?
    LDY #$10
    LDA #$A2
    STA CURRENT_SAVE_MANIPULATION_PAGE+32,Y
    DEY
    BPL 13:1A07
    STA R_**:$00D6
    JSR 13:1A8D
    JSR ENGINE_MENU_INIT_MASTER_FULL
    JMP 13:1A1E
    JSR 13:1A8D
    JSR SETTLE_AND_SPRITES_TO_COORD?_IDFK
    BIT SCRIPT_MENU_STATUS
    BMI 13:1A39
    BVC 13:1A54
    LDY SLOT/DATA_OFFSET_USE/CURR?
    BEQ 13:1A18
    LDA CURRENT_SAVE_MANIPULATION_PAGE+32,Y
    CMP #$A2
    BNE 13:1A30
    DEY
    LDA #$A2
    STY SLOT/DATA_OFFSET_USE/CURR?
    STA CURRENT_SAVE_MANIPULATION_PAGE+32,Y
    BNE 13:1A18
    LDY MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL
    CPY #$10
    BEQ 13:1A24
    CPY #$26
    BEQ 13:1A54
    LDA CHARACTER_NAMES_ARR[8],Y
    LDY SLOT/DATA_OFFSET_USE/CURR?
    STA CURRENT_SAVE_MANIPULATION_PAGE+32,Y
    CPY #$10
    BCS 13:1A18
    INY
    STY SLOT/DATA_OFFSET_USE/CURR?
    BNE 13:1A18
    LDY SLOT/DATA_OFFSET_USE/CURR?
    BEQ 13:1A18
    LDA CURRENT_SAVE_MANIPULATION_PAGE+32,Y
    CMP #$A2
    BEQ 13:1A60
    INY
    LDA #$00
    STA CURRENT_SAVE_MANIPULATION_PAGE+32,Y
    STA R_**:$00D6
    LDA #$F0
    STA SPRITE_PAGE+4
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED
    JMP EXIT_STREAM_DATA_AS_R6_ROUTINE
    LDY #$11
    LDA 13:1AB9,X
    STA CHARACTER_NAMES_ARR[8],X
    INX
    DEY
    BNE 13:1A74
    LDA #$00
    STA **:$057E,X
    LDY #$05
    STA CHARACTER_NAMES_ARR[8],X
    INX
    DEY
    BNE 13:1A85
    RTS
    LDA #$E5
    LDX #$BA
    JSR PACKET_FILE_PTR_SEED_DISPLAY_UPDATE_HELPER
    LDA #$32
    STA SPRITE_PAGE+4
    LDA #$01
    STA SPRITE_PAGE+5
    LDA #$00
    STA SPRITE_PAGE+6
    LDA SLOT/DATA_OFFSET_USE/CURR?
    ASL A
    ASL A
    ASL A
    ADC #$48
    STA SPRITE_PAGE+7
    LDA #$EF
    LDX #$BA
    STA FPTR_MENU_MASTER[2]
    STX FPTR_MENU_MASTER+1
    RTS
    .db 20
    .db 08
    .db 09
    .db C1
    .db C2
    .db C3
    .db C4
    .db C5
    .db C6
    .db C7
    .db A0
    .db C8
    .db C9
    .db CA
    .db CB
    .db CC
    .db CD
    .db CE
    .db A0
    .db C0
    .db C2
    .db E1
    .db E3
    .db EB
    .db 01
    .db CF
    .db D0
    .db D1
    .db D2
    .db D3
    .db D4
    .db D5
    .db A0
    .db D6
    .db D7
    .db D8
    .db D9
    .db DA
    .db AE
    .db A7
    .db A0
    .db C0
    .db C5
    .db EE
    .db E4
    .db A0
    .db 00
    .db 20
    .db 09
    .db 05
    .db 21
    .db 20
    .db 74
    .db 20
    .db 08
    .db 09
    .db 00
    .db 16
    .db 02
    .db 01
    .db 02
    .db D0
    .db 01
    .db 08
    .db 09
    .db 80
    .db 05
SEED_MASTER_MENU_A_WITH_FULL_INIT: ; 13:1AF9, 0x027AF9
    LDA #$04 ; Seed FPTR 13:1B04
    LDX #$BB
    STA FPTR_MENU_MASTER[2] ; Seed FPTR.
    STX FPTR_MENU_MASTER+1
    JMP ENGINE_MENU_INIT_MASTER_FULL ; Init this one.
    .db 01
    .db 01
    .db 00
    .db 00
    .db C5
    .db 3A
    .db 07
    .db 03
    .db D1
    .db F0
SEED_MASTER_MENU_B_WITH_PARTIAL_INIT: ; 13:1B0E, 0x027B0E
    LDA #$19 ; Seed FPTR past rtn.
    LDX #$BB
REPLACE_MENU_MASTER_PARTIAL_INIT: ; 13:1B12, 0x027B12
    STA FPTR_MENU_MASTER[2]
    STX FPTR_MENU_MASTER+1
    JMP ENGINE_MENU_INIT_MASTER_PARTIAL ; Goto.
    .db 02
    .db 04
    .db 0C
    .db 02
    .db C8
    .db 3A
    .db 06
    .db 05
SUB_GROUPED_A: ; 13:1B21, 0x027B21
    JSR CREATE_PTR_FROM_PASSED_TO_BANKED/WRAM_DATA ; Do ptr.
    CLC ; Prep add.
    LDA BCD/MODULO/DIGITS_USE_A ; Load ??
    ADC #$38 ; Add with.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Store to.
    LDA BCD/MODULO/DIGITS_USE_B ; Load ??
    ADC #$00 ; Carry add.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK+1 ; Store to.
    LDA #$07 ; Seed val ??
    LDX #$09 ; Seed X coord.
    LDY #$03 ; Seed Y coord.
    STA R_**:$0070 ; Set ??
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set coords.
    STY GFX_COORD_VERTICAL_OFFSET
    JMP ENGINE_CREATE_UPDATE_BUF_INIT_INC? ; Update, display?
SUB_GROUPED_C: ; 13:1B40, 0x027B40
    LDA #$0B ; Seed ??
    LDX #$07 ; Coord X.
    LDY #$05 ; Coord V.
    STA R_**:$0070 ; Set ??
    STY GFX_COORD_VERTICAL_OFFSET ; Set coord.
    LDY #$00 ; Stream index.
VAL_LT_0x8: ; 13:1B4C, 0x027B4C
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set coord.
    STY MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Store index.
    LDA [FPTR_MENU_SUBMENU[2]],Y ; Load from file.
    STA PTR_CREATE_SEED_UNK ; Store to.
    JSR SUB_DISPLAY_AND_ROUTINE_HELPER ; Do sub with.
    LDX #$13 ; Seed ??
    CPX GFX_COORD_HORIZONTAL_OFFSET ; If _ var
    BNE VAL_NE_0x13 ; !=, goto.
    INC GFX_COORD_VERTICAL_OFFSET ; ++ coords.
    INC GFX_COORD_VERTICAL_OFFSET
    LDX #$07 ; Seed ??
VAL_NE_0x13: ; 13:1B63, 0x027B63
    LDY MENU_SELECTED_SUBMENU_OPTION_INDEX_FINAL ; Load ??
    INY ; ++
    CPY #$08 ; If _ #$08
    BCC VAL_LT_0x8 ; <, goto.
    LDA #$00
    STA R_**:$0070 ; Clear ??
    RTS ; Leave.
SCRIPT_TODO_UNK: ; 13:1B6F, 0x027B6F
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Do ptr.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM write.
    LDA #$04
    STA WRAM_6D00_TRIPLETS_UNK[3] ; Set ??
    CLC ; Prep add.
    LDA BCD/MODULO/DIGITS_USE_A ; Load ??
    ADC #$38 ; += 0x38.
    STA WRAM_6D00_TRIPLETS_UNK+1 ; Store to.
    LDA BCD/MODULO/DIGITS_USE_B ; Load ??
    ADC #$00 ; Carry add.
    STA WRAM_6D00_TRIPLETS_UNK+2 ; Store to.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable WRAM.
PTR_MOVE_TO_UNK_ARR_WRAM: ; 13:1B8C, 0x027B8C
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Get ptr.
    LDY #$00 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from stream.
    STA SAVE_GAME_MOD_PAGE_PTR[2] ; Move ptr.
    INY ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    STA SAVE_GAME_MOD_PAGE_PTR+1
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Do WRAM writable.
    LDY #$00 ; Stream index reset.
A_NONZERO: ; 13:1B9F, 0x027B9F
    LDA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; Load from stream.
    STA WRAM_PAGE_UNK_WHOLE_PAGE_WRITTEN_WHEN_THIS_VAR_FOUND[8],Y ; Store to ??
    INY ; Stream++
    CMP #$00 ; If A _ #$00
    BNE A_NONZERO ; != 0, goto. EOF.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; Do disabled.
    JMP EXIT_STREAM_DATA_AS_R6_ROUTINE ; Exit.
SUB_DISPLAY_AND_ROUTINE_HELPER: ; 13:1BAF, 0x027BAF
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Do R6 and base from var.
    LDY #$00 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Move fptr L.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    INY ; Stream++
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Move fptr H.
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK+1
    JSR ENGINE_CREATE_UPDATE_BUF_INIT_INC? ; Do update.
    JMP EXIT_STREAM_DATA_AS_R6_ROUTINE ; Exit.
PTR_AND_BANK_R6_UNK: ; 13:1BC3, 0x027BC3
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Do ptr.
    LDY #$06 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Move ptr? ??
    STA PAIR_UNK_2A[2]
    INY
    LDA [BCD/MODULO/DIGITS_USE_A],Y
    STA PAIR_UNK_2A+1
    JMP EXIT_STREAM_DATA_AS_R6_ROUTINE ; Exit.
R6_AND_FILE_MANIP_UNK: ; 13:1BD4, 0x027BD4
    JSR R6_BANK_AND_SETUP_PTR_9800 ; Do ptrs.
    LDY #$02 ; R6 index.
    JSR MISC_FILE_MANIP_UNK ; Do ??
    JMP EXIT_STREAM_DATA_AS_R6_ROUTINE ; Goto.
R6_BANK_AND_SETUP_PTR_9800: ; 13:1BDF, 0x027BDF
    JSR VARIABLE_LOAD_TO_OFFSET_AND_R6_TO_0x00 ; Do.
OFFSET_PTR_0x9800: ; 13:1BE2, 0x027BE2
    CLC ; Prep add.
    LDA BCD/MODULO/DIGITS_USE_A ; Base at $9800
    ADC #$00
    STA BCD/MODULO/DIGITS_USE_A
    LDA BCD/MODULO/DIGITS_USE_B
    ADC #$98
    STA BCD/MODULO/DIGITS_USE_B
    RTS ; Leave.
VARIABLE_LOAD_TO_OFFSET_AND_R6_TO_0x00: ; 13:1BF0, 0x027BF0
    LDA PTR_CREATE_SEED_UNK ; Move.
VARIABLE_TO_OFFSET_AND_R6_TO_0x00: ; 13:1BF2, 0x027BF2
    STA BCD/MODULO/DIGITS_USE_A ; Alt entry, store seeded.
    LDA #$00 ; Seed clear.
    ASL BCD/MODULO/DIGITS_USE_A ; << 1
    ROL A ; Into A.
    ASL BCD/MODULO/DIGITS_USE_A ; 2x
    ROL A
    ASL BCD/MODULO/DIGITS_USE_A ; 3x
    ROL A
    STA BCD/MODULO/DIGITS_USE_B ; Store to result.
    JMP ENGINE_R6_TO_BANK_0x00_THING_1 ; Do R6 to 0x00, lave.
SYNC_WAIT_ANY_PRESS: ; 13:1C04, 0x027C04
    JSR WAIT_ANY_BUTTONS_PRESSED_RET_PRESSED ; Wait pressed.
    JMP PTR_SEEDED_UNK_F_WRAM ; Goto.
PACKETY_HELPER_SAVE_AND_RESTORE_CREATION: ; 13:1C0A, 0x027C0A
    LDA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2] ; Save file to stack.
    PHA
    LDA ARG/PTR_L
    PHA
    JSR PTR_SEEDED_UNK_K ; Do ??
    PLA
    STA ARG/PTR_L ; Restore FPTR.
    PLA
    STA FPTR_PACKET_CREATION/PTR_H_FILE_IDK[2]
    LDA #$00
    STA R_**:$002D ; Clear ??
    LDX #$08
    LDY #$13
    STX GFX_COORD_HORIZONTAL_OFFSET ; Set coords.
    STY GFX_COORD_VERTICAL_OFFSET
    JMP EXIT_STREAM_DATA_AS_R6_ROUTINE ; Goto.
L_13:1C28: ; 13:1C28, 0x027C28
    LDA GFX_COORD_HORIZONTAL_OFFSET ; Save pos.
    PHA
    LDA GFX_COORD_VERTICAL_OFFSET
    PHA
    JSR PTR_SEEDED_UNK_H ; Do ??
    PLA
    STA GFX_COORD_VERTICAL_OFFSET ; Restore coords.
    PLA
    STA GFX_COORD_HORIZONTAL_OFFSET
    JMP EXIT_STREAM_DATA_AS_R6_ROUTINE ; Goto.
SUB_TODO: ; 13:1C3A, 0x027C3A
    LDA BCD/MODULO/DIGITS_USE_C ; Load.
    AND #$3F ; Keep lower.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+3 ; To.
    LDA BCD/MODULO/DIGITS_USE_C ; Load.
    AND #$C0 ; Keep upper.
    ASL A ; Shift off.
    ROL A ; Rotate into bottom two.
    ROL A
    ADC #$28 ; += 0x28, 0x28-0x2B.
    STA BCD/MODULO/DIGITS_USE_C ; Store it.
    LDA PTR_CREATE_SEED_UNK ; Load ??
    JSR TEST_FOR_VAL_EQ_PASSED ; Do sub.
    BCS RTS ; CS, leave.
    TYA ; Y to A.
    ADC #$20 ; += 0x20
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+2 ; Store to.
    BCC ADD_NO_OVERFLOW_EXTEND ; No overflow, extend.
RTS: ; 13:1C59, 0x027C59
    RTS ; Leave.
SCRIPT_ENTRY_CLEAR_UNK_AND_MORE: ; 13:1C5A, 0x027C5A
    LDA #$00
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+3 ; Clear ??
ADD_NO_OVERFLOW_EXTEND: ; 13:1C5E, 0x027C5E
    JSR SUB_DATA_PTR_FROM_RAM[0x28] ; Do sub with ptr.
    LDA BCD/MODULO/DIGITS_USE_A ; Seed move ??
    LDX BCD/MODULO/DIGITS_USE_B
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8] ; To pos.
    STX RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1
    LDY BCD/MODULO/DIGITS_USE_C ; Load file index.
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    JSR VARIABLE_TO_OFFSET_AND_R6_TO_0x00 ; Do seeded.
    JSR OFFSET_PTR_0x9800 ; Do ??
    LDY #$03 ; Stream index.
    LDA [BCD/MODULO/DIGITS_USE_A],Y ; Load from file.
    AND #$3F ; Keep lower.
    STA BCD/MODULO/DIGITS_USE_D ; Store.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Now writeable.
    LDX BCD/MODULO/DIGITS_USE_C ; Load index.
    LDA ROM_DATA_USE_UNK,X ; Load ??
    BMI VALUE_NEGATIVE ; Negative, goto.
    TAY ; A to Y.
    SEC ; Prep sub.
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    SBC BCD/MODULO/DIGITS_USE_D ; Sub with.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    INY ; Stream++
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    SBC #$00 ; Carry sub.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    DEY ; Stream--
    CLC ; Prep add.
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    ADC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+3 ; Add with.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store back.
    INY ; Stream++
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    ADC #$00 ; Carry add.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    JMP EXIT_UNK ; Goto.
VALUE_NEGATIVE: ; 13:1CA6, 0x027CA6
    LDY #$02 ; Stream index.
    LDA BCD/MODULO/DIGITS_USE_D ; Load ??
    ASL A ; << 1, *2.
    EOR #$FF ; Invert.
    AND [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Mask with file.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    LDA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+3 ; Load ??
    ASL A ; << 1, *2.
    ORA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Set bits with file.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store back to file.
EXIT_UNK: ; 13:1CB8, 0x027CB8
    LDA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+3 ; Load ??
    BEQ VAL_EQ_0x00 ; == 0, goto.
    LDY RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+2 ; Stream index from.
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
ROM_DATA_USE_UNK: ; 13:1CC0, 0x027CC0
    TAX ; To X index.
    LDY BCD/MODULO/DIGITS_USE_C ; Load file index.
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    BNE VAL_NONZERO
    LDY RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+2 ; Load file index.
    BNE VAL_NONZERO_B ; != 0, goto.
VAL_LT_0x28: ; 13:1CCB, 0x027CCB
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Load from file.
    DEY ; Stream--
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file, moved down.
    INY ; Stream++
VAL_NONZERO_B: ; 13:1CD1, 0x027CD1
    INY ; Stream++
    CPY #$28 ; If _ #$28
    BCC VAL_LT_0x28 ; <, goto.
    DEY ; Y--
    LDA #$00 ; Seed clear.
    BEQ SEED_0x00 ; == 0, goto.
VAL_NONZERO: ; 13:1CDB, 0x027CDB
    LDY RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+2 ; Load stream index.
SEED_0x00: ; 13:1CDD, 0x027CDD
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    TXA ; X to A.
VAL_EQ_0x00: ; 13:1CE0, 0x027CE0
    LDY BCD/MODULO/DIGITS_USE_C ; Load stream index.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to file.
    CLC ; Ret CC.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Disable and abuse RTS CC.
    .db 07
    .db 09
    .db 09
    .db FF
ROUTINE_LAUNCHER_0xE: ; 13:1CEC, 0x027CEC
    LDA SWITCH_INIT_PORTION? ; Load.
    ASL A ; *2.
    TAX ; To X.
    LDA #$00
    STA SWITCH_INIT_PORTION? ; Clear, not again.
    LDA RTN_TABLE_H,X ; Move routine.
    PHA
    LDA RTN_TABLE_L,X
    PHA
    RTS ; Run it.
RTN_TABLE_L: ; 13:1CFD, 0x027CFD
    LOW(1F:0DDB) ; Rtn 0x00
RTN_TABLE_H: ; 13:1CFE, 0x027CFE
    HIGH(1F:0DDB) ; Palette fade out.
    LOW(13:1D0C) ; Rtn 0x01
    HIGH(13:1D0C) ; Palette fade out with flag unk.
    LOW(13:1D14) ; Rtn 0x02
    HIGH(13:1D14) ; Game stuff, can lock up script with copy protection.
    LOW(13:1D30) ; Rtn 0x03
    HIGH(13:1D30) ; Palette color thingy.
    LOW(13:1D5B) ; Rtn 0x04
    HIGH(13:1D5B) ; Long.
    LOW(13:1DD8) ; Rtn 0x05
    HIGH(13:1DD8) ; A bit. Sound, objs, updates.
    LOW(13:1D33) ; Rtn 0x06
    HIGH(13:1D33) ; Palette colors and ??
    LOW(13:1E0E) ; Rtn 0x07
    HIGH(13:1E0E) ; No music, delays, fade, do more.
PALETTE_FADE_WITH_??: ; 13:1D0D, 0x027D0D
    LDA #$08 ; Set ??
    STA SOUND_EFFECT_REQUEST_ARRAY[5]
    JMP ENGINE_PALETTE_FADE_OUT
    LDA #$10
    STA SOUND_EFFECT_REQUEST_ARRAY+1 ; Set sound effect.
    LDA #$34 ; Palette data.
    JSR PALETTE_TO_COLOR_A_AND_FORWARDED ; Do.
    LDA COPY_PROTECTION_VAL
    BEQ VAL_EQ_0x00 ; == 0, goto. Is okay.
    LDA #$19 ; Launch 19:01F7, mwahah. Copy protect hold routine.
    LDX #$F7
    LDY #$A1
    JSR ENGINE_SCRIPT_LAUNCH_R7_A_PTR_XY_WITH_RESTORE ; Launch it.
VAL_EQ_0x00: ; 13:1D2C, 0x027D2C
    LDX #$3C
    JMP ENGINE_DELAY_X_FRAMES ; Engine delay, leave.
    JSR SCRIPT_PALETTE_COLOR ; Do ??
SCRIPT_SET_??_PALETTE_FADE_OUT: ; 13:1D34, 0x027D34
    LDA #$20
    STA FIRST_LAUNCHER_HOLD_FLAG? ; Set ??
    JMP ENGINE_PALETTE_FADE_OUT ; Palette fade out.
SCRIPT_PALETTE_COLOR: ; 13:1D3B, 0x027D3B
    JSR ENGINE_PALETTE_SCRIPT_TO_TARGET ; To target.
    LDA #$02
    STA SOUND_EFFECT_REQUEST_ARRAY[5] ; Set ??
    LDA #$14 ; Seed.
LOOP_COUNT: ; 13:1D45, 0x027D45
    PHA ; Save todo count.
    LDA #$34
    JSR ENGINE_COLOR_TO_A_PASSED ; Color write.
    LDA #$38
    JSR ENGINE_COLOR_TO_A_PASSED
    LDA #$30
    JSR ENGINE_COLOR_TO_A_PASSED
    PLA ; Pull count.
    SEC ; Prep sub.
    SBC #$01 ; Sub with.
    BNE LOOP_COUNT ; != 0, loop.
    RTS
    LDA #$09
    STA SOUND_EFFECT_REQUEST_ARRAY[5] ; Set ??
    LDA #$11
    JSR PALETTE_TO_COLOR_A_AND_FORWARDED ; Palette to color.
    JSR SETTLE_SPRITES_OFFSCREEN/CLEAR_OBJ_RAM ; No sprites.
    JSR ENGINE_HELPER_SETTLE_CLEAR_NMI_AND_TO_MAIN_SCREEN ; Do.
    LDA #$5D
    LDX #$02 ; Set GFX.
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    JSR PPU_READ_INTO_$0110_HELPER_LOOP_UNK ; Load.
    LDA #$5C
    LDX #$02 ; Set GFX.
    JSR ENGINE_MAPPER_COMMIT_BANK_X_VAL_A
    LDA #$1F
    LDX #$BE ; Set PTR $BE1F, 13:
    STA BCD/MODULO/DIGITS_USE_A
    STX BCD/MODULO/DIGITS_USE_B
    JSR ARR_MAKE_UNK ; Do ??
    LDA #$2F
    LDX #$BE ; Set PTR, $BE2F, 13:
    JSR ENGINE_SETTLE_AND_PALETTE_FROM_PTR ; Set ??
    LDY #$16 ; Loop count.
COUNT_NONZERO: ; 13:1D91, 0x027D91
    TYA ; To A.
    PHA ; Save it.
    LDX #$08 ; Index.
INDEX_LT_0x28: ; 13:1D95, 0x027D95
    JSR ENGINE_SETTLE_ALL_UPDATES?
    LDA #$01
    STA OBJ?_BYTE_0x5_BYTE,X ; Set ??
    LDA OBJ?_BYTE_0x3_UNK,X ; Load.
    AND #$1F ; Keep lower.
    BNE LOWER_NONZERO ; != 0, goto.
    LDA #$E8
    LDY #$FF ; Seed ??
    BNE PTR_SUB_0x18 ; Always taken, goto.
LOWER_NONZERO: ; 13:1DAA, 0x027DAA
    LDA #$08 ; Val add.
    LDY #$00
PTR_SUB_0x18: ; 13:1DAE, 0x027DAE
    CLC ; Prep add.
    ADC OBJ?_PTR?[2],X ; Add A to.
    STA OBJ?_PTR?[2],X ; Store result.
    TYA ; Y val to A.
    ADC OBJ?_PTR?+1,X ; Add A to.
    STA OBJ?_PTR?+1,X ; Store carry result.
    CLC ; Prep add.
    TXA ; Index to A.
    ADC #$08 ; Index mod, goto.
    TAX ; Val to X.
    CPX #$28 ; If _ #$28
    BCC INDEX_LT_0x28 ; <, goto.
    LDA #$08
    STA NMI_FLAG_EXECUTE_UPDATE_BUF_AND_MORE_TODO ; Set flag ??
    PLA ; Pull A.
    TAY ; To Y.
    DEY ; --
    BNE COUNT_NONZERO ; != 0, goto.
    JSR SETTLE_SPRITES_OFFSCREEN/CLEAR_OBJ_RAM ; Do.
    JSR ENGINE_PALETTE_FADE_OUT ; Fade out.
    LDX #$5A
    JMP ENGINE_DELAY_X_FRAMES ; Abuse RTS.
    LDA #$11 ; Seed color decently blue.
    JSR ENGINE_BG_COLOR_A ; BG to.
    LDA #$03
    STA SOUND_EFFECT_REQUEST_ARRAY[5] ; Set ??
    JSR ENGINE_0x300_OBJECTS_UNK? ; Do OBJS?
    LDX #$08 ; Index.
    LDY #$07 ; Data index/loop.
DATA_POSITIVE: ; 13:1DEA, 0x027DEA
    LDA ROM_DATA_LUT_UNK,Y ; Move data.
    STA OBJ?_BYTE_0x5_BYTE,X
    DEY ; Data--
    LDA ROM_DATA_LUT_UNK,Y ; Move data.
    STA OBJ?_BYTE_0x4_UNK,X
    CLC ; Prep add.
    TXA ; Index to A.
    ADC #$08 ; Add to X index.
    TAX ; Back to X.
    DEY ; Data--
    BPL DATA_POSITIVE ; Positive, loop.
    JSR ENGINE_HELPER_R6_0x14
    JSR $9641 ; Do ??
    LDA #$11
    JSR ENGINE_ALL_COLOR_TO_A ; Do.
    LDX #$5A
    JMP ENGINE_DELAY_X_FRAMES ; Delay, abuse RTS.
    JSR SCRIPT_SET_??_PALETTE_FADE_OUT ; Do.
    LDA #$FF
    JSR SOUND_ASSIGN_NEW_MAIN_SONG ; No song.
    LDX #$5A
    JSR ENGINE_DELAY_X_FRAMES ; Delay frames.
    JMP ENGINE_IDK ; Goto.
    RTS ; Unneeded RTS, Lol.
    .db E0
    .db 40
    .db 18
    .db 68
    .db C8
    .db 40
    .db 00
    .db 58
    .db B0
    .db 40
    .db 08
    .db 60
    .db 98
    .db 40
    .db 10
    .db 0F
    .db 22
    .db 20
    .db 11
    .db 0F
    .db 10
    .db 1A
    .db 11
    .db 0F
    .db 30
    .db 00
    .db 11
    .db 0F
    .db 00
    .db 10
    .db 30
    .db 0F
    .db 0F
    .db 01
    .db 31
    .db 0F
    .db 0F
    .db 13
    .db 32
    .db 0F
    .db 0F
    .db 22
    .db 32
    .db 0F
    .db 0F
    .db 11
    .db 32
ROM_DATA_LUT_UNK: ; 13:1E4F, 0x027E4F
    .db FE ; -2
    .db FF ; -2
    .db 02 ; +2
    .db FF ; -1
    .db FF ; +1
    .db FE ; -2
    .db 01 ; +1
    .db FE ; -2
SCRIPT_HELP_SAVE_GAME_FILE: ; 13:1E57, 0x027E57
    LDA SAVE_SLOT_DATA_CHECKSUM_ADJUST_A ; Load stored.
    JSR SAVEGAME_INIT_BASE_FPTR_FOR_FILE_A ; Make ptrs.
    JSR CHECKSUM_SAVE_MANIP_PAGE ; Do checksum.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Enable.
    SEC ; Prep sub.
    LDY #$00 ; Reset stream.
    LDA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; Load 0x7400
    SBC BCD/MODULO/DIGITS_USE_A ; Sub with.
    STA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; Store back to.
    INY ; Stream++
    LDA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; 2x
    SBC BCD/MODULO/DIGITS_USE_B ; Sub with.
    STA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; Store back to.
    LDX #$03 ; Pages loop count.
LOOP_NEXT_PAGE: ; 13:1E75, 0x027E75
    LDY #$00 ; Seed stream index.
STREAM_NONZERO: ; 13:1E77, 0x027E77
    LDA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; Load from mod page.
    STA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Store to slot.
    INY ; Stream++
    BNE STREAM_NONZERO ; != 0, goto.
    INC SAVE_GAME_MOD_PAGE_PTR+1 ; Inc PTR H.
    INC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1
    DEX ; Loops--
    BNE LOOP_NEXT_PAGE ; != 0, goto.
    JMP ENGINE_WRAM_STATE_WRITE_DISABLED ; Leave, no writes.
LOAD_GAME_A_AND_CHECKSUM: ; 13:1E88, 0x027E88
    JSR SAVEGAME_INIT_BASE_FPTR_FOR_FILE_A ; Set up ptr for file.
    JSR ENGINE_WRAM_STATE_WRITEABLE ; Enable WRAM writes.
    LDX #$03 ; Page count for slot size.
LOOP_PAGES: ; 13:1E90, 0x027E90
    LDY #$00 ; Stream index.
MOVE_PAGE_DATA: ; 13:1E92, 0x027E92
    LDA [RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8]],Y ; Take game file data.
    STA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; Store to mod page.
    INY ; Stream++
    BNE MOVE_PAGE_DATA ; != 0, loop.
    INC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1 ; Inc PTR H for both ptrs.
    INC SAVE_GAME_MOD_PAGE_PTR+1
    DEX ; X--
    BNE LOOP_PAGES ; != 0, goto.
    JSR ENGINE_WRAM_STATE_WRITE_DISABLED ; No more WRAM writes.
    JSR CHECKSUM_SAVE_MANIP_PAGE ; Check check it, yeah.
    LDA SAVE_SLOT_DATA_CHECKSUM_ADJUST_A ; Load save slot data.
    AND #$F0 ; Keep upper.
    CMP #$B0 ; If _ #$B0
    BNE EXIT_FAIL_DIRECT ; !=, goto. TODO: Carry matters?
    LDA SAVE_SLOT_DATA_CHECKSUM_ADJUST_B ; Load other.
    CMP #$E9 ; If _ #$E9
    BNE EXIT_FAIL_DIRECT ; !=, goto.
    LDA BCD/MODULO/DIGITS_USE_A ; Load slot value added up.
    ORA BCD/MODULO/DIGITS_USE_B ; Combine with other bits. == 0, pass exit. Else, failed.
EXIT_FAIL_DIRECT: ; 13:1EBA, 0x027EBA
    RTS
SAVEGAME_INIT_BASE_FPTR_FOR_FILE_A: ; 13:1EBB, 0x027EBB
    AND #$07 ; Keep lower bits, index.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1 ; Store to.
    ASL A ; << 1, *2. CC now.
    ADC RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1 ; Add with, *3. Slot size.
    ADC #$77 ; Addr + 0x7700, base of saved files.
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY+1 ; Store ptr H, 0x77/0x7A/0x7D.
    LDA #$00
    STA RENAME_THIS_ARR_SOMETHING_SANE_EVENTUALLY[8] ; Clear addr L.
SAVEGAME_INIT_MOD_PAGE_PTR: ; 13:1ECA, 0x027ECA
    LDA #$00 ; Set FPTR 0x7400
    LDX #$74
    STA SAVE_GAME_MOD_PAGE_PTR[2]
    STX SAVE_GAME_MOD_PAGE_PTR+1
    RTS ; Leave.
CHECKSUM_SAVE_MANIP_PAGE: ; 13:1ED3, 0x027ED3
    JSR SAVEGAME_INIT_MOD_PAGE_PTR ; Reset.
    LDA #$00
    STA BCD/MODULO/DIGITS_USE_A ; Clear checksum.
    STA BCD/MODULO/DIGITS_USE_B
    LDX #$03 ; Pages to add together count.
LOOP_ALL_PAGES: ; 13:1EDE, 0x027EDE
    LDY #$00 ; Stream index reset.
LOOP_PAGE_STREAM: ; 13:1EE0, 0x027EE0
    CLC ; Prep add.
    LDA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; Load from file.
    ADC BCD/MODULO/DIGITS_USE_A ; Add with.
    STA BCD/MODULO/DIGITS_USE_A ; Store back.
    INY ; Stream++
    LDA [SAVE_GAME_MOD_PAGE_PTR[2]],Y ; Load from file.
    ADC BCD/MODULO/DIGITS_USE_B ; Add with.
    STA BCD/MODULO/DIGITS_USE_B ; Store to.
    INY ; Stream++
    BNE LOOP_PAGE_STREAM ; != 0, loop all stream.
    INC SAVE_GAME_MOD_PAGE_PTR+1 ; Inc PTR H.
    DEX ; Pages--
    BNE LOOP_ALL_PAGES ; != 0, goto.
    JMP SAVEGAME_INIT_MOD_PAGE_PTR ; Reset, abuse RTS.
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
    .db FF
